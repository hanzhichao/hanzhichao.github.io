<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[2017测试遇到的问题及经验点总结]]></title>
      <url>/2018/02/01/2017%E6%B5%8B%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E7%BB%8F%E9%AA%8C%E7%82%B9%E6%80%BB%E7%BB%93.html</url>
      <content type="html"><![CDATA[<p>[Lenovo]</p>
<pre><code>1. 别人交接给你的工作要及时核对，弄清
2. 不要一知半解却不问清楚
3. 遇到问题block了你的工作，不要窝在自己手里，抛出来
4. 及时汇报进度
5. 文档要面向业务小白，描述要清晰没有异议
6. 遇到报错要学会自己百度出错信息及看追查程序代码
7. bug要复现三遍，清楚复现率
8. 遇到问题放弃不管会带来严重后果（openstack虚拟环境保障）
9. 舒适区原则，新的任务从不熟悉到熟悉能让你cover更大的区域
</code></pre><p>[Chemanman]</p>
<pre><code>1. 开发总有一些你不知道的实现细节，会产生致命的bug
2. 发现bug,在其他环境（比如正式环境）复现一下，首先排除环境及自己部署原因



    * 检查是否按步骤部署
    * 是否按需要刷了库，
    * 是否需要重建索引，
    * 是否需要清理缓存，
    * 是否需要开启脚本），
    * 部署版本是否正确，
    * 开发是正确合并了分支（无缺失，无他人代码），
    * 是否师脏数据引起
    * 有无权限问题
1. 一定要分析定位完问题再交给开发
2. 弄懂相关接口字段和数据库表及字段含义
3. 一定要分析 用户高频场景，而不单纯从软件设计角度或提测功能角度分析问题
4. 版本更新的回归测试，不能只回归提测功能，总有一些关联或是开发的改动影响你是预测不足的。一定要回归基本的功能
5. 测试是严格的管控师，有责任提高开发的代码/文档素养，自测不充分，提测格式不对，主流程不通的直接打回
6. 要让开发因为自己的简单错误感到羞耻，并证据充分
7. 问题指于我，遇到反馈及时相应，团队中不推诿
8. pms传递结论性东西，不传递讨论过程（会干扰开发了解问题）
9. 自己提或负责的bug要持续跟进（已经指向下个人之后）
10. 对于提测任务一定要尽早了解需求，特别是中途介入的，一定要立即弄清楚各种逻辑
11. 用例要产品评审
12. 需求要读3遍，梳理完整
</code></pre><p>[Spicespirit]</p>
<pre><code>1. 不要相信开发
2. 对数据对数据对数据，重要的事情说三遍
3. 需求分析：Form表单类，操作流程类，状态迁移类-&gt;界面化，根据各输入框组成规则或业务逻辑限制用等价类组合正常用例和异常用例，异常包含，空，错误，多次错误，超长及破坏性
4. 流程分析各条路线，及逆向，多次重复，反复逆向，及破坏性测试，注意各步的触发及实现细节（触发的数据库多个表/redis/队列等的变动等）
5. 开发延期要及时风险报警
6. 产品推动/项目经理推动/测试推动
7. 要弄懂公司的所有技术架构
</code></pre><p>[Self]<br>最近帮朋友编写了一个基本的爬虫框架，交付后被发现种种问题：解了两天bug，个人的一点心得：<br>开发为什么会写出bug: </p>
<pre><code>1. 需求理解不充分，设计时就漏掉了某个限制或少了某个字段
2. 所期非所得，这和熟练度有关，但开发过程中难免会需要使用新的库/API/函数，实际运行与开发设想的不一致
3. 偷懒和简化，比如我在提取页面某种格式url的没有先用某种解析器解析出所有的链接，而是直接将页面源代码读取出来，使用正则匹配，结果遇到贪婪匹配的问题，需要配合比较复杂正则才能解决
4. 意念式改动：这里有个段子：以前问一朋友为什么总是不回消息，他言：平时下班比较类，看到不太要紧的消息就直接用意念回复了。一个方法修改，有可能修改了存储数据库的值，却忘记了修改方法的返回结果。
5. 平台因素，比如mac不严格区分大小写，比如Windows和mac文件结尾符不一样，比如python2和python3不一样的问题
6. 开发一般很少关注，怎么测试的问题
7. 自测不充分，开发一般会在调试过程中进行一部分测试，但是覆盖度远远不够，实际编写自测用例，比如模拟终端交互，提取函数内部方法，写mock，构造数据，分析各个路径，以及构造各种异常情况所要耗费的精力甚至要3-5倍编写功能的时间
8. 抱着交差就行，可用就行的心态
</code></pre><p>[个人总结对bug的处理的境界]<br>初级测试：主要验证软件操作及返回，发现页面前端bug,主流程操作bug,问题直接抛给开发，只关注软件开发逻辑<br>中级测试：测试结果会核对数据库，出bug会简单的定位前端/后端的问题，抓包，log,会复现问题，提bug规范，带环境信息，预置条件，清晰的复现步骤，期望结果，实际结果，复现概率等<br>关注用户实际场景<br>高级测试：根据请求接口字段，对比接口文档，根据出错信息，定位代码，分析代码，定位bug原因，调试代码，解决bug方案<br>关注非性能问题，如并发，效率，规范，及未来的适用性，内存泄漏，架构等等<br>专家级别：测试驱动开发，性能调优，代码走查，发现其他可能bug</p>
<p>@ 感谢 孙磊/晓光/保江/柳静/何明 等给予的批评及指正</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ActiveMQ学习笔记]]></title>
      <url>/2018/02/01/ActiveMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>目录</p>
<pre><code>1. [X] JMS规范
2. [X] ActiveMQ初步
3. [X] ActiveMQAPI讲解
4. [ ] ActiveMQ高级主题（点对点模式/发布订阅模式）
5. [ ] 多线程+ActiveMQ负载均衡器实战
</code></pre><p>背景&amp; JMS概述<br>当前CORBA，DCOM, RMI等RPC中间件技术已广泛应用与各个领域。但是面对规模和复杂都都越来约高的分布式系统，这些技术也显示出其局限性。</p>
<pre><code>1. 同步通信： 客户端发出调用后，必须等待服务对象完成处理并返回结果后才能继续执行；
2. 客户和服务对象的声明周期紧密耦合： 客户进程和服务对象进程都必须正常运行；如果由于服务对象崩溃或者网络故障导致客户的请求不可达，客户还会接收到异常；
3. 点对点通信：客户的一次调用只发给某个单独的目标对象。
</code></pre><p>面向消息的中间件（Message Oriented Middleware, MOM)较好的解决了以上问题。发送者将消息发给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息发给接收者。这种模式下，方法送和接收是异步的，发送者无需等待；二者的声明周期未必相同：发送消息的时候接收者不一定运行，接收消息的时候发送者也不一定运行；一对多通信：对于一个消息可以有多个接收者。</p>
<p>Java消息服务：JMS定义了Java中范围消息中间件的接口。JMS只是接口，并没有给予实现，实现JMS接口的消息中间件成为JMS Provider, 已有的MOM系统包括Apache的ActiveMQ，以及阿里巴巴的RocketMQ，IBM的MQSeries，Microsoft的MSMQ，BEA的MesssageQ, RabbitMQ等待，他们基本都遵循JMS规范</p>
<p>JMS术语<br>JMS   实现JMS接口的消息中间件</p>
<pre><code>* Provider(MessageProducer)：生产者 -- 由会话创建的对象，用于发送消息到目标，用户可以创建某个目标的发送者，也可以创建一个通用的发送者，再发送消息时制定目标。
* Consumer(MessageConsumer): 消费者 -- 由会话创建的对象，用于接收发送到目标的消息。消费者可以同步地（阻塞模式），或异步（非阻塞）接收队列和主题类型的消息。
* Message  接口（消息） -- 是再消费者和生产者之间传送的对象，也就是说从一个应用程序传送到另一个应用程序，一个消息有三个主要部分：

    * 消息头（必须）： 包含黄永玉识别和为消息寻找路由的操作设置
    * 一组消息数学（可选）： 包含额外的属性， 支持其他提供者和用户的兼容。可以创建定制的字段和顾虑器（消息选择器）。
    * 一个消息体（可选）： 允许用户创建五种类型的消息（文本消息，映射消息，字节消息，流消息和对象消息）
    * 消息接口非常灵活，并提供了许多方式来定制消息的内容。
* PTP: Point to Point， 点对点的消息模型
* Pub/Sub: Publish/Subscribe:  发布/订阅模式
* Queue: 队列目标
* Topic: 主题目标
* ConnectionFactory: 连接工厂， JMS用它创建连接：
* Connection: JMS客户端到JMS Provider的连接
* Destination: 消息的目的地
* Session: 会话， 一个发送或接收请求的线程
</code></pre><p>消息格式定义<br>JMS定义了五种不同的消息正文格式， 以及调用的消息类型，允许你发送并接收以一些不同形式的数据， 提供现有消息格式化的一些级别的兼容性。</p>
<pre><code>* StreemMessage    Java 原始值的数据流
* MapMessage    名称-值 对
* TestMessage   字符串对象
* ObjectMessage 一个序列化的Java对象
* BytesMessage 一个未解释字节的数据流
</code></pre><p>ActiveMQ简介<br>ActiveMQ是Apache出品，最流行的，能力强劲的开源消息总线。<br>ActiveMQ是一个完全支持JMS1.1混合J2EE 1.4规范的JMS Provider实现， 尽管JMS规范初代已经是很久的事情了，但是JMS在当今的J2EE应用中仍然扮演着特殊的地位， 可以说ActiveMQ在业界应用最广泛， 当然如果想要用更强大的性能和海量数据处理能力， ActiveMQ还需要不断的升级版本， 80%以上的业务我们使用ActiveMQ已经足够满足需求，当然后续如天猫、淘宝这种大型的电商网站，尤其是双11这种特殊时间，ActiveMQ需要进行很复杂的优化原名以及架构设计才能完成，我们之后会学习一个更强大的分布式消息中间件：RocketMQ，可以说ActiveMQ是核心，是基础，所有我们必须要掌握好。</p>
<p>ActiveMQ Hello World<br>我们首先写一个简单的Hello World示例， 让大家感受下ActiveMQ, 我们需要实现接受者混合发送者两部分代码的编写。<br>Sender/Receiver</p>
<pre><code>1. 建立ConnectionFactory工厂对象， 需要填入用户名、密码、以及要连接的地址，均时候用默认即可，默认端口为“tcp://localhost:61616&quot;
2. 通过ConnectionFactory工厂我们创建一个Connection连接，并且调用Connection的start放放风开启连接，Connection默认是关闭的。
3. 通过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置为1为是否启用多事务， 参数配置2为签收模式，一般我们设置自动签收
4. 通过Session创建Destination对象， 指的事一个客户端用来指定生产消息目标和消息来源的对象，在PTP模式中，Destination被称做Queue即队列，在Pub/Sub模式中，Destination被称做Topic即主题。在程序中可以使用多个Queue和Topic。
5. 我们需要通过Session对象创建消息的发送和接收对象（生产者混合消费者）MessageProduce/MessageConsumer
6. 我们可以使用MessageProducer的setDeliveryMode方法为其设置持久化特性和非持久化特性（DeliveryMode)
7. 最后后我们使用JMS规范的TextMessage形式创建数据（通过Session对象）,并用MessageProducer的send放放风发送数据。同理客户段使用receive方法进行接收数据，最后不要忘记关闭Connection连接）
</code></pre><p>ActiveMQ安全机制</p>
<pre><code>* activemq的web管理界面：http://localhost:8161/admin

    * activemq管控台时候用jetty部署，要修改admin管理密码需要修改conf/jetty_realm.properites
* activemq应该设置在又安全几张桌子，hi有符合认证的用户才能进行发送和获取消息，所以我们也可以再activemq.xml里去添加安全验证。在conf\activemq.xml，第123行规之后添加配置：

    &lt;plugins&gt;
      &lt;simpleAuthenticationPlugin&gt;
        &lt;users&gt;
          &lt;authenticationUser username=&quot;hzc&quot; password=&quot;hzc&quot; groups=&quot;users,admins&quot;/&gt;
        &lt;/users&gt;
      &lt;/simpleAuthenticationPlugin&gt;
    &lt;/plugins&gt;
</code></pre><p>Connection方法使用</p>
<p>在成功创建正确的ConnectionFactory后，下一步是创建一个连接，它是JMS定义的一个接口。ConnectionFactory负责返回可以与地层消息床底系统进行通信的Connection实现。通常客户端只使用单一连接，根据JMS文档，Connection的目的是“利用JMS提供者封装开放的连接”,以及表示“客户端与提供者服务例程之间的开发TCP/IP套接字”。该文档还指出Connection应该是进行客户端身份验证的地方等待。</p>
<p>当一个Connection被创建时，它的传输默认是关闭的，必须用start方法开启。一个Connection可以简历一个或多个Session.</p>
<p>当一个程序执行完成后，必须关闭之前创建的Connection, 否则ActiveMQ不能释放资源，关闭一个Connection同样也关闭了Session,MessageProducer和MessageConsumer</p>
<p>Connection createConnection();<br>Connection createConnection(String userName, String password, String url);</p>
<p>Session 方法使用</p>
<p>一旦从ConnectionFactory中获得一个Connection, 必须从Connection中创建一个或者多个Session.Session是一个发送或接收消息的线程，可以使用Session创建MessageProducer,MessageConsumer和Message.</p>
<p>Session可以被事务花，也可以不被事务化，通常，可以通过向Connection上的十点过创建方法传递一个布尔参数对此进行设置。<br>Session createSession(boolean transacted, int acknowledgeMode);<br>其中transacted为使用事务的标识，acknowledgeMode为签收模式。<br>结束事务由两种方法：提交或者回滚。当一个事务提交，消息被处理。如果事务中由一个步骤失败，事务就回滚，这个事务中的已经执行的动作将被测小。在发送消息最后也必须使用session.commit()方法提交事务。</p>
<p>签收由三种形式：</p>
<pre><code>* Session.AUTO_ACKNOWLEDGE 当客户端从receive或onMessage成功返回时，Session自动签收客户端的这条消息的收条。
* Session.CLIENT_ACKNOWLEDGE客户端通过调用消息（Message)的acknowledge方法签收消息。在这种情况下，签收发生在Session层面：签收一个以消费的消息会自动地签收这个Session所有已消费消息的收条。
* Session.DUPS_OK_ACKNOWLEDGE 此选项指示Session不必确保对传送消息的签收。它可能引起消息的重复，但是降低了Session的开心，所有只有客户端能容忍重复的消息，才可使用。
</code></pre><p>MessageProducer<br>MessageProducer: MessageProducer是一个由Session创建的对象，用来向Destination发送消息。<br>void send(Destionation destination, Message message);<br>void send(Destination destination, Message message, int deliveryMode, int priority, long time ToLive);<br>void send(Message message);<br>void send(Message message, int deliveryMode, int priority, long time ToLive);<br>其中deliveryMode为传送模式，priority为消息优先级， timeToLive为消息过期时间。<br>ActiveMQ支持两种消息传送模式，PERSSISTENT和NON_PERSISTENT两种，如果不指定传送模式，那么默认是持久性消息。如果容忍消息丢失，那么使用非持久性消息可以改善性能和减少存储的开销。<br>消息优先级从0-9十个级别， 0-4是普通消息，5-9是加急消息。如果不指定优先级，则默认为4，JMS不要钱严格按照这10个优先级发送消息，单必须保证加急消息要先于普通消息到达。<br>默认情况下，消息用不会过期，如果消息在特定周期内失去意义，那么可以设置过期时间，单位是毫秒。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程学习笔记]]></title>
      <url>/2018/02/01/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>目录</p>
<pre><code>1. [X] 线程安全
2. [X] synchronized &amp; volatile
3. [X] 同步类容器、并发类容器“Concurrent”、“CopyOnWrite”
4. [X] Queue
5. [X] 生产者消费者模式
6. [X] Executors线程池
</code></pre><p>学习目的</p>
<pre><code>1. 面试
2. 提高技术
3. 发现类似并非/分布式/并行处理问题
</code></pre><p>第一节 线程安全<br>线程安全</p>
<pre><code>1. 概念：当多个线程方位某一个类（对象或方法）时，这个类始终都能表现出正确的行为，那么这个类（对象/方法）是线程安全的
2. synchronized: 可以在任意对象方法上加锁，而枷锁的这段代码被称为“互斥区”或“临界区”
3. 示例：MyThread: 当多个线程访问maThread的run方法时，以排队的方式进行处理（这里排队时按照CPU分配的先后顺序而定的），一个线程想要执行synchronized修饰的方法里的代码，首先尝试获得锁，如果拿到锁，执行更改代码体，拿不到锁，这个线程就会不断的尝试获得这把锁，知道拿到为止，而且是多线程去竞争这把锁（也就是会有锁竞争问题）。
</code></pre><p>public class MyThread extends Thread{</p>
<pre><code>private int count = 5;

//synchronized加锁
public synchronized void run(){
      count --;
      System.out.println(this.currentThread().getName() + &quot; count = &quot; + count);
}
public static void main(String[] args) {
      // TODO Auto-generated method stub
      MyThread myThread = new MyThread();
      Thread t1 = new Thread(myThread, &quot;t1&quot;);
      Thread t2 = new Thread(myThread, &quot;t2&quot;);
      Thread t3 = new Thread(myThread, &quot;t3&quot;);
      Thread t4 = new Thread(myThread, &quot;t4&quot;);
      Thread t5 = new Thread(myThread, &quot;t5&quot;);
      t1.start();
      t2.start();
      t3.start();
      t4.start();
      t5.start(); 
}
</code></pre><p>}</p>
<p>第二节 多个线程多个锁<br>synchronized只能对一个对象加锁，如果要对整个类加锁，需要将类声明为static对象，使所有实例都使用类对象<br>关键字synchronized取得的锁都是对象锁，而不是把一段代码（方法）当作锁，两个对象，线程获得的就是两个不同的锁，它们互不影响；<br>有一种情况则是相同的锁，即在静态方法上加synchronized关键字，表示锁定.class类，类一级别的锁（独占.class类）<br>package com.mymuti.sample02;<br>public class MutiThread {</p>
<pre><code>private static int num = 0;

/** static **/
public static synchronized void printNum(String tag){
      try {
            if(tag.equals(&quot;a&quot;)){
                  num = 100;
                  System.out.println(&quot;tag a, set num over!&quot;);
                  Thread.sleep(1000);
            }else {
                  num = 200;
                  System.out.println(&quot;tag b, set num over!&quot;);
            }
            System.out.println(&quot;tag &quot; + tag + &quot;, num = &quot; + num);
      } catch (InterruptedException e){
            e.printStackTrace();
      }
}

//注意观察run方法的输出
public static void main(String[] args) {
      // TODO Auto-generated method stub

      //两个不同的对象
      final MutiThread m1 = new MutiThread();
      final MutiThread m2 = new MutiThread();

      Thread t1 = new Thread(new Runnable(){
            @Override
            public void run(){
                  m1.printNum(&quot;a&quot;);
            }
      });

      Thread t2 = new Thread(new Runnable(){
            @Override
            public void run(){
                  m2.printNum(&quot;b&quot;);
            }
      });

      t1.start();
      t2.start();
}
</code></pre><p>}</p>
<p>同步和异步</p>
<p>synchronized</p>
<p>第三节 脏读<br>当读取线程较慢，写入线程教快时容易产生脏读—解决方法—读写同一个对象，用synchronized分别对读方法和写方法加锁</p>
<p>第四节synchronize其他概念</p>
<pre><code>1. 可以嵌套调用
2. 支持继承
3. 支持锁重入
</code></pre><p>package com.mymuti.lesson04_synchronized_02;<br>/**</p>
<ul>
<li>synchronized的重入</li>
<li><p>@author Administrator<br><em>
</em>/<br>public class SyncDubbo1 {</p>
<p>   public synchronized void method1(){</p>
<pre><code>System.out.println(&quot;method1..&quot;);
method2();
</code></pre><p>   }<br>   public synchronized void method2(){</p>
<pre><code>System.out.println(&quot;method2..&quot;);
method3();
</code></pre><p>   }<br>   public synchronized void method3(){</p>
<pre><code>System.out.println(&quot;method3..&quot;);
</code></pre><p>   }<br>   public static void main(String[] args) {</p>
<pre><code>// TODO Auto-generated method stub
final SyncDubbo1 sd = new SyncDubbo1();
Thread t1 = new Thread(new Runnable(){
      @Override
      public void run(){
            sd.method1();
      }
});
t1.start();
</code></pre><p>   }<br>}</p>
</li>
</ul>
<p>package com.mymuti.lesson04_synchronized_02;<br>/**</p>
<ul>
<li>synchronized的重入</li>
<li><p>@author Administrator<br><em>
</em>/<br>public class SyncDubbo2 {<br>   static class Main{</p>
<pre><code>public int i = 10;
public synchronized void operationSup(){
      try {
            i--;
            System.out.println(&quot;Main print i = &quot; + i);
            Thread.sleep(100);
      } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      }

}
</code></pre><p>   }</p>
<p>   static class Sub extends Main {</p>
<pre><code>public synchronized void operationSub(){
      try {
            while(i &gt; 0){
                  i--;
                  System.out.println(&quot;Sub print i = &quot; + i);
                  Thread.sleep(100);
                  this.operationSup();
            }
      } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      }
}
</code></pre><p>   }<br>   public static void main(String[] args) {</p>
<pre><code>// TODO Auto-generated method stub
Thread t1 = new Thread(new Runnable() {
      @Override
      public void run() {
            Sub sub = new Sub();
            sub.operationSub();
      }
});
t1.start();
</code></pre><p>   }<br>}</p>
</li>
</ul>
<p>package com.mymuti.lesson04_synchronized_02;<br>/**</p>
<ul>
<li>synchronized异常</li>
<li>@author Administrator<br><em>
</em>/<br>public class SyncException {<br>   private int i = 0;<br>   public synchronized void operation(){<pre><code>while(true){
      try {
            i++;
            Thread.sleep(200);
            System.out.println(Thread.currentThread().getName() + &quot; , i = &quot; + i);
            if(i==10){
                  Integer.parseInt(&quot;a&quot;);
                  //throw new RuntimeException();
            }
      } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            System.out.println(&quot; log info i =&quot; + i);
            //throw new RuntimeException();
            //continue;
      }
}
</code></pre>   }<br>   public static void main(String[] args) {<pre><code>// TODO Auto-generated method stub
final SyncException se = new SyncException();
Thread t1 = new Thread(new Runnable() {
      @Override
      public void run() {
            se.operation();
      }
},&quot;t1&quot;);
t1.start();
</code></pre>   }<br>}</li>
</ul>
<p>第五节synchronize代码块</p>
<pre><code>1. Object lock--使用任意的Object进行枷锁，用法比较灵活
2. String lock---不要使用String的常量加锁，会出现死循环问题
3. 锁对象改变---对一个对象进行加锁的时候要注意对象本身是否发生改变，改变，那么持有的锁不同
4. 死锁问题
</code></pre><p>package com.mymuti.lesson05_synchronized_03;<br>public class ObjectLock {<br>      public void method1(){<br>            synchronized (this){ //对象锁,this代表ObjectLock<br>                  try {<br>                        System.out.println(“do method1..”);<br>                        Thread.sleep(2000);<br>                  } catch (InterruptedException e) {<br>                        // TODO Auto-generated catch block<br>                        e.printStackTrace();<br>                  }<br>            }<br>      }<br>      public void method2(){<br>            synchronized (ObjectLock.class) {<br>                  try {<br>                        Thread.sleep(2000);<br>                        System.out.println(“do method2..”);<br>                  } catch (InterruptedException e) {<br>                        // TODO Auto-generated catch block<br>                        e.printStackTrace();<br>                  }<br>            }<br>      }</p>
<pre><code>public Object lock = new Object();
public void method3(){ //任何对象锁
      synchronized (lock){
            try {
                  System.out.println(&quot;do method3..&quot;);
                  Thread.sleep(2000);
            } catch (InterruptedException e) {
                  // TODO Auto-generated catch block
                  e.printStackTrace();
            }
      }
}
public static void main(String[] args) {
      // TODO Auto-generated method stub
      ObjectLock ol = new ObjectLock();
      Thread t1 = new Thread(new Runnable(){
            @Override
            public void run(){
                  ol.method3();
                  ol.method1();
                  ol.method2();

            }
      });
      t1.start();
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson05_synchronized_03;<br>public class StringLock {<br>      public void method(){<br>            //new String(“字符串常量”);<br>            //synchronized(“字符串常量”){<br>            synchronized(new String(“字符串常量”)){<br>                  while(true){<br>                        try {<br>                              System.out.println(“当前线程： “ + Thread.currentThread().getName() + “开始”);<br>                              Thread.sleep(1000);<br>                              System.out.println(“当前线程： “ + Thread.currentThread().getName() + “结束”);<br>                        } catch (InterruptedException e) {<br>                              // TODO Auto-generated catch block<br>                              e.printStackTrace();<br>                        }</p>
<pre><code>            }
      }
}
public static void main(String[] args) {
      // TODO Auto-generated method stub
      final StringLock stringLock = new StringLock();
      Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                  stringLock.method();
            }
      },&quot;t1&quot;);

      Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                  stringLock.method();
            }
      },&quot;t2&quot;);
      t1.start();
      t2.start();

}
</code></pre><p>}<br>package com.mymuti.lesson05_synchronized_03;<br>public class ModifyLock {<br>      private String name;<br>      private int age;</p>
<pre><code>public String getName() {
      return name;
}
public void setName(String name){
      this.name = name;
}
public int getAge() {
      return age;
}
public void setAge (int age){
      this.age = age;
}

public synchronized void changeAttributte(String name, int age){
      try {
            System.out.println(&quot;当前线程： &quot; + Thread.currentThread().getName() + &quot;开始&quot;);
            this.setName(name);
            this.setAge(age);
            System.out.println(&quot;当前线程： &quot; + Thread.currentThread().getName() + &quot;修改对象内容为：&quot; + this.getName() + &quot;,&quot; + this.getAge());
            Thread.sleep(2000);
            System.out.println(&quot;当前线程： &quot; + Thread.currentThread().getName() + &quot;结束&quot;);
      } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      }
}

public static void main(String[] args) {
      // TODO Auto-generated method stub
      final ModifyLock modifyLock = new ModifyLock();
      Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                  modifyLock.changeAttributte(&quot;张三&quot;,20);
            }
      },&quot;t1&quot;);

      Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                  modifyLock.changeAttributte(&quot;李四&quot;,21);
            }
      },&quot;t2&quot;);
      t1.start();
      t2.start();
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson05_synchronized_03;<br>public class ChangeLock {<br>      private String lock = “lock”;<br>      private void method(){<br>            synchronized (lock){<br>                  try {<br>                        System.out.println(“当前线程： “ + Thread.currentThread().getName() + “开始”);<br>                        lock = “change lock”;  //尽量不要修改lock的内容<br>                        Thread.sleep(6000);<br>                        System.out.println(“当前线程： “ + Thread.currentThread().getName() + “结束”);<br>                  } catch (InterruptedException e) {<br>                        // TODO Auto-generated catch block<br>                        e.printStackTrace();<br>                  }<br>            }<br>      }<br>      public static void main(String[] args) {<br>            // TODO Auto-generated method stub<br>            final ChangeLock changeLock = new ChangeLock();<br>            Thread t1 = new Thread(new Runnable() {<br>                  @Override<br>                  public void run() {<br>                        changeLock.method();<br>                  }<br>            },”t1”);</p>
<pre><code>      Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                  changeLock.method();
            }
      },&quot;t2&quot;);
      t1.start();
      t2.start();
}
</code></pre><p>}<br>第六节 volatile关键字</p>
<pre><code>1. volatile概念：
 volatile关键字的主要作用是使变量在多个线程减可见
在java中，每一个线程都会又一块工作内存区，其中存放着所有线程共享的主内存中的变量值的拷贝，当线程执行时，他在自己的工作内存区中才做这些变量。为了存取一个公想的变量，一个线程通常先获取锁并区清除它的内存工作区，把这些共享变量从所有的线程的共享内存区中正确的装入到他自己所在的工作内存区中，当线程解锁时保证该工作内存中变量的值写回到共享内存中。
一个线程可以执行的操作又use,assign(赋值），load,store,lock,unlock,而主内存可以执行的操作又read,write,lock,unlock，每个操作都是原子的。
volatile的作用就是强制线程到主内存（共享内）里去读取变量，而不去线程工作内存区里去读取，从而实现了多个线程间的变量可见。也就满足线程安全的可见性。
2. volatile 没有原子性
</code></pre><p>package com.mymuti.lesson06_volatile;<br>import java.util.concurrent.atomic.AtomicInteger;<br>/**</p>
<ul>
<li><p>volatile关键字不具备synchronized关键字的原子性（同步）<br>*/<br>public class VolatileNoAtomic extends Thread {<br>   private static volatile int count;<br>   // static AtomicInteger count = new AtomicInteger(0);<br>   private static void addCount(){</p>
<pre><code>for(int i =0; i&lt;1000; i++){
      count ++;
      //count.incrementAndGet();
}
System.out.println(count);
</code></pre><p>   }</p>
<p>   public void run() {</p>
<pre><code>addCount();
</code></pre><p>   }</p>
<p>   public static void main(String[] args) {</p>
<pre><code>// TODO Auto-generated method stub
VolatileNoAtomic[] arr = new VolatileNoAtomic[10];
for(int i = 0; i &lt; 10; i++){
      arr[i] = new VolatileNoAtomic();
}

for(int i = 0;i &lt; 10; i++){
      arr[i].start();
}
</code></pre><p>   }<br>}</p>
</li>
</ul>
<p>第七节 wait和notify</p>
<pre><code>1. wait/notify方法实现线程间的通信（注意这两个方法都是object的类的方法，所有的对象都可以使用着两个方法）
2. wait 和 notify必须配合synchronized关键字使用
3. wait方法释放锁，notify方法不释放锁
</code></pre><p>package com.mymuti.wait_notify;<br>import java.util.ArrayList;<br>import java.util.List;<br>/**</p>
<ul>
<li>wait notify 方法， wait释放锁，notify不释放锁</li>
<li><p>@author Administrator<br><em>
</em>/<br>public class ListAdd2 {<br>  private volatile static List list = new ArrayList();</p>
<p>  public void add(){</p>
<pre><code>list.add(&quot;hello&quot;);
</code></pre><p>  }</p>
<p>  public int size(){</p>
<pre><code>return list.size();
</code></pre><p>  }<br>  public static void main(String[] args) {</p>
<pre><code>final ListAdd2 list2 = new ListAdd2();

//1 实例化一个lock
//当使用wait和notify的时候，一i的那个要配合着synchronized关键字去使用
final Object lock = new Object();
Thread t1 = new Thread(new Runnable(){
    @Override
    public void run(){
        synchronized (lock) {
            for(int i = 0; i&lt; 10; i++){
                list2.add();
                System.out.println(&quot;当前线程： &quot; + Thread.currentThread().getName() + &quot;添加了一个元素..&quot;);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                if(list2.size() == 5){
                    System.out.println(&quot;已经发出通知..&quot;);
                    lock.notify();
                }
            }
        }
    }
},&quot;t1&quot;);

Thread t2 = new Thread(new Runnable(){
    public void run(){
        synchronized(lock){
            if(list.size() != 5){
                try {
                    lock.wait();
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            System.out.println(&quot;当前线程：&quot; + Thread.currentThread().getName() + &quot;收到通知线程停止&quot;);
            throw new RuntimeException();
        }
    }
},&quot;t2&quot;);

t2.start();
t1.start();
</code></pre><p>  }<br>}</p>
</li>
</ul>
<p>第八节 使用wait/notify模拟Queue<br>BlockingQueue:顾名思义，阻塞队列，阻塞的放入和取出数据，我们要实现LinkedBlokingQueue下面的两个简单方法put和take<br>put 把object加入queue,如果queque没有空闲，则阻塞<br>take,取出，若队列为空则阻塞<br>package com.mymuti.lesson08_queue_simulate;<br>import java.util.LinkedList;<br>import java.util.concurrent.TimeUnit;<br>import java.util.concurrent.atomic.AtomicInteger;<br>public class MyQueue {</p>
<pre><code>//1. 需要一个承装元素的集合
private final LinkedList&lt;Object&gt; list = new LinkedList&lt;Object&gt;();

//2. 需要一个计数器
private AtomicInteger count = new AtomicInteger(0);

//3. 需要制定上限和下限
private int miniSize = 0;
private int maxSize;

//4. 构造方法
public MyQueue(int size){
    this.maxSize = size;
}

//5. 初始化一个对象用于加锁
private final Object lock = new Object();

//6. put 方法
public void put(Object obj){
    synchronized (lock) {
        while(count.get() == this.maxSize){
            try {
                lock.wait();    //当长度满时，使用wait阻塞该线程
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }  
        }
        //1. 加入元素
        list.add(obj);
        //2.计数器增加
        count.incrementAndGet();
        //3.通知另一个线程
        System.out.println(&quot;新加入的元素为：&quot; + obj);
        lock.notify();     //加入元素后广播通知
    }
}

//7. take方法
public Object take(){
    Object ret = null;
    synchronized (lock){
        while(count.get() == this.miniSize){
            try {
                lock.wait();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        //1. 移除元素
        ret = list.removeFirst();

        //2. 计数器递减
        count.decrementAndGet();

        //3. 唤醒另一个线程
        lock.notify();
    }
    return ret;
}

public int getSize(){
    return this.count.get();
}


public static void main(String[] args) {
    MyQueue mq = new MyQueue(5);
    mq.put(&quot;a&quot;);
    mq.put(&quot;b&quot;);
    mq.put(&quot;c&quot;);
    mq.put(&quot;d&quot;);
    mq.put(&quot;e&quot;);

    System.out.println(&quot;当前容器长度： &quot; + mq.getSize());

    Thread t1 = new Thread(new Runnable(){
        @Override
        public void run(){
            mq.put(&quot;f&quot;);
            mq.put(&quot;g&quot;);
        }
    },&quot;t1&quot;);

    Thread t2 = new Thread(new Runnable(){
        @Override
        public void run(){
            Object o1 = mq.take();
            System.out.println(&quot;移除的元素为： &quot; + o1);
            Object o2 = mq.take();
            System.out.println(&quot;移除的元素为：&quot; + o2);
        }
    },&quot;t2&quot;);

    t1.start();
    try {
        TimeUnit.SECONDS.sleep(2);
    } catch (InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    t2.start();
}
</code></pre><p>}</p>
<p>第九节 单例和线程安全<br>TreadLocal概念：线程局部变量，是一种多线程间并发访问变量的解决方案。与其synchronized等加锁的方式不同，ThreadLocal完全不提供锁，而使用以空间换时间的手段，为每个线程提供变量的独立副本，以保障线程安全<br>从性能上说，ThreadLocal不具有绝对的优势，在并发不是很高的时候，枷锁的性能会更好，但作为一套与锁完全无关的线程安全解决方案，在高并发量或着竞争激烈的场景，使用ThreadLocal可以在一定程度上减少锁竞争<br>package com.mymuti.lesson09_thread_local;</p>
<p>public class ConnThreadLocal {<br>      public static ThreadLocal<string> th = new ThreadLocal<string>();</string></string></p>
<pre><code>public void setTh(String value){
      th.set(value);
}

public void getTh(){
      System.out.println(Thread.currentThread().getName() + &quot;:&quot; + this.th.get());
}

public static void main(String [] args){
      final ConnThreadLocal ct = new ConnThreadLocal();
      Thread t1 = new Thread(new Runnable(){
            @Override
            public void run(){
                  ct.setTh(&quot;张三&quot;);
                  ct.getTh();
            }
      },&quot;t1&quot;);

      Thread t2 = new Thread(new Runnable(){
            @Override
            public void run(){
                  try {
                        Thread.sleep(1000);
                  } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                  }
                  ct.getTh();
            }
      },&quot;t2&quot;);
      t1.start();
      t2.start();
}
</code></pre><p>}<br>单例模式：最常见的就是饥饿模式和懒汉模式，一个直接实例化对象，一个在调用方法时进行实例化对象，在多线程模式中，考虑到性能和线程安全问题，我们一般选择下面两种比较经典的单例模式，在性能提高的同时，又保证了线程安全。<br>dubble check instance<br>static inner class–静态内部类<br>package com.mymuti.lesson09_thread_local;<br>/**</p>
<ul>
<li>静态内部类</li>
<li><p>@author Administrator<br><em>
</em>/<br>public class InnerSingleton {</p>
<p>   //静态内部类<br>   private static class Singletion {</p>
<pre><code>private static Singletion single = new Singletion();
</code></pre><p>   }</p>
</li>
</ul>
<pre><code>//外部接口
public static Singletion getInstance(){
      return Singletion.single;
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson09_thread_local;<br>public class DubbleSingleton {<br>      private static DubbleSingleton ds;  //懒汉模式，懒加载模式</p>
<pre><code>public static DubbleSingleton getDs(){
      if(ds == null){
            //模拟初始化的准备时间
            try {
                  Thread.sleep(1000);
            } catch (InterruptedException e) {
                  // TODO Auto-generated catch block
                  e.printStackTrace();
            }
            synchronized (DubbleSingleton.class){
                  if(ds == null){    // Double Check 双重检查
                        ds = new DubbleSingleton();
                  }
            }
      }
      return ds;
}


public static void main(String [] args){
      Thread t1 = new Thread(new Runnable(){
            @Override
            public void run(){
                  System.out.println(DubbleSingleton.getDs().hashCode());
            }
      },&quot;t1&quot;);

      Thread t2 = new Thread(new Runnable(){
            @Override
            public void run(){
                  System.out.println(DubbleSingleton.getDs().hashCode());
            }
      },&quot;t2&quot;);

      Thread t3 = new Thread(new Runnable(){
            @Override
            public void run(){
                  System.out.println(DubbleSingleton.getDs().hashCode());
            }
      },&quot;t3&quot;);

      t1.start();
      t2.start();
      t3.start();
}
</code></pre><p>}</p>
<p>第十节 同步类容器和并发类容器<br>同步类容器<br>同步类容器都是都是线程安全的，单在某些场景下可能需要加锁来保护符合操作。复合操作如：迭代（反复访问元素，遍历玩容器中所有的元素）、跳转（根据指定的顺序找到当前元素的下一个元素）、以及条件运算。这些符合操作在多线程并发地修改容器时，可能会表现出意外的行尾，最经典的便是ConcurrentModificationException,愿意时当容器迭代的过程中，被并发的修改了内容，这是由于早期迭代器设计的时候没有考虑并发修改的问题。</p>
<p>同步类容器：如古老的Vector、HashTable.这些容器的同步功能其实都是由JDK的Collections.synchronized…等工厂方法去创建实现的，使得每次只能有一个线程访问容器的状态，这明显不满足我们今天互联网时代高并发的需求，在保证线程安全的同时，也必须要有足够好的性能。</p>
<p>并发类容器<br>jdk5.0以后提供了多种并发类容器来替代同步类容器从而改善性能。同步类容器的状态都是串行化的。他们虽然实现了线程安全，但是严重降低了并发性，在多线程环境时，严重降低了应用程序的吞吐量。<br>并发类容器时专门针对并发设计的，使用ConcurrentHashMap来代替给与散列的传统的HashTable,而且在ConcurrentHashMap中，添加了一些常见复合操作的支持。以及使用了CopyonWriteArrayList代替Voctor,并发的CopyonWriteArraySet,以及并发的Queue,ConcurrentLinkedQueue和LinkedBlockingQueue,前者是高性能的队列，后者是阻塞形式的队列，具体实现Queue还有很多，例如ArrayBlockingQueue、PriorityBlockingQueue、SynchronousQueue等</p>
<p>类型<br>同步类容器<br>并发类容器<br>Array<br>Vector<br>CopyonWriteArrayList</p>
<p>HashMap<br>HashTable<br>ConcurrentHashMap<br>ConcurrentSkipListMap—支持并发排序<br>Queue</p>
<p>ConcurrentLinkedQueue—高性能队列<br>LinkedBlockingQueue—阻塞队列<br>ArrayBlockingQueue<br>PriorityBlockingQueue<br>SynchronousQueue<br>ConcurrentMap<br>ConcurrentMap接口有以下两个重要的实现：<br>ConcurrentHashMap<br>ConcurrentSkipListMap(支持并发排序功能，弥补ConcurrentHashMap)<br>ConcurrentHashMap内部使用段（Segment)啦表示这些不同的部分，每个段其实就是一个小的HashTable,它们有自己的锁。只要多个修改操作发生在不同的段上，他们就可以并发的进行。吧一个整体分成了16个段（segment)。也就是最高只是16个线程的并发修改操作。这也是多线程场景时减小锁的粒度从而降低锁竞争的一种方案。并且代码中大多共享变量使用volatile关键字声明，目的时第一时间获取修改的内容，性能非常好。</p>
<p>第十一节 Concurrent与CopyOnWrite<br>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。<br>JDK里的COW容器有两种：CopyonWriteArrayList和CopyOnWriteArraySet,COW容器非常有用，可以在非常多的并发场景中使用到。<br>什么是CopyOnWrite容器？<br>CopyOnWrite容器即写时复制的容器。通俗的理解时当我们往一个容器添加元素的时候，不直接往当前容器添加，而实先将当前容器进行Copy,复制出一个新的容器，然后新的容器里添加验收，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处时我们可以对CopyOnWrite容器进行并发的都，而不需要锁，因为当前容器不会添加任何元素。所有CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。<br>第十二节 Queue讲解<br>ConcurrentLinkedQueue:<br>是一个适用于高并发场景下的队列，通过无锁的方式，实现了高变更发状态下的高性能，通常ConcurrentLinkedQueue性能好余BlockingQueue,它是一个基于链接节点的无界线程安全队列。该队列的元素遵循先进先出的原则。头是最先加入的，尾是最近加入的，该队列不允许null元素。<br>ConcurrentLinkedQueue重要方法：<br>add()和offer()都是加入元素的方法（在ConcurrentLinkedQueue中，这两个方法没有任何区别）<br>poll()和peek()都是去头元素节点，区别在于前者会删元素，后者不会。</p>
<p>在并发队列上JDK提供了两套实现，ConcurrentLinkedQueue和BlockingQueue都继承自Queue</p>
<p>BlockingQueue接口</p>
<pre><code>* ArrayBlockingQueue: 基于数组的阻塞队列实现，在ArrayBlockingQueue内部，维护了一个定常数组，以便缓存队列中的数据对象，其内部没有实现读写分离，页就是以为着生成和消费不能完全并行，长度是需要定义的，可以指定现金显出或着先进后出，也叫有界队列，在很多场合非常适合使用
* LinkedBlockingQueue：基于链表的阻塞队列，同ArrayBlockingQueue类似，期内部页维持着一个数据缓存队列（该队列由一个链表构成），LinkedBlockingQueue之所有能够搞笑的处理并发数据，是因为其内部实现采用分离锁（读写分离两个锁），从而实现生产者和消费者操作的完全并行允许，它是一个无界队列
* PriorityBlockingQueue： 基于优先级的阻塞对垒（优先级的判断通过构造函数传入的Compator对象来决定，也就是说传入队列必须实现Comparable接口），在实现PriorityBlockingQueue时，内部控制线程同步的锁采用的是公平锁，他也是一个无界的队列
* DelayQueue： 带有言辞的Queue,其中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue中的元素必须实现Delayed接口，DelayQueue是一个没有大小限制的队列，应用场景很多，比如对缓存超时的数据进行移除，任务超时处理，空闲链接的关闭等等
* SynchronousQueue： 一种没有缓冲的队列，生产者产生的数据直接会呗消费着获取并消费
</code></pre><p>第十三节 Future模式<br>多线程的设计模式<br>并行设计模式俗语设计优化的一部分，它时对一些常用的多线程结构的总结和抽象。与串行程序相比，并行的结构通常更复杂。因此合理的使用并行模式在多线程开发中更具有意义，在这里主要介绍Future,Master-Worker和生产者-消费者模式</p>
<p>Future模式有点类似与商品的订单。比如在网购时，当看中一款商品时，就可以提交订单，当订单处理完成后，在家里等待订单送货上门即可。或者更形象的比如我们发送Ajax请求的时候，页面是异步的进行后台处理，用户无须一直等待请求的结果，可以继续浏览或操作其他内容。</p>
<p>package com.mymuti.lesson13_future;<br>public class FutureClient {<br>      public Data request(final String queryStr) {<br>            //1 我想要一个代理对象（Data接口的实现类）先返回给请求的客户段，告诉它已收到请求<br>            final FutureData futureData = new FutureData();<br>            //2 启动一个新的线程，去加载真实的数据，传递给这个代理对象<br>          new Thread(new Runnable() {<br>            @Override<br>            public void run() {<br>                  //3 这个新的线程可以去慢慢的加载真实对象，然后传递给代理<br>                  RealData realData = new RealData(queryStr);<br>                  futureData.setRealData(realData);<br>            }<br>          }).start();</p>
<pre><code>    return futureData;
}
</code></pre><p>}<br>package com.mymuti.lesson13_future;<br>public class FutureData implements Data{<br>      private RealData realData;<br>      private boolean isReady = false;</p>
<pre><code>public synchronized void setRealData(RealData realData){
      //如果已经加载完毕
      if(isReady){
            return;
      }
      //如果没有装载，进行装载真实对象
      this.realData = realData;
      isReady = true;
      //进行通知
      notify();
}

@Override
public synchronized String getRequest(){
      //如果没有装载好 程序一直阻塞
      while(!isReady){
            try {
                  wait();
            } catch (InterruptedException e) {
                  // TODO Auto-generated catch block
                  e.printStackTrace();
            }
      }
      //装载好直接获取数据即可
      return this.realData.getRequest();
}
</code></pre><p>}<br>package com.mymuti.lesson13_future;<br>public class RealData implements Data{<br>      private String result;</p>
<pre><code>public RealData (String queryStr){
      System.out.println(&quot;根据&quot;+queryStr+&quot;进行查询，这是一个很耗时的操作&quot;);
      try {
            Thread.sleep(5000);
      } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      }
      System.out.println(&quot;操作完毕，获取结果&quot;);
      result = &quot;查询结果：张珊&quot;;
}

@Override
public String getRequest() {
      // TODO Auto-generated method stub
      return result;
}
</code></pre><p>}<br>package com.mymuti.lesson13_future;<br>public interface Data {<br>      String getRequest();</p>
<p>}<br>package com.mymuti.lesson13_future;<br>public class Main {<br>      public static void main(String[] args) {<br>            FutureClient fc = new FutureClient();<br>            Data data = fc.request(“请求参数”);<br>            System.out.println(“请求发送成功!”);<br>            System.out.println(“请做其他的事情…”);</p>
<pre><code>      String result = data.getRequest();
      System.out.println(result);
}
</code></pre><p>}<br>第十四节 MasterWorker模式<br>Master-Worker模式是最常用的并行计算模式。它的核心思想是系统由两类进程协作工作：Master进程负责接收和分配任务，Worker负责处理子任务。当哥哥Worker子进程处理完成后，会将结果返回给Master,由Master做归纳和总结。其好处是将一个大任务分解成若干个小任务，并行执行，从而提高系统的吞吐量。<br>package com.mymuti.lesson14_master_worker;<br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.concurrent.ConcurrentHashMap;<br>import java.util.concurrent.ConcurrentLinkedQueue;<br>public class Master {</p>
<pre><code>//1.应该有个承装任务的集合
private ConcurrentLinkedQueue&lt;Task&gt; workQueue = new ConcurrentLinkedQueue&lt;Task&gt;();

//2.是你用HashMap去承装所有worker对象
private HashMap&lt;String, Thread&gt; workers = new HashMap&lt;String,Thread&gt;();

//3.使用一个容器承装每一个worker执行任务的结果集合
private ConcurrentHashMap&lt;String, Object&gt; resultMap = new ConcurrentHashMap&lt;String, Object&gt;();

//4.构造方法
public Master(Worker worker, int workerCount){
    //每一个worker对象都选哟由Master的引用workQueue用于任务的领取
    worker.setWorkerQueue(this.workQueue);
    worker.setResultMap(this.resultMap);

    for(int i = 0; i&lt; workerCount; i++){
        //key表示每一个worker的名字，value表示线程执行对象
        workers.put(&quot;子节点&quot; + Integer.toString(i), new Thread(worker));
    }
}
//5. 提交方法
public void submit(Task task){
    this.workQueue.add(task);
}
//6.需要一个执行的方法
public void execute(){
    for(Map.Entry&lt;String, Thread&gt;me: workers.entrySet()){
        me.getValue().start();
    }
}

//7.判断线程是否执行完毕
public boolean isComplete() {
    for(Map.Entry&lt;String, Thread&gt;me: workers.entrySet()){
        if(me.getValue().getState() != Thread.State.TERMINATED){
            return false;
        }
        return true;
    }
    return false;
}
//8.返回结果集
public int getResult(){
    int ret = 0;
    for(Map.Entry&lt;String, Object&gt;me: resultMap.entrySet()){
        ret +=(Integer)me.getValue();
    }
    return ret;
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson14_master_worker;<br>import java.util.concurrent.ConcurrentHashMap;<br>import java.util.concurrent.ConcurrentLinkedQueue;<br>public class Worker implements Runnable{</p>
<pre><code>private ConcurrentLinkedQueue&lt;Task&gt; workQueue;
private ConcurrentHashMap&lt;String, Object&gt; resultMap;
public void setWorkerQueue(ConcurrentLinkedQueue&lt;Task&gt; workQueue) {
    this.workQueue = workQueue;

}
public void setResultMap(ConcurrentHashMap&lt;String, Object&gt; resultMap) {
    this.resultMap = resultMap;

}

@Override
public void run(){
    while(true){
        Task input = this.workQueue.poll();
        if(input == null) break;
        //真正去做业务处理
        Object output = handle(input);
        this.resultMap.put(Integer.toString(input.getId()), output);
    }
}

private Object handle(Task input){
    Object output = null;
    try {
        Thread.sleep(500);
        output = input.getPrice();
    } catch (InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    return output;
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson14_master_worker;<br>import java.util.Random;<br>public class Main {<br>      public static void main(String[] args) {<br>            Master master = new Master(new Worker(), 20);</p>
<pre><code>      Random r = new Random();
      for(int i = 1; i &lt;= 100; i++) {
            Task t = new Task();
            t.setId(i);
            t.setName(&quot;任务&quot;+i);
            t.setPrice(r.nextInt(1000));
            master.submit(t);
      }
      master.execute();

      long start = System.currentTimeMillis();

      while(true){
            if(master.isComplete()){
                  long end = System.currentTimeMillis() - start;
                  int ret = master.getResult();
                  System.out.println(&quot;最终结果：&quot; + ret + &quot;, 执行耗时：&quot; + end);
                  break;
            }
      }
}
</code></pre><p>}<br>第十五节 生产者消费者模式<br>package com.mymuti.lesson15_provider_consumer;<br>import java.util.concurrent.BlockingQueue;<br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.Executors;<br>import java.util.concurrent.LinkedBlockingQueue;<br>public class ProviderConsumer {<br>    public static void main(String[] args) throws InterruptedException {<br>        // TODO Auto-generated method stub<br>        //内存缓冲区<br>        BlockingQueue<data> queue = new LinkedBlockingQueue<data>(10);<br>        //生产者<br>        Provider p1 = new Provider(queue);<br>        Provider p2 = new Provider(queue);<br>        Provider p3 = new Provider(queue);<br>        //消费者<br>        Consumer c1 = new Consumer(queue);<br>        Consumer c2 = new Consumer(queue);<br>        Consumer c3 = new Consumer(queue);</data></data></p>
<pre><code>    //创建线程池运行，这是一个缓存的线程次，可以创建无穷大的线程，没有任务时不创建线程，空闲线程存货时间为60s
    ExecutorService cachePool = Executors.newCachedThreadPool();
    cachePool.execute(p1);
    cachePool.execute(p2);
    cachePool.execute(p3);
    cachePool.execute(c1);
    cachePool.execute(c2);
    cachePool.execute(c3);

    Thread.sleep(3000);
    p1.stop();
    p2.stop();
    p3.stop();
    Thread.sleep(2000);
    //cachePool.shutdown();
    //cachePool.shutdownNow();

}
</code></pre><p>}</p>
<p>package com.mymuti.lesson15_provider_consumer;<br>import java.util.Random;<br>import java.util.concurrent.BlockingQueue;<br>import java.util.concurrent.TimeUnit;<br>import java.util.concurrent.atomic.AtomicInteger;<br>public class Provider implements Runnable{<br>    //共享缓存区<br>    private BlockingQueue<data> queue;<br>    //多线程间，是否启动变量，有强制且内存中刷新的功能，即时返回线程的状态<br>    private volatile boolean isRunning = true;<br>    //id生成器<br>    private static AtomicInteger count = new AtomicInteger();<br>    //随机对象<br>    private static Random r = new Random();</data></p>
<pre><code>//构造方法
public Provider(BlockingQueue queue){
    this.queue = queue;
}

@Override
public void run() {
    while(isRunning){
        //随机休眠0-1000ms，表示获取数据(产生数据耗时)
        try {
            Thread.sleep(r.nextInt(1000));
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        //获取的数据进行累计
        int id = count.incrementAndGet();
        //比如通过有一个getData方法获取了
        Data data = new Data(Integer.toString(id), &quot;数据&quot; + id);
        System.out.println(&quot;当前线程:&quot; + Thread.currentThread().getName()+&quot;, 获取了数据,id为:&quot; + id + &quot;, 进行装载到公共缓存中...&quot;);
        try {
            if(!this.queue.offer(data, 3, TimeUnit.SECONDS)){
                System.out.println(&quot;提交缓冲区数据失败...&quot;);
                //do something ... 比如重新提交
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

}
public void stop() {
    this.isRunning = false;

}
</code></pre><p>}</p>
<p>package com.mymuti.lesson15_provider_consumer;<br>import java.util.Random;<br>import java.util.concurrent.BlockingQueue;<br>public class Consumer implements Runnable{<br>    private BlockingQueue<data> queue;</data></p>
<pre><code>public Consumer(BlockingQueue queue){
    this.queue = queue;
}
//随机对象
private static Random r = new Random();

@Override
public void run() {
    while(true){
        try {
            //获取数据
            Data data = this.queue.take();
            Thread.sleep(r.nextInt(1000));
            System.out.println(&quot;当前消费线程: &quot; + Thread.currentThread().getName() + &quot;, 消费成功，消费数据&quot; + data.toString());
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}
</code></pre><p>}</p>
<p>package com.mymuti.lesson15_provider_consumer;<br>public final class Data {<br>      private String id;<br>      private String name;</p>
<pre><code>public Data(String id, String name){
      this.id = id;
      this.name = name;
}

public String getId(){
      return id;
}
public void setId(String id){
      this.id = id;
}
public String getName(){
      return name;
}
public void setName(String name){
      this.name = name;
}

@Override
public String toString(){
      return &quot;{id: &quot; + id + &quot;, name: &quot; + name + &quot;}&quot;;

}
</code></pre><p>}<br>第十六节 线程池</p>
<p>为了更好的更好的控制多线程，JDK提供了一套线程框架Executor,帮助开发人员有效地进行线程控制。他们都在java.util.concurrent包中，是JDK并发包的核心。其中又一个比较重要的类：Executors,他扮演着线程工厂的角色，我们通过Executors可以创建特定功能的线程池。<br>Executers创建线程池方法：</p>
<pre><code>* newFixedThreadPool()，该方法返回一个固定数量的线程次，该方法的线程数始终不变，当有一个任务提交时，若线程池中空闲，则理解执行，若没有，则会配暂缓在一个任务队列中等待有空闲的线程去执行。
* newSingleThreadExecutor()方法，创建一个线程的线程次，若空闲则执行，若没有空闲线程则暂缓到任务队列中
* newCachedThreadPool()方法，返回一个可以根据实际情况调整线程个数的线程次，不限制最大线程数量，若有空闲的线程则执行任务，若无任务则不创建线程，并且每一个空闲线程会再60s后自动回收
* newScheduledThreadPool()方法，该方法返回一个SchededExecutorService对象，但该线程池可以指定线程的数量。
</code></pre><p>package com.mymuti.lesson16_excutors;<br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.Executors;<br>public class UseExecutors {<br>      ExecutorService pool = Executors.newFixedThreadPool(10);<br>}<br>package com.mymuti.lesson16_excutors;<br>import java.util.concurrent.Executors;<br>import java.util.concurrent.ScheduledExecutorService;<br>import java.util.concurrent.ScheduledFuture;<br>import java.util.concurrent.TimeUnit;<br>class Temp extends Thread {<br>    public void run(){<br>        System.out.println(“run”);<br>    }<br>}<br>public class ScheduledJob {<br>    public static void main(String[] args) throws Exception{<br>        Temp command = new Temp();<br>        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);</p>
<pre><code>    ScheduledFuture&lt;?&gt; scheduleTask = scheduler.scheduleWithFixedDelay(command, 1, 3, TimeUnit.SECONDS);



}
</code></pre><p>}<br>自定义线程池<br>若Executors工厂类无法满足我们的需求，可以自己去创建自定义的线程池，其实Executors工厂类里面的创建线程的方法其内部实现是用了ThreadPollExecutor这个类，这个类可以自定义线程。构造方法如下</p>
<p>public ThreadPoolExecutor(int corePoolSize,<br>                          int maximumPoolSize,<br>                          long keepAliveTime,<br>                          TimeUnit unit,<br>                          BlockingQueue<runnable> workQueue,<br>                          ThreadFactory threadFactory,<br>                          RejectedExecutionHandler handler){…}</runnable></p>
<p>自定义线程池使用详细</p>
<p>ThreadPoolExecutor这个构造方法对于队列是什么类型的比较关键：</p>
<pre><code>* 在使用有界队列时，若有新的任务需要执行，如果线程池时间线程数小于corePoolSize,则有限创建线程， 若大于corePoolSize，则会将任务加入回列，若队列已满，则在总线程数不大于maxiumumPoolSize的前提下，创建新的线程，若线程数大于maximumPoolSize, 则执行拒绝策略。或其他自定义方式。
* 无界的任务队列时： LinkedBlockingQueue。与邮件队列相比，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况。当有新入伍到来，系统的线程数小于corePoolSize时， 则新建线程执行任务。当达到corePoolSize后，就不会继续增加。若后续仍有新的任务加入，而没有空闲的线程资源， 则任务直接进入队列等待。若任务创建和处理的熟读差异很大，无界队列会保持快速增长，直到耗尽内存。
* JDK拒绝策略：

    * AbortPolicy: 直接抛出异常组织系统正常工作
    * CallerRunsPolicy: 只要线程池为关闭，该策略直接在调用者线程中，运行当前呗丢弃的任务。
    * DiscardOldestPolicy:丢弃最老的一个请求， 尝试再次提交当前任务。
    * DiscardPolicy: 丢弃无法处理的任务，不给予任何处理。
    * 如果需要自定拒绝策略可以实现RejectedExecutionHandler接口。
</code></pre><p>package com.mymuti.lesson16_excutors;<br>import java.util.concurrent.ArrayBlockingQueue;<br>import java.util.concurrent.ThreadPoolExecutor;<br>import java.util.concurrent.TimeUnit;<br>import java.util.concurrent.RejectedExecutionHandler;<br>public class UseThreadPoolExecutor1 {<br>    public static void main(String[] args) {<br>        /**</p>
<pre><code> * 在使用有界队列时， 若有新的任务需要执行，如果线程池实际线程数小于corePoolSize, 则优先创建线程。
 * 若大于corePoolSize, 则会将任务加入队列。
 * 若队列已满， 则在总线程数不大于maxiumuPoolSize的前提下， 创建新的线程。
 * 若线程数大于maximumPoolSize, 则执行拒绝策略， 或其他自定义方法。
 */


ThreadPoolExecutor pool = new ThreadPoolExecutor(
        1,            //coreSize
        2,            //MaxSize
        60,         //60
        TimeUnit.SECONDS,
        new ArrayBlockingQueue&lt;Runnable&gt;(3)            //指定一种队列（有界队列）
        //new LinkedBlockingQueue&lt;Runnable&gt;()
        , new MyRejected()
</code></pre><p>//                , new DiscardOldestPolicy()<br>                );<br>        MyTask mt1 = new MyTask(1, “任务1”);<br>        MyTask mt2 = new MyTask(2, “任务2”);<br>        MyTask mt3 = new MyTask(3, “任务3”);<br>        MyTask mt4 = new MyTask(4, “任务4”);<br>        MyTask mt5 = new MyTask(5, “任务5”);<br>        MyTask mt6 = new MyTask(6, “任务6”);</p>
<pre><code>    pool.execute(mt1);
    pool.execute(mt2);
    pool.execute(mt3);
    pool.execute(mt4);
    pool.execute(mt5);
    pool.execute(mt6);

    pool.shutdown();
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson16_excutors;<br>public class MyTask implements Runnable {<br>      private int taskId;<br>      private String taskName;<br>      public int getTaskId() {<br>            return taskId;<br>      }<br>      public void setTaskId(int taskId) {<br>            this.taskId = taskId;<br>      }<br>      public String getTaskName() {<br>            return taskName;<br>      }<br>      public void setTaskName(String taskName) {<br>            this.taskName = taskName;<br>      }</p>
<pre><code>public MyTask(int taskId, String taskName) {
      this.taskId = taskId;
      this.taskName = taskName;
}


@Override
public void run() {
      System.out.println(&quot;run taskId = &quot; + this.taskId);
      try {
            Thread.sleep(5000);
      } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      }
}

public String toString() {
      return Integer.toString(this.taskId);
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson16_excutors;<br>import java.util.concurrent.RejectedExecutionHandler;<br>import java.util.concurrent.ThreadFactory;<br>import java.util.concurrent.ThreadPoolExecutor;<br>public class MyRejected implements RejectedExecutionHandler {</p>
<pre><code>public MyRejected(){

}
public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
    System.out.println(&quot;自定义处理..&quot;);
    System.out.println(&quot;当前被拒绝的任务为： &quot; + r.toString());
}
</code></pre><p>}</p>
<p>package com.mymuti.lesson16_excutors;<br>import java.util.concurrent.ArrayBlockingQueue;<br>import java.util.concurrent.BlockingQueue;<br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.LinkedBlockingQueue;<br>import java.util.concurrent.ThreadPoolExecutor;<br>import java.util.concurrent.TimeUnit;<br>import java.util.concurrent.atomic.AtomicInteger;<br>public class UseThreadPoolExecutor2 implements Runnable{</p>
<pre><code>private static AtomicInteger count = new AtomicInteger(0);

@Override
public void run() {
    int temp = count.incrementAndGet();
    System.out.println(&quot;任务&quot; + temp);
    try {
        Thread.sleep(2000);
    } catch (InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

public static void main(String args[]) throws Exception {
</code></pre><p>//        System.out.println(Runtime.getRuntime().availableProcessors());<br>//        BlockingQueue<runnable> queue = new LinkedBlockingQueue<runnable>();<br>        BlockingQueue<runnable> queue = new ArrayBlockingQueue<runnable>(10);</runnable></runnable></runnable></runnable></p>
<pre><code>    ExecutorService executor = new ThreadPoolExecutor(
            5,        //core
            10,     //max
            120L,   //2min
            TimeUnit.SECONDS,
            queue);

    for (int i = 0; i &lt; 20; i++ ){
        executor.execute(new UseThreadPoolExecutor2());    
    }
    Thread.sleep(1000);
    System.out.println(&quot;queue size: &quot; + queue.size());
    Thread.sleep(2000);
}
</code></pre><p>}</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux监控命令总结]]></title>
      <url>/2018/02/01/Linux%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html</url>
      <content type="html"><![CDATA[<p>Linux命令</p>
<p>Linux命令</p>
<p>1 Linux基本命令<br>  1.1 目录操作<br>    1.1.1 ls<br>    1.1.2 cp<br>        1.1.2.1 -R<br>    1.1.3 mv<br>    1.1.4 chmod<br>  1.2 文件操作<br>    1.2.1 touch<br>    1.2.2 vim<br>    1.2.3 cat/tac/more/less<br>    1.2.4 head<br>        1.2.4.1 head -2 file 查看前两行<br>        1.2.4.2 head -c 2048 file 查看前2048kb<br>    1.2.5 tail<br>        1.2.5.1 tail -100 file 查看末尾100行<br>        1.2.5.2 tail -f /tmp/ERROR.log 事实查看文件更新<br>    1.2.6 清空文件<br>        1.2.6.1 cat /etc/null &gt; file<br>        1.2.6.2 echo /etc/null &gt;file<br>        1.2.6.3 echo “” &gt;file<br>    1.2.7 find<br>        1.2.7.1 -name 指定文件名，支持<em><br>        1.2.7.2 -user 制定所属用户<br>        1.2.7.3 find / -name cat</em>.h -user tomcat<br>  1.3 重启/关机<br>    1.3.1 shutdown<br>        1.3.1.1 -h<br>        1.3.1.2 -r<br>    1.3.2 reboot<br>  1.4 解压/安装<br>    1.4.1 tar<br>        1.4.1.1 -x 解压 tar<br>                1.4.1.1.1 tar -xvf file.tar<br>        1.4.1.2 -v 解压可视<br>        1.4.1.3 -f 文件<br>                1.4.1.3.1 必须<br>        1.4.1.4 -z 解压tar.gz<br>                1.4.1.4.1 tar -zxvf file.tar.gz<br>        1.4.1.5 -j 解压 tar.bz2<br>                1.4.1.5.1 tar -jxvf file.tar.bz2<br>        1.4.1.6 -Z 解压 tar.Z<br>                1.4.1.6.1 tar -Zxvf file.tar.Z<br>        1.4.1.7 其他<br>                1.4.1.7.1 -c建立压缩<br>                1.4.1.7.2 -t 查看内容<br>                1.4.1.7.3 -r 向压缩包追加文件<br>                1.4.1.7.4 -u 跟体系元压缩包中的文件<br>                1.4.1.7.5 - O 将文件纪要的标准输出<br>    1.4.2 unrar<br>        1.4.2.1 unrar e file.rar<br>    1.4.3 unzip<br>        1.4.3.1 unzip file.zip<br>    1.4.4 rpm<br>        1.4.4.1 -ivh<br>        1.4.4.2 -a<br>        1.4.4.3 -q<br>        1.4.4.4 -l<br>        1.4.4.5 rpm -qal | grep mysql<br>        1.4.4.6 rpm -qa | grep yum | xargs rpm -e –nodeps<br>  1.5 查看系统版本<br>    1.5.1 uname -a<br>    1.5.2 lbs_release -a<br>    1.5.3 cat /proc/version<br>2 Linux监控命令<br>  2.1 综合<br>    2.1.1 top<br>        2.1.1.1 实时监控系统状态，并可以按照cpu/mem/执行时间排序<br>        2.1.1.2 启动参数<br>                2.1.1.2.1 -b 批次运行<br>                2.1.1.2.2 -d 延迟时间<br>                2.1.1.2.3 -n 运行次数<br>                2.1.1.2.4 -u/U 监控制定用户<br>                2.1.1.2.5 -p 监控制定进程<br>                2.1.1.2.6 -H 显示线程<br>                2.1.1.2.7 -i 显示空闲的进程<br>        2.1.1.3 任务区命令<br>                2.1.1.3.1 任务排序<br>                2.1.1.3.1.1 C 按cpu使用率排序，再按一下反向排序<br>                2.1.1.3.1.1.1<br>                2.1.1.3.1.2 M 按内存使用排序<br>                2.1.1.3.1.3 T 按运行时间排序<br>                2.1.1.3.2 s<br>                2.1.1.3.2.1 更改delay<br>                2.1.1.3.3 1<br>                2.1.1.3.3.1 显示所有cpu<br>        2.1.1.4 VIRT<br>                2.1.1.4.1 程序向系统申请的内存<br>        2.1.1.5 RES<br>                2.1.1.5.1 程序实际使用内存<br>        2.1.1.6 Swap<br>                2.1.1.6.1 程序实际使用的虚拟内存<br>                2.1.1.6.2 添加Swap列<br>                2.1.1.6.2.1 按f,选中Swap按空格(先删除1列）按s,按q<br>    2.1.2 vmstat<br>        2.1.2.1 监控操作系统的进程状态、内存、虚拟内存、磁盘IO、上下文、CPU的信息<br>    2.1.3 sar<br>        2.1.3.1 全名的获取到cpu 、运行、磁盘IO、虚拟内存、内存、网络等信息<br>        2.1.3.2 sar -u 1 3<br>        2.1.3.3 -u cpu<br>        2.1.3.4 -v 进程 节点 文件 锁表<br>        2.1.3.5 -d 硬盘使用<br>        2.1.3.6 -r 内存<br>        2.1.3.7 -n 网络使用<br>        2.1.3.8 -R 进程活动<br>    2.1.4 dstat<br>        2.1.4.1 监控系统cpu,网络,磁盘,页面交换<br>                2.1.4.1.1 yum install dstat<br>                2.1.4.1.2 可以展示最好各项资源的进程，可以生成csv文件<br>        2.1.4.2 参数<br>                2.1.4.2.1 -c 总cpu状态<br>                2.1.4.2.1.1 dstat -clp 1 10<br>                2.1.4.2.1.2 -l load<br>                2.1.4.2.1.3 -p process status<br>                2.1.4.2.1.4 -C 0,1 监控指定cpu(0,1)的状态<br>                2.1.4.2.2 -m –mem 内存<br>                2.1.4.2.3 -d 磁盘<br>                2.1.4.2.3.1 dstat -d –disk-util –disk-tpk 2 10<br>                监控CPU进行I/O读写：cpu监控里面的wai增大，势必会造成，进程I/O读写频繁。Wait次数越多，某个进程的I/O就会越大。某个进程的I/O越大，I/O读写的tps就越频繁。（CPU监控）wait block i/o process 和（磁盘监控）read writ|util|reads writs指标，成正比。<br>                2.1.4.2.3.2 –disk-util 磁盘使用率<br>                2.1.4.2.3.3 –disk-tps 每秒tps read write 次数<br>                2.1.4.2.4 -n –net 网络<br>                2.1.4.2.5 –top-cpu<br>                2.1.4.2.5.1 列出最耗CPU的进程<br>                2.1.4.2.6 –top-bio<br>                2.1.4.2.6.1 列出当前CPU进程里面，I/O频繁，并且是受阻的<br>                2.1.4.2.7 –top-mem<br>                2.1.4.2.7.1 展示最耗内存的进程，耗用了多少内存<br>                2.1.4.2.8 –output file 写csv文件<br>        2.1.4.3 案例<br>                2.1.4.3.1 dstat 2 3<br>                2.1.4.3.1.1 默认 -cdngy<br>                2.1.4.3.2 dstat -almpsr –disk-utl –top_bo –top-cpu –top-men –output /root/dstat.csv 3 3600&amp;<br>                2.1.4.3.3 dstat -clpmdn –top-cpu –top-bio –top-men –disk-util –disk-tps –output /root/dstat2.csv 3 1200<br>  2.2 cpu<br>    2.2.1 uptime<br>        2.2.1.1 统计系统当前的运行状态<br>                2.2.1.1.1 查看当前CPU的load，同dstat -l<br>    2.2.2 tload<br>        2.2.2.1 查看当前CPU的load，每隔2到3s更新一次<br>    2.2.3 cat /proc/loadavg<br>    2.2.4 mpstat<br>        2.2.4.1 输出每个CPU的运行状况，为多处理器系统中的CPU利用率提供统计信息<br>  2.3 mem<br>    2.3.1 free<br>        2.3.1.1 监控系统内存<br>        2.3.1.2 -b/k/m/g/–tera 设定单位为b/Kb/M/G/T<br>        2.3.1.3 -l 显示 low/high<br>        2.3.1.4 -t 显示total<br>        2.3.1.5 -s 更新时间间隔<br>        2.3.1.6 -c 更新次数<br>        2.3.1.7 free -m -t -s 1 -c 3<br>        2.3.1.8 实际已使用物理内存=used(Mem)-buff/cache<br>        2.3.1.9 实际空闲物理内存=free(Mem)+buff/cache<br>        2.3.1.10 如果虚拟内存，使用率持续增大，有可能，真实使用的物理内存越来越小，可能不够。<br>  2.4 process<br>    2.4.1 ps<br>  2.5 disk/io<br>    2.5.1 df<br>        2.5.1.1 文件系统磁盘空间的使用报告<br>        2.5.1.2 -a 显示所有文件系统<br>    2.5.2 iostat<br>        2.5.2.1 磁盘监控<br>                2.5.2.1.1 yum -q install /usr/bin/iostat<br>        2.5.2.2 参数<br>                2.5.2.2.1 -c 只显示cpu<br>                2.5.2.2.2 -d 只显示io信息<br>                2.5.2.2.3 -t 显示时间戳<br>                2.5.2.2.4 -x 把/proc/diskstats的内容显示出来<br>                2.5.2.2.5 -k 以kb单位显示<br>                2.5.2.2.6 iostat -k -d -x 3 1<br>        2.5.2.3 字段解析<br>                2.5.2.3.1 rrqm/s<br>                2.5.2.3.1.1 每秒进行 merge 的读操作数目<br>                2.5.2.3.2 wrqm/s<br>                2.5.2.3.2.1 每秒进行 merge 的写操作数目<br>                2.5.2.3.3 r/s<br>                2.5.2.3.3.1 每秒完成的读 I/O 设备次数<br>                2.5.2.3.4 w/s<br>                2.5.2.3.4.1 每秒完成的写 I/O 设备次数<br>                2.5.2.3.5 rkB/s<br>                2.5.2.3.5.1 每秒读K字节数<br>                2.5.2.3.6 wkB/s<br>                2.5.2.3.6.1 每秒写K字节数<br>                2.5.2.3.7 avgrq-sz<br>                2.5.2.3.7.1 平均每次设备I/O操作的数据大小<br>                2.5.2.3.8 avgqu-sz<br>                2.5.2.3.8.1 平均I/O队列长度<br>                2.5.2.3.9 await<br>                2.5.2.3.9.1 平均每次设备I/O操作的等待时间 (毫秒)<br>                2.5.2.3.10 svctm<br>                2.5.2.3.10.1 平均每次设备I/O操作的服务时间 (毫秒)<br>                2.5.2.3.11 %util<br>                2.5.2.3.11.1 一秒中有百分之多少的时间用于 I/O 操作<br>        2.5.2.4 分析<br>        只要读写次数上升（r/s和w/s；rKB/s和wKB/s），会引起读写I/O的平均排队数上升（avgqu-sz），引起I/O等待（await）上升，引起磁盘读写的时候磁盘服务时间增大（svctm），当这些都增大，会引起磁盘使用率增大（%util）。如何让使用率下降，程序I/O要降低，要不然磁盘读写频繁是不会下降的。项目经验：开发的代码没问题，但频繁的往磁盘写日志，并发量越大，写磁盘的日志就越频繁，造成整体性能下降。<br>    2.5.3 iotop<br>        2.5.3.1 基础的I/O监控命令<br>                2.5.3.1.1 yum install iotop<br>        2.5.3.2 -d 采集频率<br>  2.6 network<br>    2.6.1 ifconfig<br>        2.6.1.1 分网卡看进出包的个数、字节数<br>                2.6.1.1.1 yum install net-tools<br>        2.6.1.2 RX packets 接收数据包<br>        2.6.1.3 TX packets 发送数据包<br>    2.6.2 ifstat<br>        2.6.2.1 统计网络接口活动状态<br>    2.6.3 netstat<br>        2.6.3.1 显示本机网络链接、运行端口、路由表等信息<br>十一月 21, 2017. Created by XMind</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux, 性能测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出Redis学习笔记]]></title>
      <url>/2018/02/01/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARedis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<pre><code>1. Redis的发展史

    1. Redis[Remote Directory Server]:远程服务字典
2. 下载安装Redis

    1. Linux下安装Redis
</code></pre><p><a href="http://redis.io/dowload" target="_blank" rel="noopener">http://redis.io/dowload</a><br>wget <a href="http://download.redis.io/releases/redis-3.0.0.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-3.0.0.tar.gz</a><br>tar xzf redis-3.0.0.tar.gz<br>cd redis-3.0.0<br>make</p>
<pre><code>2. 在bin可执行的程序

    * redis-server: Redis服务器
    * redis-cli:命令行客户端
    * redis-benchmark:Redis的性能测试工具
    * redis-check-aof:AOF文件修复工具
    * redis-check-dump: RDB文件检测工具


    * redis.conf 时Redis的配置文件
</code></pre><p>将配置文件中daemonize yes  以守护进程的方式来使用</p>
<pre><code>3. 启动

    1. 直接启动

        * redis-server
        * 指定配置文件 redis-server /etc/redis/redis.conf
        * 指定端口  redis-server  /etc/redis/redis.conf --port 6370(会覆盖redis.conf中port的设置）
</code></pre><p>客户端连接 redis-cli -h localhost -p 6370</p>
<pre><code>        2. 停止redis

            1. 客户端输入 shutdown关闭redis-server
            2. 结束redis的进程也可以
    4. 

3. 命令返回值

    1. 状态回复

        1. ping          -PONG
        2. SET test &apos;this is a test&apos;     -OK
        3. 和SQL命令一样，Redis命令不区分大小写，建议系统命令使用大写，和名字有关的使用小写
    2. 错误回复

        1. 错误回复以（error)开头
</code></pre><p>(error) ERR unknown command ‘PONG’</p>
<pre><code>3. 整数回复

    1. 以interger 数值
</code></pre><p>DBSIZE       –（integer) 2</p>
<pre><code>    4. 字符串回复

        1. GET  test 
        2. (nil)代表空的结果
    5. 多行字符串回复

        1. KEYS *  得到当前数据库中存在的键名
4. Redis配置选项相关内容

    1. 动态设置/获取配置选项的值

        1. 获取 CONFIG GET name
</code></pre><p>CONFIG GET port<br>1) “port”<br>2) “6379”</p>
<pre><code>2. 设置 CONFIG SET name value
</code></pre><p>CONFIT SET loglevel warning<br>OK</p>
<pre><code>2. Redis 配置文件redis.conf选项相关

    * --链接选项
    * port 6379 默认端口
    * bind 127.0.0.1 默认绑定的主机地址
    * timeout 0, 当客户端闲置多就之后关闭链接，0代表美哟启动这个选项
    * loglevel notice, 日志的级别

        * debug: 很详细的信息，适合开发和测试
        * verbose： 包含很多不太有用的信息
        * notice： 比较适合生产环境
        * warning： 警告信息
    * logfile stdout,日志的记录方式， 默认为标准输出
    * datebases 16, 默认数据库的数量，默认数据库的编号从0开始
    * save
    * -- 快照
    * save &lt;seconds&gt; &lt;changes&gt;: 多少秒有多少次改变将其同步到磁盘中的数据文件中
</code></pre><p>save 900 1 —900s 1个更改<br>save 300 10<br>save 60   10000</p>
<pre><code>        * dbfilename   dump.rdb, 指定本地数据库文件名，默认为 dump.rdb
        * dir ./ ,指定本地数据库的存放目录，默认时当前目录
5. Redis数据类型

    1. String

        1. SET key [EX seconds] [PX mileseconds] [NX|EX]
        2. GET key
        3. MSET
        4. MGET
        5. DEL
    2. Integer

        1. INCR
        2. INCRBY  5
        3. INCRBYFLOAT 1.2
        4. DECR
        5. DECRBY
    3. Hash

        1. HSET key field
        2. HGET key field
        3. HMSET
        4. HMGET
        5. HGETALL
        6. HKEYS
        7. HDEL
    4. List
    5. Set
    6. Sorted Set
6. KEYS相关命令

    1. KEYS *

        1. * 任意多个字符
        2. ？ 任意一个
        3. []--范围内任一个 a[b-z]
        4. \ --匹配特殊字符
    2. EXISTS
    3. EXPIRE
    4. EXPIRENX
    5. PEXPIRE
    6. TTL
    7. PTTL
    8. PERMANT
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[DjangoWeb开发指南读书笔记]]></title>
      <url>/2018/02/01/DjangoWeb%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>第5章 URL Http 机制和视图</p>
<p>5.1 URL</p>
<pre><code>* urlconf
</code></pre><p>用url替换元组 kwargs参数 和 name</p>
<pre><code>* 使用多过patterns对象，（1.10以弃用patterns）
</code></pre><p>urlpatterns+= patterns（）</p>
<pre><code>* 用include来包含其他url文件，（可以指定namespace）
</code></pre><p>5.2 http建模:请求，响应和中间件</p>
<pre><code>* 请求对象----request.GET  request.POST
* cookies和会话，（sessions）----request.cookies  request.session
* 其他服务器变量----request.

    * path 资源路径/blog/2017/11/04/
    * method 请求方法，GET,PUT,POST,DELETE 
    * FILES 上传的文件
    * Meta 请求变量
    * user django的认证用户，激活django的认证机制时才会出现
    * raw_post_data post原始数据
* 响应对象

    * response=HttpResponse()
    * response.write()
    * response[&quot;content-type&quot;]=&quot;text/csv&quot;
* 中间件
</code></pre><p>中间件就是一个python类，他实现了一个特定的接口，定义了一些名为process_request或是process_view这样的方法—-按settings.py中有序</p>
<pre><code>* 请求中间件---先逐个处理请求中间件，最后再处理views本身
* 响应中间件---接受一个request和response重新返回一个新的httpresponse
</code></pre><p>5.3视图与逻辑</p>
<pre><code>* 就是python函数
* 通用视图
* 半通用视图
* 自定义视图

    * render_to_response
    * http404
    * get_object_or_404
    * get_listor_404
* 其他观察

    * views中使用，*args **kwargs
</code></pre><p>第6章 模板和表单处理</p>
<p>6.1 模板</p>
<pre><code>* 理解Contexts ---一个类似字典的Contexts对象，views向模板传递变量

    * 上下文处理器 TEMPLATE_CONTEXT_PROCESSORS
* 模板语言语法

    * 单独命令 --{{ 变量 }}--变量输出
    * 模块级命令{% if %} {% endif %}
* 模板过滤器
* 标签 tag---- if,ifequal,block,include,extends

    * 可以结合过滤器
    * Blocks和Extends
    * 包含其他模板include
</code></pre><p>6.2表单</p>
<pre><code>* 定义表单

    * forms.Form---简单表单，不关联model
    * 基于模型的表单---forms.ModelForm---关联Model
</code></pre><p>class PersonForm(forms.ModelForm):<br>    class Meta:<br>        model = Person</p>
<pre><code>    * 保存ModelForm ---form.save(),form.save(commet=False)

        * 区别于Model---fields和exclude----两种只能用一个，被忽略的字段必须null=True（运行为null）
    * 继承表单，多重继承---使用fields或exculde来限制变量
* 填写表单

    * 绑定的 未绑定的
    * requests.POST.copy()
    * initial制定默认的值---last = forms.CharField(max_length=100, required=True,initial=&apos;Smith&apos;)
* 显示表单 可以通过auto_id 和label_suffix指定 input的id和文本

    * pf = TestForm(auto_id=False, label_suffix=&apos;&apos;)
    * pf = TestForm(auto_id=%_id, label_suffix=&quot;？&quot;)
    * 显示全部表单

        * form.as_table---使用&lt;table&gt;标签
        * from.as_p---使用p标签
        * form.as_ul---使用ul标签
        * 可以继承django.forms.util.ErrorList 来自定义错误列表的显示方式
    * 逐个显示表单

        * Widget---控制显示
        * middle=forms.CHarField(max_length=100, widget=forms.TextInput(attrs={&apos;size&apos;:3})
        * 重写一个变量的Widget
</code></pre><p>class LargeTextareaWidget(forms.Textarea):<br>    def <strong>init</strong>(self, <em>args, **kwargs):<br>        kwargs.setdefault(‘attrs’,{}).update({‘rows’:40,’cols’:100})<br>        super(LargeTextareaWidget, self).<strong>init</strong>(</em>args,**kwargs)</p>
<p>class LargeTextarea(forms.Field):<br>    widget = LargeTextareaWidget</p>
<p>#froms.py<br>class ContentForm(forms.Form):<br>    name=forms.CharField()<br>    text = LargeTextarea()</p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google软件测试之道读书笔记]]></title>
      <url>/2018/02/01/Google%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>mock,fock测试<br>Unit Test Dashboard<br>测试认证<br>持续建构工具<br>提交队列<br>TAP  Test Automation Program<br>并发构建<br>fixit活动</p>
<p>SET面试</p>
<pre><code>* 字符编码：ASCII， UTF_8或其他
* 函数名规范：驼峰式？
* 返回值类型
* void*是危险的
* 是否大小写敏感
* 标准库不是已有？
* 扩展性 返回64位整型，函数会再Shared data作为一部分上运行吗？
* 复用性，参数化
* 安全性，指针来自可信地址吗？是否需要try,,,catch,线程安全问题
* 考虑基于常量的优化（原文什么格式）
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL高性能优化]]></title>
      <url>/2018/02/01/MySQL%E9%AB%98%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</url>
      <content type="html"><![CDATA[<pre><code>1. 回答要具体
2. 

3. 建表原则

    1. 定长与变长分离
    2. 常用字段合不常用字段分离
    3. 在一对多，需要统计的字段上添加冗余
4. 列类型选择

    1. 字段类型优先级

        1. 整形&gt;date,time&gt;enum,char&gt;varchar&gt;blob,text
        2. time定长，为了方便查询可以用时间戳
        3. enum定长，需要转为整形
        4. char定长，需要考虑字符集和校对集（排序）
        5. varchar，不定长
        6. blob,text 不定长
        7. 例如性别sex字段

            1. tinyint unsigned not null  定长1字节
            2. char（1） 需要考虑字符集和校对集
            3. emum(&apos;男&apos;,&apos;女&apos;）多了一个转换过程
    2. 够用就行（如smallint,varchar(N)）
    3. 尽量避免用Null(不方便查询，需要is Null,而不是=）
5. btree索引（类似二分查找法）

    1. 42亿数据，顺序查找法平均查找21亿次，btree查找32次（2^32-1&gt;42亿）
6. hash索引

    1. 优点：地址是算出来的，只需要一次查找
    2. 缺点：地址不连续，不适用范围查找id&gt;3，模糊查找name like &quot;a%&quot;
7. 建立索引常见误区
8. 索引经典题目
9. 索引试验
10. 聚簇索引与非聚簇索引

    1. innodb--聚簇索引，数据在索引叶子底下，不用回行，读取磁盘，插入时插入到索引指定位置，非主键索引，返回对主键的引用
    2. myisam--非聚簇索引，索引与数据分离，返回数据地址，插入时无序
11. 页分裂试验
12. 索引覆盖

    1. 联合索引中有需要查找的值，不用回行
13. 某论坛经典题目
14. 理想的索引

    1. 识别度高
    2. 字段短
15. 伪哈希索引
16. 多列索引原则
17. 索引与排序
18. 重复索引与冗余索引
19. 修复表
20. 查询大原则
21. explain详解

    1. explain ....\G
22. in型查询陷阱

    1. select goods_id,cat_id,goods_name from goods where cat_id in (select cat_id from category where parent_id=6)
    2. 误区：给我的感觉是，先查到内城的6号栏目的子栏目，然后外层cat_id in (7,8,9)
    3. 事实，外层每找到一个到内层对比
23. 强制使用索引
24. count和union
25. limit翻页优化专题

    1. limit offset N,当offset非常大时，效率极低，原因是mysql并不是跳过offset行，然后单取N行，而是取offset+N行，返回放弃前offset行，返回N行，效率较低，当offset越大时，效率越低
    2. 优化办法
    3. 从业务上去解决，不允许翻过超过100页

        1. 2.不用offset,用条件查询 select id,nmae from lx_come limit 500000,10-&gt;select id,name from lx_come where id&gt;500000 limit 10
26. 强制使用索引

    1. select id from it_area use index(primary) where pid=60 limit 1
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 性能优化, MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bootstrap3入门学习笔记]]></title>
      <url>/2018/02/01/Bootstrap3%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<pre><code>1. 安装与引用
</code></pre><p><meta name="viewport" content="width=device-width, initial-scale=1"></p>
<p><link rel="stylesheet" href="css/bootstrap.min.css"></p>
<script type="application/javascript" src="js/jquery-1.11.1.min.js"></script>
<script language="Javascript" src="js/bootstrap-min.js"></script>


<pre><code>1. 栅格系统布局

    1. 栅格系统简介

        1. 响应式设计
        2. 栅格实现原理
        3. 媒体查询
    2. 栅格布局基本用法

        1. 布局容器container
        2. 列组合 .col-md-*
        3. 列偏移 .col-md-offset-*
        4. 列嵌套
        5. 列排序 .col-md-push-* .col-md-push-*
    3. 栅格参数

        1. 跨设备组合定义
        2. 清除浮动 clearfix visible-xs
    4. 禁止响应布局

        1. 删除view的meta
        2. 为container设置固定的宽度
        3. 对导航移除折叠和展开行为
2. 文本排版

    1. 排版前的基础

        1. html5文档类型
        2. 移动设备优先
        3. 响应式图片
        4. 排版与链接
    2. 标题 h1-h6 small
    3. 页面主题 body 全局样式 p全局样式 对齐方式
    4. 强调文本 small strong em cite
    5. 缩略语abbr
    6. 地址元素address
3. 列表与代码

    1. 列表 

        1. 无序列表
        2. 有序列表
        3. 去点列表 .list-unstyled
        4. 内联列表 .list-inline
        5. dl列表
        6. 水平列表dl.dl-horizontal
    2. 代码

        1. &lt;code&gt;单行内联代码
        2. &lt;kbd&gt;输入键
        3. &lt;pre&gt;多行代码块
        4. &lt;samp&gt;程序结果
4. 表格样式

    1. 基础样式
    2. 带条纹.table-striped
    3. 带边框.table-border
    4. 悬停.table-hover
    5. 紧凑 .table-condensed
    6. 行样式.active .success .info
    7. 响应式表格
5. 表单样式

    1. 基础样式

        1. 全局样式
        2. .form-control
        3. .form-group
    2. 内联表单 form-inline
    3. 横向表单 .form-horizontal
    4. 表单操作

        1. input
        2. select
        3. textarea
        4. checkbox&amp;radio
        5. 静态控件
    5. 控件类型

        1. 焦点状态
        2. 禁用状态
        3. 被警用的fieldset
        4. 只读状态
        5. 校验状态
    6. 添加额外的图标
    7. 控件大小
    8. 辅助文本
6. 按钮样式
7. 图片样式
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery入门学习笔记]]></title>
      <url>/2018/02/01/jQuery%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<pre><code>1. 安装入门
2. 选择器初步

    1. Basics 基本选择器

        * $(&apos;code&apos;)  选择基本标签
        * $(&apos;#myid&apos;) 选择id=myid的内容
        * $(.myclass) 选择class=myclass的内容
        * $(*) 选择所有
        * $(&apos;code, #myid, .myclass) 选择 code id=myid 及class=myclass的所有
    2. Hierarchy 层级选择器

        * $(&apos;div code&apos;) 选择div 下的 code
        * $(&apos;li &gt; ul&apos;)选择 li 下的直接 子元素 ul  子元素选择器
        * $(&apos;strong + em&apos;)选择 strong之后第一个em  姊妹选择器
        * $(&apos;strong ~ em&apos;) 选择strong 之后的所有 em 姊妹选择器
    3. Basic Filters 基本过滤器

        * $(&apos;li:first&apos;)  第一个li
        * $(&apos;li:last&apos;) 最后一个
        * $(&apos;li not(li:first)&apos;) 不是
        * $(&apos;li:even&apos;) 偶数，从0开始
        * $(&apos;li:odd&apos;) 奇数
        * $(&apos;li:eq(1)&apos;) 等于
        * $(&apos;li:gt(2)&apos;) 大于
        * $(&apos;li:lt(2)&apos;) 小于
        * $(&apos;:header&apos;) ??
        * $(&apos;:animated&apos;) ???
3. 选择器高阶

    1. Content Filters 内容选择器

        * $(&apos;li:contents(aaa)&apos;) li中包含字符 aaa
        * $(&apos;:empty&apos;)    &lt;&gt;&lt;/&gt;之间内容为空的
        * $(&apos;li:has(a)&apos;)  下面包含 a
        * $(&apos;p:parent&apos;) 父级选择器
    2. Visbility Filters 可见选择器

        * $(&apos;:hidden&apos;) 选择隐藏的
        * $(&apos;:visible&apos;) 选择可见的
    3. Attribute Filters 属性选择器

        * $(&apos;li[class]&apos;)
        * $(&apos;a[ref=&quot;self&quot;]&apos;)
        * $(&apos;a[ref!=&quot;nofollow&quot;]&apos;)
        * $(&apos;[class^=&quot;my&quot;]&apos;)
        * $(&apos;a[title$=&quot;blog&quot;]&apos;)
        * $(&apos;a[href*=&quot;ziip&quot;]&apos;)包含
        * $(&apos;a[ref][href][title$=&quot;blog&quot;]&apos;)  并且
    4. Child Filters 子元素过滤器

        * $(&apos;li:nth-child(even)&apos;)
        * $(&apos;li:nth-child(odd)&apos;)
        * $(&apos;li:nth-child(2)&apos;)
        * $(&apos;li:nth-chilid(2n)&apos;)
        * $(&apos;li:first-child&apos;)
        * $(&apos;li:last-child&apos;)
        * $(&apos;code:only-child&apos;)
    5. Form 表单选择器

        * $(&apos;:input&apos;)
        * $(&apos;:text&apos;)
        * $(&apos;:password&apos;)
        * $(&apos;:radio&apos;)
        * $(&apos;:checkbox&apos;)
        * $(&apos;:submit&apos;)
        * $(&apos;:image&apos;)
        * $(&apos;:reset&apos;)
        * $(&apos;:button&apos;)
        * $(&apos;:file&apos;)
    6. Form Filter 表单过滤器

        * $(&apos;input:enabled&apos;)
        * $(&apos;:disabled&apos;)
        * $(&apos;:checked&apos;)
        * $(&apos;:selected&apos;)
4. DOM操作

    1. 获取设定内容 

        * text() 转换&lt;&gt;
        * html() 包含&lt;&gt;
        * val() 获取 input框的value值
    2. 获取设定属性

        * attr()
        * removeAttr()
    3. 获取设定 CSS Class

        * addClass()
        * removeClass()
        * hasClass()
    4. 获取设定 CSS style

        1. css()
    5. append() and prepend()

        * append()
        * prepend()
    6. appendTo() and prependTo()

        * appendTo()
        * prependTo()
    7. before() and after()

        * before()
        * after()
    8. insertBefore() and insertAfter()

        * insertBefore()
        * insertAfter()
    9. remove(),empty() and detach()

        * remove()
        * empty()
        * detach()
    10. wrap()

        * wrap()
    11. replaceWith() and replaceAll()

        * replaceWith()
        * replaceAll
    12. clone() and Cloning Event Handlers and Data

        * clone()
5. 事件处理 

    1. jQuery Event Handlers

        * ready()
        * blur()
        * focus()
        * click()
        * dbclick()
        * mousedown()
        * mouseup()
        * mousemove()
        * mouseover()
        * mouseout
        * keydown()
        * keypress()
        * keyup
        * change()
        * submit()
    2. jQuery Event Object Properties

        1. event.altkey
        2. event.ctrlKey
        3. event.data
        4. event.keyCode
        5. event.pageX
        6. event.pageY
        7. event.screenX
        8. event.screenY
        9. event.shiftKey
        10. event.target
        11. event.timeStamp
        12. event.type
6. 动画效果

    1. 基本动画

        * show
        * hide
        * toggle
    2. 预置动画

        * slideDown(speed,[callback])
        * slideUp(speed,[callback] )
        * slideToggle(speed,[callback] )
        * fadeIn(speed,[callback] )
        * fadeOut(speed,[callback] )
        * fadeTo(opacity,[callback] )
    3. 自定义动画

        * animate( params,[duration,[easing],[callback]]
        * animate(params,options)
        * stop([clearQueue],[gotoEnd])
7. Ajax异步请求

    1. load( url,[data],[callback])
    2. $.get(url,[data],[callback]]
    3. $.post(url,[data],[callback()]
    4. $.getScript(url, [callback])载入并执行一个外部js文件
    5. jQuery Ajax事件
8. jQuery UI 入门
9. jQuery编程规范
10. 实践课：用jQuery和Local storage写一个Todo list网页应用
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript初步学习笔记]]></title>
      <url>/2018/02/01/Javascript%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<pre><code>1. 概述

    1. 特点

        1. 大小写敏感
        2. 使用；结束，可以一行写多个语句，不写在行尾自动添加
    2. 引用方式

        1. 嵌入html&lt;script&gt;&lt;/script&gt;中直接编写
        2. 引入js文件&lt;script src=&apos;**.js&apos;&gt;&lt;/script&gt;引入外部js文件
        3. 事件或链接触发，作为某个原始的事件属性值或超链接href属性值
        4. 代码屏蔽
</code></pre><p><script type="text/javascript>" <!--="" js代码="" --=""><br></script></p>
<pre><code>    3. Debug方法

        1. alert();  --转换为数值
        2. document.write();  --转换为字符
2. 变量

    1. 变量声明 var a=1,b=-2.3,c=&apos;hello&apos;,d=true,e=null,f=undefined---未声明的变量为undefined
    2. 变量类型

        1. 数值 整形（10/8/16进制 123,0123,0x123） 浮点型（1.2  0.8e3 1.8E-3）---NaN 表示Not a Number,非数值型,Infine无穷大（超过取值范围）
        2. 字符串 + 字符串连接
        3. 布尔类型 true,false
        4. 对象型 数组 undifined ......
    3. 类型转换

        1. 隐式转换

            1. 转数值 ‘123&apos; -&gt;
        2. 显示转换
        3. 转换规则

            1. 转数值  &apos;123&apos; -&gt;123,true-&gt;1,false-&gt;0,null-&gt;0,undefined-&gt;NaN, &apos;123king&apos;-&gt;NaN(用PasteInt转换为123）
            2. 转字符串
            3. 转布尔 null,0,-0,0.0,&apos;&apos;,undefined -&gt; false,其他-&gt;true
    4. 变量作用范围

        1. 全局变量

            1. 函数外var声明的变量
            2. 函数内直接赋值的变量
        2. 局部变量

            1. 函数内var声明的变量
        3. 注意：函数中尽量使用局部变量（用var声明），避免操作导致全局变量的变化
3. 运算符及优先级
4. 分支
5. 循环
6. 函数

    1. 自定义函数
    2. 全局函数
    3. 特殊函数

        1. 匿名函数 var a=function(x,y){return x+y;}
        2. 回调函数 function a(x,y,callback){ x=callback(x);y=callback(y);return x+y;} function callback(x){return x+1;}
        3. 自调函数 ( function(x,y){ return x+y; } )(1,2); 不产生全局变量，只能执行一次
        4. 私有函数 function a(x){ function b(z){ return z+1;}; return b(x);}  私有函数外部不能执行
        5. 返回函数 var test=function a(){ function b(z){return z+1;} return b;}; test(3);
        6. 重新函数 (fanction a(){ alert(&apos;aaa&apos;);a=function(){alert(&apos;bbb&apos;);}})(); a(); 执行一次后变更
</code></pre><p>var a=function(){<br>     function setUp(){<br>         alert(‘初始化’);<br>     }<br>     function test(){<br>         alert(‘测试’)<br>     }<br>     setUp();<br>     return test;<br>}();<br>a();</p>
<pre><code>        7. 闭包
7. 对象

    1. 自定义对象
    2. 内建对象

        1. 数据封装对象

            1. Object对象
            2. Object.prototype
            3. Number
            4. Boolean
            5. String
            6. Array
            7. Function
        2. 工具类对象

            1. Date
            2. Math

                1. 属性

                    1. Math.E 欧拉常数
                    2. Math.LN2 2的对数
                    3. Math.LN10
                    4. Math.LOG2E
                    5. Math.LOG10E
                    6. Math.PI
                    7. Math.SQRT1_2 1/2的平方根
                    8. Math.SQRT2
                2. 方法

                    1. Math.abs(x)
                    2. Math.ceil(x)向上取整
                    3. Math.floor(x)
                    4. Math.round(x)四舍五入
                    5. Math.pow(x,y)x的y次幂
                    6. Math.sqrt(x)平方根
                    7. ......
                    8. 

        3. 错误对象

            1. Error对象
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML-CSS基础入门学习笔记]]></title>
      <url>/2018/02/01/HTML-CSS%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>HTML<br>HTML语法<br>HTML基本结构<br>文档设置标记-格式标记<br><br></p><p><center><pre><li><ul><ol><dl><dt><dd><hr><div><br>文档设置标记-文本标记</div></dd></dt></dl></ol></ul></li></pre></center></p>
<p><hn><font><b><i><sub><sup><tt><cite><em><strong><small><big><u><br>图像标记 <img><br>超链接的使用<a><br>HTML表格 <table><caption><tr><th></th><td><br>HTML框架 <frameset><frame><br>HTML表单设计<form><input><select><br>CSS<br>定义CSS样式表<br>标签选择器、class选择器、id选择器、组合选择器、伪类选择器及优先级问题<br>常见的CSS属性<br>颜色属性、字体属性、背景属性、文本属性、边框属性<br>Div + Css布局<br>盒模型、布局相关属性（定位、浮动、显示、溢出）<br>综合实战<br>切图<br>整体架构<br>内容样式</select></form></frameset></td></tr></caption></table></a></u></big></small></strong></em></cite></tt></sup></sub></i></b></font></hn></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[性能测试学习笔记]]></title>
      <url>/2018/02/01/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>课程大纲<br>第一天：<br>            1.性能测试脚本设计及编写实战<br>            2.脚本优化技术（检查点、事务、关联、参数化的设置）<br>            3.如何进行合理的性能测试场景分析及设计<br>            4.性能测试图表监控以及调优分析</p>
<p>第二天：</p>
<pre><code>1.数据库存储引擎及索引
2.数据库索引优化分析
3.数据库表结构设计优化
4.数据库锁问题优化分析
5.数据库常用的SQL命令优化分析
</code></pre><p>Top命令<br>Load Average 5分钟 10分钟 15分钟<br>Load average / CPU个数 &gt;5 表示负载很大<br>并发量2000(单位 s)<br>事务平均响应时间0.05s<br>1s/0.05=1个用户200并发<br>10个用户就能达到</p>
<p>轻负载区  重负载区 崩溃区<br>最佳用户数  最大用户数<br>LoadRunner使用(结合Fiddler抓包)</p>
<p>基本函数</p>
<pre><code>* web_url      模拟浏览起发出get请求
* web_submit_data();     发送Post请求
* web_custom_request();      模拟浏览器发出http支持的任何方式的请求
</code></pre><p>关联</p>
<pre><code>* web_reg_save_param     从request中获取session(参数),根据左右边界进行定位-----reg函数要在请求的函数之前,中间不能插入其他函数
* lr_save_string(lr_paramarr_idx(&quot;fight&quot;,2),nn);获取web_reg_save_param参数数组中的某个值(获取时选择all)
</code></pre><p>参数化<br>选中,右键,replace with a parameter<br>(用户,密码的参数使用不同的参数名,使用同一参数文件)</p>
<p>事务<br>人为定义的一系列请求<br>LoadRunner 事务开始标记,事务结束标记,用处理事务的相应时间来衡量性能<br>结束事务名,要与开始事务名一致<br>可是使用for循环,执行多次<br>注意:事务一般只包含请求操作,检查点,关联,思考时间一般写在事务外</p>
<p>检查点<br>放在事务开始标记前,检查相应数据,带html标签的内容(不是页面内容)<br>注意:web_reg_find检查点不支持中文内容</p>
<p>web_find和web_reg_find的区别<br>web_find是在返回页面中查找,web_reg_find是在响应结果中查找(需要加上html标签)<br>web_find 必须 Enable image and text check</p>
<p>思考时间<br>更加真实的模拟用户的操作<br>lr_think_time(秒数)<br>一般不放在事务里,获取真实性能指标时加入,压力测试时不加入</p>
<p>集合点<br>实际用处不大</p>
<p>Action()<br>{<br>    //变量声明必须写在开头<br>    int httpretcode;</p>
<pre><code>//关联,获取session
web_reg_save_param(&quot;session&quot;,
    &quot;LB=name=userSession value=&quot;,
    &quot;RB=&gt;&quot;,
    &quot;Ord=1&quot;,
    LAST);


//打开网站   
web_custom_request(&quot;web_custom_request&quot;,
    &quot;URL=http://172.31.6.169:1080/WebTours/&quot;,
    &quot;Method=GET&quot;,
    &quot;TargetFrame=&quot;,
    &quot;Resource=0&quot;,
    &quot;Referer=&quot;,
    &quot;Mode=HTML&quot;,
    &quot;Body=&quot;,
    LAST);


//设立检查点

web_reg_find(&quot;Search=All&quot;,
    &quot;SaveCount=num&quot;,
    &quot;Text=Welcome, &lt;b&gt;{user}&lt;/b&gt;, &quot;,
    LAST);

//事务开始点
lr_start_transaction(&quot;登录事务&quot;);

//登录
web_submit_data(&quot;web_submit_data&quot;,
    &quot;Action=http://172.31.6.169:1080/WebTours/login.pl&quot;,
    &quot;Method=POST&quot;,
    &quot;TargetFrame=&quot;,
    &quot;Referer=&quot;,
    &quot;Mode=HTML&quot;,
    ITEMDATA,
    &quot;Name=userSession&quot;, &quot;Value={session}&quot;, ENDITEM,
    &quot;Name=username&quot;, &quot;Value={user}&quot;, ENDITEM,
    &quot;Name=password&quot;, &quot;Value={pwd}&quot;, ENDITEM,
    &quot;Name=login.x&quot;, &quot;Value=56&quot;, ENDITEM,
    &quot;Name=login.y&quot;, &quot;Value=10&quot;, ENDITEM,
    &quot;Name=JSFormSubmit&quot;, &quot;Value=off&quot;, ENDITEM,
    LAST);

//输出读取的数据
lr_output_message(&quot;读取到的用户名为:%s&quot;,lr_eval_string(&quot;{user}&quot;));
lr_output_message(&quot;读取到的密码为:%s&quot;,lr_eval_string(&quot;{pwd}&quot;));

//事务结束点 ,自动结束,不推荐
//lr_end_transaction(&quot;登录事务&quot;, LR_AUTO);

//自动结束事务的实现
/*
httpretcode=web_get_int_property(HTTP_INFO_RETURN_CODE);
if(httpretcode==200){
    lr_end_transaction(&quot;登录事务&quot;, LR_PASS);
}
else{
    lr_end_transaction(&quot;登录事务&quot;, LR_PASS);
}
*/

//断言
if(atoi(lr_eval_string(&quot;{num}&quot;))&gt;0){
    lr_end_transaction(&quot;登录事务&quot;,LR_PASS);
}
else{
    lr_end_transaction(&quot;登录事务&quot;,LR_FAIL);
}


return 0;
</code></pre><p>}</p>
]]></content>
      
        
        <tags>
            
            <tag> 性能测试, 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[接口测试学习笔记二]]></title>
      <url>/2018/02/01/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C.html</url>
      <content type="html"><![CDATA[<p>接口名称<br>加法<br>接口描述<br>对输入的两个参数进行相加，并输出运算结果<br>请求方式<br>POST<br>请求地址<br>/130iftest/Calc<br>输入参数<br>参数名称<br>参数描述<br>参数类型<br>是否必填<br>示例<br>备注<br>a<br>加数<br>String<br>Y<br>2<br>b<br>被加数<br>String<br>Y<br>3<br>输出参数</p>
<p>服务器地址：<br><a href="http://172.31.6.94:8080" target="_blank" rel="noopener">http://172.31.6.94:8080</a></p>
<p>发送Post请求 操作步骤</p>
<pre><code>1. 新建客户端对象
2. 实例化HttpPost对象，使用地址进行实例化
3. 使用NameValuePair将发送的参数打包
4. 使用URLEncodedFormEntity工具类，实例化一个entity对象，并使用NameValuePair中的数据进行初始化
5. 将实例化的entity对象添加到post对象的响应中
6. 新建一个响应对象，接受客户端对象执行post对象的响应结果
7. 从响应实体中提取数据
</code></pre><p>package com.example.say1;</p>
<p>import java.io.IOException;<br>import java.util.ArrayList;<br>import java.util.List;</p>
<p>import org.apache.http.Consts;<br>import org.apache.http.NameValuePair;<br>import org.apache.http.client.ClientProtocolException;<br>import org.apache.http.client.entity.UrlEncodedFormEntity;<br>import org.apache.http.client.methods.CloseableHttpResponse;<br>import org.apache.http.client.methods.HttpPost;<br>import org.apache.http.impl.client.CloseableHttpClient;<br>import org.apache.http.impl.client.HttpClients;<br>import org.apache.http.message.BasicNameValuePair;<br>import org.apache.http.util.EntityUtils;</p>
<p>public class HttpClientDemo2 {<br>      public void doPost() throws ClientProtocolException, IOException{</p>
<p>//          1. 新建客户端对象<br>            CloseableHttpClient client = HttpClients.createDefault();<br>//          2. 实例化HttpPost对象，使用地址进行实例化<br>            HttpPost post=new HttpPost(“<a href="http://172.31.6.94:8080/130iftest/Calc" target="_blank" rel="noopener">http://172.31.6.94:8080/130iftest/Calc</a>“);<br>//          3. 使用NameValuePair将发送的参数打包<br>            List<namevaluepair> list = new ArrayList<namevaluepair>();<br>            list.add(new BasicNameValuePair(“a”,”5”));<br>            list.add(new BasicNameValuePair(“b”,”2”));<br>//          4. 使用URLEncodedFormEntity工具类，实例化一个entity对象，并使用NameValuePair中的数据进行初始化<br>            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(list,Consts.UTF_8);</namevaluepair></namevaluepair></p>
<p>//          5. 将实例化的entity对象添加到post对象的响应中<br>            post.setEntity(entity);<br>//          6. 新建一个响应对象，接受客户端对象执行post对象的响应结果<br>            CloseableHttpResponse response = client.execute(post);<br>//          7. 从响应实体中提取数据<br>            String result = EntityUtils.toString(response.getEntity());<br>            System.out.println(result);</p>
<pre><code>}
public static void main(String[] args) throws ClientProtocolException, IOException{
      HttpClientDemo2 demo = new HttpClientDemo2();
      demo.doPost();
}
</code></pre><p>}</p>
<p>package com.example.day2;</p>
<p>import java.io.IOException;<br>import java.nio.charset.Charset;</p>
<p>import org.apache.http.client.ClientProtocolException;<br>import org.apache.http.client.methods.CloseableHttpResponse;<br>import org.apache.http.client.methods.HttpPost;<br>import org.apache.http.entity.StringEntity;<br>import org.apache.http.impl.client.CloseableHttpClient;<br>import org.apache.http.impl.client.HttpClients;<br>import org.apache.http.util.EntityUtils;</p>
<p>public class WSTest {<br>    public static void main(String[] args) throws ClientProtocolException, IOException{</p>
<p>//        1. 新建客户端对象<br>        CloseableHttpClient client = HttpClients.createDefault();<br>//        2. 实例化HttpPost对象，使用地址进行实例化<br>        HttpPost post = new HttpPost(“<a href="http://172.31.6.94:8080/axis2/services/calc" target="_blank" rel="noopener">http://172.31.6.94:8080/axis2/services/calc</a>“);<br>//        3. 将发送的参数打包<br>        String soapXML=”&lt;soapenv:Envelope xmlns:soapenv=\”<a href="http://schemas.xmlsoap.org/soap/envelope/\" target="_blank" rel="noopener">http://schemas.xmlsoap.org/soap/envelope/\</a>“ “</p>
<pre><code>+ &quot;xmlns:ws=\&quot;http://ws.example.com\&quot;&gt;&quot;
+ &quot;&lt;soapenv:Header/&gt;&quot;
+ &quot;&lt;soapenv:Body&gt;&quot;
+ &quot;&lt;ws:add&gt;&quot;
+ &quot;&lt;ws:x&gt;13&lt;/ws:x&gt;&quot;
+ &quot;&lt;ws:y&gt;14&lt;/ws:y&gt;&quot;
+ &quot;&lt;/ws:add&gt;&quot;
+ &quot;&lt;/soapenv:Body&gt;&quot;
+ &quot;&lt;/soapenv:Envelope&gt;&quot;;
</code></pre><p>//        4. 实例化一个entity对象<br>        StringEntity entity = new StringEntity(soapXML, Charset.forName(“UTF-8”));<br>//        5. 将实例化的entity对象添加到post对象的响应中<br>        post.setEntity(entity);<br>//        6. 新建一个响应对象，接受客户端对象执行post对象的响应结果<br>        CloseableHttpResponse response = client.execute(post);<br>//        7. 从响应实体中提取数据<br>        String result = EntityUtils.toString(response.getEntity());<br>        System.out.println(result);</p>
<pre><code>}
</code></pre><p>}</p>
<p>ntsd -c q -p pid<br><a href="http://172.31.6.94:8080/axis2/services/calc?wsdl" target="_blank" rel="noopener">http://172.31.6.94:8080/axis2/services/calc?wsdl</a></p>
<p>package com.example.test;</p>
<p>import java.rmi.RemoteException;</p>
<p>import org.apache.axis2.AxisFault;</p>
<p>import com.example.ws.CalcStub;<br>import com.example.ws.CalcStub.AddResponse;</p>
<p>public class CalcTest {</p>
<pre><code>public static void main(String[] args) throws RemoteException {
    // TODO Auto-generated method stub
    String target = &quot;http://172.31.6.94:8080/axis2/services/calc?wsdl&quot;;
    CalcStub stub = new CalcStub(target);
    CalcStub.Add add = new CalcStub.Add();
    add.setX(3);
    add.setY(7);
    AddResponse response = stub.add(add);
    int result = response.get_return();
    System.out.println(result);

}
</code></pre><p>}</p>
<p>package com.example.test;</p>
<p>import java.rmi.RemoteException;</p>
<p>import org.apache.axis2.AxisFault;</p>
<p>import com.example.ws.CalcStub;<br>import com.example.ws.CalcStub.AddResponse;</p>
<p>public class CalcTest {</p>
<pre><code>public int addTest(int x,int y) throws RemoteException {
    // TODO Auto-generated method stub
    String target = &quot;http://172.31.6.94:8080/axis2/services/calc?wsdl&quot;;
    CalcStub stub = new CalcStub(target);
    CalcStub.Add add = new CalcStub.Add();
    add.setX(x);
    add.setY(y);
    AddResponse response = stub.add(add);
    int result = response.get_return();
    return result;

}
</code></pre><p>}</p>
<p>package com.example.test;</p>
<p>import static org.junit.Assert.assertEquals;</p>
<p>import java.rmi.RemoteException;</p>
<p>import org.databene.benerator.anno.Source;<br>import org.databene.feed4junit.Feeder;<br>import org.junit.Test;<br>import org.junit.runner.RunWith;</p>
<p>@RunWith(Feeder.class)<br>public class Controller {</p>
<pre><code>@Test
@Source(&quot;./data/add.csv&quot;)
public void addtest(int x,int y,int expected) throws RemoteException{
    CalcTest calc = new CalcTest();
    int actual = calc.addTest(x, y);
    assertEquals(expected,actual);

}
</code></pre><p>}</p>
]]></content>
      
        
        <tags>
            
            <tag> 接口测试, </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[接口测试学习笔记]]></title>
      <url>/2018/02/01/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80.html</url>
      <content type="html"><![CDATA[<p>6.94</p>
<p>微架构</p>
<p>REST—-HTTP<br>SOAP—HTTP<br>RPC</p>
<p>接口测试概况</p>
<pre><code>1. 什么是接口

    1. 业务模块分散，部署在不同的服务器上
    2. 使用特定的协议，进行跨平台，跨应用程序进行数据交换的网络应用
2. 接口测试的种类

    1. 基于http协议的
    2. 基于soap协议的 http+xml

        1. 简单对象访问协议
    3. 基于rpc协议的
3. 接口测试关注哪些方面

    1. 功能性
    2. 容错性
    3. 安全性
    4. 性能
4. 如何进行接口测试

    1. 先找开发或者产品要接口说明文档

        1. 作用，开发接口测试脚步的依据
        2. 内容 

            1. 概要信息

                1. 测试服务器的信息
                2. 一些约定的规范
            2. 每一个接口的具体信息

                1. 接口名称
                2. 接口说明
                3. 请求方式
                4. 请求地址
                5. 输入参数

                    1. 参数名称
                    2. 参数说明
                    3. 参数类型
                    4. 是否必填
                    5. 实例
                6. 输出参数

                    1. 参数名称
                    2. 参数说明
                    3. 参数类型
                    4. 实例
                    5. 备注
    2. 熟悉业务流程，准备测试用例，测试数据

        1. 功能测试用例

            1. 编号、标题、模块、优先级、预置条件、操作步骤、输入数据、预期结果、实际结果
        2. 接口测试用例

            1. 编号、标题、模块、优先级、预置条件、输入数据、预期结果、实际结果
    3. 根据接口文档开发测试脚本
</code></pre><p>Java 基础</p>
<pre><code>1. java开发环境搭建

    1. 环境检查
    2. jdk安装
    3. 环境变量的配置

        1. JAVA_HOME
        2. CLASSPATH
</code></pre><p>Java JSON 数据类型</p>
<pre><code>1. JSONObject
2. JSONArray
</code></pre><p>package com.example.say1;</p>
<p>import com.alibaba.fastjson.JSONArray;<br>import com.alibaba.fastjson.JSONObject;</p>
<p>public class JSONDemo {<br>      public static void main(String[] args){<br>            JSONObject obj1 = new JSONObject();<br>            obj1.put(“name”, “zhangsan”);<br>            obj1.put(“age”, 14);<br>            obj1.put(“grade”, 60.5);<br>            System.out.println(obj1);</p>
<pre><code>      JSONArray array = new JSONArray();
      array.add(obj1);
      array.add(&quot;hello,world&quot;);
      array.add(123456);

      System.out.println(array);

      String name = obj1.getString(&quot;name&quot;);

      System.out.println(name);


      JSONObject obj = array.getJSONObject(0);
      System.out.println(obj);




}
</code></pre><p>}</p>
<p>类<br>类的属性<br>类的属性方法getter   setter<br>类的行为方法<br>类的构造方法（可以有多个）<br>http协议简介</p>
<pre><code>1. 请求对象

    1. 状态行
    2. 请求行

        1. url

            1. get
            2. post
        2. 协议版本号
    3. 请求实体
2. 响应对象

    1. 状态行

        1. 协议版本号，状态码、状态码对应的消息
    2. 消息头
    3. 响应实体 浏览器里面看到的内容
</code></pre><p>POST <a href="http://blog.sohu.com/manage/entry.do" target="_blank" rel="noopener">http://blog.sohu.com/manage/entry.do</a> HTTP/1.1—————–&gt;状态行 请求类型 请求类型<br>Accept: text/html, application/xhtml+xml, <em>/</em> ———————&gt;消息头<br>Referer: <a href="http://blog.sohu.com/manage/entry.do?m=add&amp;t=shortcut" target="_blank" rel="noopener">http://blog.sohu.com/manage/entry.do?m=add&amp;t=shortcut</a><br>Accept-Language: zh-CN<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko<br>Content-Type: application/x-www-form-urlencoded<br>Accept-Encoding: gzip, deflate<br>Host: blog.sohu.com<br>Content-Length: 769<br>Connection: Keep-Alive<br>Pragma: no-cache<br>Cookie: YYID=F008C417DF2A2DC66A51DD03FD9DB781; beans_dmp_done=1; IPLOC=CN1100; SUV=F008C417DF2A2DC66A51DD03FD9DB781; lastdomain=1493437519|d29zaGl6aHU5NkBzb2h1LmNvbXw|sohu.com|1; ppnewsinfo=1019|d29zaGl6aHU5NkBzb2h1LmNvbQ==|cscx|<a href="http://1864.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1ba07c7g2.jpg" target="_blank" rel="noopener">http://1864.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1ba07c7g2.jpg</a>; ppsmu=1|1492227919|1493437519|dXNlcmlkOjE5Ondvc2hpemh1OTZAc29odS5jb218dWlkOjA6fHV1aWQ6MDo|b2c2LMXf-ePM2STPi4lWitQ_WqagRMtcWxZ8M5knuLESxtaT2Z_X-mwP0kvhZJte_XFgSU2kq18t-aN179lxYQ; ppinf=2|1492227919|1493437519|bG9naW5pZDowOnx1c2VyaWQ6MTk6d29zaGl6aHU5NkBzb2h1LmNvbXxzZXJ2aWNldXNlOjMwOjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMHxjcnQ6MDp8ZW10OjE6MHxhcHBpZDo0OjEwMTl8dHJ1c3Q6MToxfHBhcnRuZXJpZDoxOjB8cmVsYXRpb246MDp8dXVpZDoxNjowOGY3YzMzNDVhMDc0YzBzfHVpZDo5OnU0NTI4ODEzOHx1bmlxbmFtZTowOnw; pprdig=cxUmxLFDO2xdTiT7vD2o5GwhuyLlow5aOEQSi_dd7zGDRxO2dh7_AXgAMUraYYRjfvbgIIIQv9VGhoPWjMmL58KAXPaEQeAmdaat_yK46OoZuj9XhhLc-wzxexgIlKlUVVOqKTzPQ6QwAA79xKDTfwiEsQGFojUxraR2AzAtq6A; spinfo=”c29odXx3b3NoaXpodTk2QHNvaHUuY29tfDE4ODU0ODg=”; spsession=MTg4NTQ4OHwxNDkzNDM3NTE5fDE0OTM0Mzc1MTl8Y3NjeA==-MSvCUpyqs0TEGBSjxA8nXoLblGA=; spstatus=0; pp_login_time=https||1019|0|0|1100; sucaccount=d29zaGl6aHU5NkBzb2h1LmNvbQ==|%u706B%u7130%u51CC|<a href="http://1864.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1ba07c7g2.jpg|u45288138|=v2=dNUzBHb5kG962aazl2h1LmNvbQ==|cscx|http://1874.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1b9e8eeg86.jpg" target="_blank" rel="noopener">http://1864.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1ba07c7g2.jpg|u45288138|=v2=dNUzBHb5kG962aazl2h1LmNvbQ==|cscx|http://1874.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1b9e8eeg86.jpg</a>; TurnAD236=visit:1; TurnAD300245=visit:2; bloginfo=d29zaGl6aHU5NkBzb2h1LmNvbQ==|8db6373792|cscx|1|%u4F59%u6B4C%5E|<a href="http://1864.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1ba07c7g2.jpg" target="_blank" rel="noopener">http://1864.img.pp.sohu.com.cn/images/2013/1/3/8/11/u45288138_13cc1ba07c7g2.jpg</a>; JSESSIONID=aaaplpCRpOkqK_M1FAcRv; ppmdig=1492227928000000297d122cf77f7e09deb41de8928ee551; pvc=25B0Gu05YVl0%2B5FDS9o18LhS0siVwAXe; postToGroupIdsd29zaGl6aHU5NkBzb2h1LmNvbQ===0; msg=none<br>（空一行）<br>oper=art_ok&amp;m=save&amp;shortcutFlag=&amp;contrChId=&amp;contrCataId=&amp;subflag=0&amp;entrytitle=title3&amp;keywords=lable3&amp;categoryId=0&amp;newGategory=&amp;vc=e&amp;entrycontent=%3Cdiv+style%3D%22line-height%3A160%25%3Bfont-size%3A14px%3B%22%3E%3Cp%3Econtent3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3content3%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3Econtent3%3C%2Fp%3E%3Cp%3E%3Cbr%3E%3C%2Fp%3E%3Cp%3Econtent3%3C%2Fp%3E%3C%2Fdiv%3E&amp;vc=e&amp;vcode=pvez&amp;vcodeEn=c34ea687-add5-4d11-b9a0-bcebda4cdd8d&amp;excerpt=&amp;allowComment=2&amp;perm=0&amp;postToGroup=off<br>———&gt;请求实体</p>
<p><a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a> 微信公众号<br>httpclient<br>get类型请求 测试过程</p>
<pre><code>1. 新建一个客户端对象
2. 使用URIBuilder工具类构造一个get类型的url
3. 实例化一个HttpGet类型的对象，并使用url进行实例化
4. 新建一个CloseableHttpResponse类型的响应对象，接受客户端执行get请求的结果
5. 从响应对戏中提取响应实体
</code></pre><p>package com.example.say1;</p>
<p>import java.io.IOException;<br>import java.net.URI;<br>import java.net.URISyntaxException;</p>
<p>import org.apache.http.client.ClientProtocolException;<br>import org.apache.http.client.methods.CloseableHttpResponse;<br>import org.apache.http.client.methods.HttpGet;<br>import org.apache.http.client.utils.URIBuilder;<br>import org.apache.http.impl.client.CloseableHttpClient;<br>import org.apache.http.impl.client.HttpClients;<br>import org.apache.http.util.EntityUtils;</p>
<p>import com.alibaba.fastjson.JSONObject;</p>
<p>public class HttpClientDemo {<br>      public void doGet() throws URISyntaxException, ClientProtocolException, IOException{</p>
<p>//          1. 新建一个客户端对象<br>            CloseableHttpClient client = HttpClients.createDefault();</p>
<p>//          2. 使用URIBuilder工具类构造一个get类型的url<br>            URI uri = new URIBuilder()<br>                  .setScheme(“https”)//设置协议<br>                  .setHost(“api.weixin.qq.com”)//主机地址<br>                  .setPath(“/cgi-bin/token”)<br>                  .setParameter(“grant_type”,”client_credential”)<br>                  .setParameter(“appid”,”wx3f561cf58bafaaf8”)<br>                  .setParameter(“secret”,”ebac048c73549c7312ef285a5b91a380”)<br>                  .build();<br>            System.out.println(uri);<br>//          3. 实例化一个HttpGet类型的对象，并使用url进行实例化<br>            HttpGet get = new HttpGet(uri);</p>
<p>//          4. 新建一个CloseableHttpResponse类型的响应对象，接受客户端执行get请求的结果<br>            CloseableHttpResponse response = client.execute(get);</p>
<p>//          5. 从响应对戏中提取响应实体<br>            String result = EntityUtils.toString(response.getEntity());<br>            System.out.println(result);</p>
<pre><code>      JSONObject json_result = new JSONObject().parseObject(result);
      String access_token=json_result.getString(&quot;access_token&quot;);

      System.out.println(access_token);

}
</code></pre><p>}</p>
<p>package com.example.say1;</p>
<p>import java.io.IOException;<br>import java.net.URISyntaxException;</p>
<p>import org.apache.http.client.ClientProtocolException;</p>
<p>public class HttpClientDemoTest {</p>
<pre><code>public static void main(String[] args) throws ClientProtocolException, URISyntaxException, IOException {
      // TODO Auto-generated method stub
      HttpClientDemo get1 = new HttpClientDemo();
      get1.doGet();

}
</code></pre><p>}</p>
]]></content>
      
        
        <tags>
            
            <tag> 接口测试, Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Framework-Vue开发mini_monitor]]></title>
      <url>/2018/02/01/Framework-Vue%E5%BC%80%E5%8F%91mini-monitor.html</url>
      <content type="html"><![CDATA[<p>根据麦子学院-Django开发监控系统开发</p>
<h1 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h1><p>nose<br>djangorestframework<br>markdown<br>django-filter</p>
<h1 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h1><p>INSTALLED_APPS = [<br>    ‘django.contrib.admin’,<br>    ‘django.contrib.auth’,<br>    ‘django.contrib.contenttypes’,<br>    ‘django.contrib.sessions’,<br>    ‘django.contrib.messages’,<br>    ‘django.contrib.staticfiles’,<br>    ‘monitor’,<br>    ‘rest_framework’,<br>]</p>
<p>#urls.py<br>from django.conf.urls import url, include<br>from django.contrib import admin</p>
<h1 id="from-django-contrib-auth-models-import-User"><a href="#from-django-contrib-auth-models-import-User" class="headerlink" title="from django.contrib.auth.models import User"></a>from django.contrib.auth.models import User</h1><h1 id="from-rest-framework-import-routers-serializers-views"><a href="#from-rest-framework-import-routers-serializers-views" class="headerlink" title="from rest_framework import routers, serializers, views"></a>from rest_framework import routers, serializers, views</h1><p>from monitor import views</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, admin.site.urls),<br>    url(r’^api-auth/‘,include(‘rest_framework.urls’, namespace=’rest_framework’)),</p>
<pre><code>url(r&apos;^api/apps/$&apos;,views.app_list),
url(r&apos;^api/apps/(?P&lt;pk&gt;[0-9]+)/$&apos;,views.app_detail),

url(r&apos;^api/app_statistics/$&apos;,views.app_statistics_list),
url(r&apos;^api/app_statistics/(?P&lt;pk&gt;[0-9]+)/$&apos;,views.app_statistics_detail),

url(r&apos;^api/app_history/$&apos;,views.app_history_list),
url(r&apos;^api/app_history/(?P&lt;pk&gt;[0-9]+)/$&apos;,views.app_history_detail),

url(r&apos;^api/groups/$&apos;,views.group_list),
url(r&apos;^api/groups/(?P&lt;pk&gt;[0-9]+)/$&apos;,views.group_detail),

url(r&apos;^api/hosts/$&apos;,views.host_list),
url(r&apos;^api/hosts/(?P&lt;pk&gt;[0-9]+)/$&apos;,views.host_detail)
</code></pre><p>]</p>
<p>#monitor/util/util.py<br>def get_ip(request):<br>    x_forwarded_for = request.META.get(‘HTTP_X_FORWARDED_FOR’)<br>    if x_forwarded_for:<br>        ip = x_forwarded_for.split(‘,’)[-1].strip()<br>    else:<br>        ip = request.META.get(‘REMOTE_ADDR’)<br>    return ip</p>
<p>#monitor/models.py</p>
<p>from django.db import models<br>from datetime import datetime</p>
<h1 id="Create-your-models-here"><a href="#Create-your-models-here" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>class App(models.Model):<br>    class Meta:<br>        db_table = ‘app’</p>
<pre><code>name = models.CharField(max_length=128)
host_ip = models.IntegerField()
group_id = models.IntegerField()
configuration = models.TextField()
status = models.CharField(max_length=12)
message = models.TextField()
enable = models.IntegerField()
last_update = models.DateTimeField()


@classmethod
def create(cls, name, host_ip, status, message, enable, group_id,last_update):
    app = cls(name=name,
        host_ip=host_ip,
        status=status,
        message=message,
        enable=enable,
        group_id=group_id,
        last_update=last_update
        )
    return app
</code></pre><p>class AppStatistics(models.Model):<br>    class Meta:<br>        db_table = ‘app_statistics’</p>
<pre><code>app_id = models.IntegerField()
statistics = models.CharField(max_length=256)
time = models.DateTimeField(auto_now=True)

@classmethod
def create(cls,app_id,statistics):
    appStatistics = cls(app_id=app_id,statistics=statistics,)
    return appStatistics    
</code></pre><p>class AppHistory(models.Model):<br>    class Meta:<br>        db_table = ‘app_history’</p>
<pre><code>app_id = models.IntegerField()
status = models.CharField(max_length=32)
message = models.TextField(null=True)
time = models.DateTimeField(auto_now=True)

def convert_to_epoc(self):
    return self.time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)

@classmethod
def create(cls, app_id, status, message):
    group = cls(app_id=app_id, status=status,message=message)
    return group
</code></pre><p>class Group(models.Model):<br>    class Meta:<br>        db_table = ‘app_group’</p>
<pre><code>unique_name = models.CharField(max_length=32)
display_name = models.CharField(max_length=32)

@classmethod
def create(cls, unique_name, display_name):
    group = cls(unique_name=unique_name, display_name=display_name)
    return group
</code></pre><p>class Host(models.Model):<br>    class Meta:<br>        db_table = ‘app_host’</p>
<pre><code>name = models.CharField(max_length=32)
ip = models.CharField(max_length=64)
description = models.CharField(max_length=256, null=True)

@classmethod
def create(cls, ip, name=&apos;&apos;):
    group = cls(ip=ip, name=name)
    return group
</code></pre><p>#serializers.py<br>from rest_framework import serializers<br>from monitor.models import App,AppStatistics,AppHistory,Group,Host<br>class AppSerializer(serializers.ModelSerializer):<br>    last_update = serializers.ReadOnlyField(source=’convert_to_epoc’)<br>    class Meta:<br>        model = App<br>        fields = (‘id’,’name’,’host_ip’,’configuration’,’status’,<br>            ‘message’,’enable’,’last_update’)<br>class ManageAppSerializer(serializers.ModelSerializer):<br>    last_update = serializers.ReadOnlyField(source=’convert_to_epoc’)<br>    class Meta:<br>        model = App<br>        fields = (‘id’,’name’,’host_ip’,’group_id’,’configuration’,’status’,<br>            ‘message’,’enable’,’last_update’)<br>class AppStatisticsSerializer(serializers.ModelSerializer):<br>    time = serializers.ReadOnlyField(source=’convert_to_epoc’)<br>    class Meta:<br>        model = AppStatistics<br>        fields = (‘id’,’app_id’,’statistics’,’time’)<br>class AppHistorySerializer(serializers.ModelSerializer):<br>    time = serializers.ReadOnlyField(source=’convert_to_epoc’)<br>    class Meta:<br>        model = AppHistory<br>        fields = (‘app_id’,’status’,’message’,’time’)<br>class GroupSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = Group<br>        fields = (‘unique_name’, ‘display_name’, ‘id’)<br>class HostSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = Host<br>        fields = (‘name’, ‘ip’, ‘description’)</p>
<p>#monitor/views.py</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding:utf-8"></a>coding:utf-8</h1><p>from django.shortcuts import render<br>from rest_framework.decorators import api_view<br>from monitor.serializers import AppSerializer, AppStatisticsSerializer<br>from monitor.serializers import AppHistorySerializer, GroupSerializer,HostSerializer<br>from monitor.models import App, AppStatistics, AppHistory, Group, Host<br>from rest_framework.response import Response<br>from django.views.decorators.csrf import csrf_exempt<br>from django.http.response import JsonResponse, HttpResponse<br>from util.util import get_ip<br>from datetime import datetime<br>import json</p>
<p>@api_view([‘GET’, ‘POST’])<br>@csrf_exempt<br>def app_list(request):<br>    ‘’’<br>    List all apps or create a new app<br>    ‘’’<br>    if request.method == ‘GET’:<br>        group_id = request.GET.get(‘group_id’,None)<br>        if group_id:<br>            tasks = App.objects.filter(enable=1).filter(group_id=group_id).all()<br>        else:<br>            tasks = App.objects.filter(enable=1).all()<br>        serializer = AppSerializer(tasks, many=True)<br>        return Response(serializer.data)<br>    elif request.method == ‘POST’:<br>        name = request.data.get(‘name’)<br>        app = App.create(name,1,”OK”,””,1,2).save()<br>        serializer = AppSerializer(app, many=False)<br>        return JsonResponse(serializer.data,safe=False)</p>
<p>@api_view([‘GET’,’PUT’,’DELETE’])<br>def app_detail(request, pk):<br>    ‘’’<br>    Get,update or delete a specific app<br>    ‘’’<br>    try:<br>        try:<br>            pk = int(pk)<br>            app = App.objects.get(pk=pk)<br>        except:<br>            app = App.objects.filter(name=pk).first()<br>    except App.DoesNotExist:<br>        return HttpResponse(status=404)</p>
<pre><code>if request.method == &apos;GET&apos;:
    serializer = AppSerializer(app)
    return JsonResponse(serializer.data)

if request.method == &apos;DELETE&apos;:
    app.enable = 0
    return JsonResponse(serializer.data)

if request.method == &apos;PUT&apos;:
    if not app:
        res = &amp;#123;&quot;code&quot;:405,&quot;message&quot;:&quot;Not found this app&quot;&amp;#125;
        return Response(data=res,status=405)

ip = get_ip(request)
if ip is not None:
    host = Host.objects.filter(ip=ip).first()
    if host is None:
        host = Host.create(ip)
        host.save()
status = request.data.get(&quot;status&quot;)
statistics = request.data.get(&quot;message&quot;,app.message)
if status is None:
    res = &amp;#123;&quot;code&quot;:400,&quot;message&quot;:&quot;wong&quot;&amp;#125;
    return Response(data=res, status=400)
app.status = status
app.last_update = datetime.now()
app.host_id = host.id
app.save()
if statistics:
    try:
        json.loads(statistics)
    except:
        res = &amp;#123;&quot;code&quot;:400,&quot;message&quot;:&quot;Statistics format must json&quot;&amp;#125;
        return Response(data=res,status=400)
    appStatistics = AppStatistics.create(statistics,app.id)
    appStatistics.save()
    serializer = AppSerializer(app)
return JsonResponse(serializer.data)
</code></pre><p>def manage_detail(request, pk):<br>    try:<br>        pk = int(pk)<br>        app = App.objects.get(pk=pk)<br>    except:<br>        app = App.objects.filter(name=pk).first()<br>    if not app:<br>        return HttpResponse(status=404)</p>
<pre><code>elif request.method == &apos;GET&apos;:
    serializer = manageAppSerializer(app)
    return JsonResponse(serializer.data)

elif request.method == &apos;POST&apos;:
    app.name = reqqest.data.get(&quot;name&quot;,app_name)
    app.host_id = request.data.get(&quot;host_id&quot;, app.host_id)
    app.group_id = request.data.get(&quot;group_id&quot;, app.group_id)
    app.configuration = request.data.get(&quot;configuration&quot;, app.configuration)
    app.save()
    serializer = manager_app_serializer(app, many=False)
    return JsonResponse(serializer.data, safe=False)
</code></pre><p>@api_view([‘GET’])<br>@csrf_exempt<br>def app_statistics_list(request,pk):<br>    ‘’’<br>    List all app_statisticss<br>    ‘’’<br>    if request.method == ‘GET’:<br>        limit = int(request.GET.get(‘limit’,12))<br>        start_date = request.GET.get(‘start_date’,None)<br>        end_date = request.GET.get(‘end_date’,None)<br>        if start_date and end_date:<br>            app_statistics_list = AppStatistics.objects.filter(app_id=pk).filter(time__range=(start_date,end_date)).order_by(‘-id’).all()<br>        else:<br>            app_statistics_list = AppStatistics.objects.filter(app_id=pk).order_by(‘-id’)[:limit].all()</p>
<pre><code>serializer = AppStatisticsSerializer(app_statistics_list, many=False)
return JsonResponse(serializer.data, safe=False)
</code></pre><p>@api_view([‘GET’, ‘POST’])<br>@csrf_exempt<br>def app_history_list(request):<br>    ‘’’<br>    List all app_historys or create a new app_history<br>    ‘’’<br>    if request.method == ‘GET’:<br>        limit = reqqest.GET.get(‘limit’, 12)<br>        app_id = reqqest.GET.get(‘app_id’)<br>        try:<br>            limit = int(limit)<br>            app_id = int(app_id)<br>        except:<br>            res = &#123;”code”:404,”message”:”Limit must be int”&#125;<br>            return Response(data=res,status=400)<br>        app_history_list = AppHistory.objects.filter(app_id=app_id).order_by(‘-id’)[:limit]<br>        serializer = AppHistorySerializer(app_history_list, many=True)<br>        return Response(serializer.data)<br>    elif request.method == ‘POST’:<br>        app_id = request.data.get(‘app_id’)<br>        status = request.data.get(‘status’)<br>        message = request.data.get(‘message’)<br>        if app_id and status:<br>            checkapp_history = AppHistory.objects.filter(app_id=app_id).first()<br>            if checkapp_history:<br>                res = &#123;”code”:400,<br>                “message”: “Ops! app history app_id already exists”&#125;<br>                return Response(data=res,status=400)</p>
<pre><code>    checkip = AppHistory.objects.filter(status=status).first()
    if checkip:
        res = &amp;#123;&quot;code&quot;:400,
        &quot;message&quot;: &quot;Ops! app history status already exists&quot;&amp;#125;
        return Response(data=res,status=400)
else:
    res = &amp;#123;&quot;code&quot;:400,
    &quot;message&quot;:&quot;Ops!app history app_id and status can&apos;t be null&quot;

    &amp;#125;
    return Response(data=res,status=400)
app_history = AppHistory.create(app_id, status, message)
app_history.save()
serializer = AppHistorySerializer(app_history, many=False)
return JsonResponse(serializer.data, safe=False)
</code></pre><p>@api_view([‘GET’, ‘POST’])<br>@csrf_exempt<br>def group_list(request):<br>    ‘’’<br>    List all groups or create a new group<br>    ‘’’<br>    if request.method == ‘GET’:<br>        tasks = Group.objects.all()<br>        serializer = GroupSerializer(tasks, many=True)<br>        return Response(serializer.data)<br>    elif request.method == ‘POST’:</p>
<pre><code># serializer = GroupSerializer(data=request.DATA)
# if serializer.is_valid():
#     serializer.save()
#     return Response(serializer.data, status=201)
unique_name = request.data.get(&apos;unique_name&apos;)
status = request.data.get(&apos;status&apos;)
message = request.data.get(&apos;message&apos;)
if unique_name and status:
    checkgroup = Group.objects.filter(unique_name=unique_name).first()
    if checkgroup:
        res = &amp;#123;&quot;code&quot;:400,
        &quot;message&quot;: &quot;Ops! Unique name already exists&quot;&amp;#125;
        return Response(data=res,status=400)
else:
    res = &amp;#123;&quot;code&quot;:400,
    &quot;message&quot;:&quot;Ops!Unique name and display name can&apos;t be null&quot;

    &amp;#125;
    return Response(data=res,status=400)
group = Group.create(unique_name, display_name)
group.save()
serializer = GroupSerializer(group, many=False)
return JsonResponse(serializer.data, safe=False)
</code></pre><p>@api_view([‘GET’,’PUT’,’DELETE’])<br>def group_detail(request, pk):<br>    ‘’’<br>    Get,update or delete a specific group<br>    ‘’’<br>    try:<br>        group = Group.objects.get(pk=pk)<br>    except Group.DoesNotExist:<br>        return HttpResponse(status=404)</p>
<pre><code>if request.method == &apos;GET&apos;:
    serializer = GroupSerializer(group)
    return JsonResponse(serializer.data)

elif request.method == &apos;PUT&apos;:
    group.unique_name = request.data.get(&apos;unique_name&apos;,group.unique_name)
    group.display_name = request.data.get(&apos;display_name&apos;,
        group.display_name)
    group.save()
    serializer = GroupSerializer(group)
    return JsonResponse(serializer.data)

elif request.method == &apos;DELETE&apos;:
    group.delete()
    res = &amp;#123;&quot;code&quot;:200,
    &quot;message&quot;:&quot;Delete Suessus!&quot;&amp;#125;
    return Response(data=res,status=200)
</code></pre><p>@api_view([‘GET’])<br>@csrf_exempt<br>def host_list(request):<br>    ‘’’<br>    List all hosts<br>    ‘’’<br>    if request.method == ‘GET’:<br>        tasks = Host.objects.all()<br>        serializer = HostSerializer(tasks, many=True)<br>        return Response(serializer.data)</p>
<p>@api_view([‘GET’,’PUT’,’DELETE’])<br>def host_detail(request, pk):<br>    ‘’’<br>    Get,update or delete a specific host<br>    ‘’’<br>    try:<br>        host = Host.objects.get(pk=pk)<br>    except Host.DoesNotExist:<br>        return HttpResponse(status=404)</p>
<pre><code>if request.method == &apos;GET&apos;:
    serializer = HostSerializer(host)
    return JsonResponse(serializer.data)

elif request.method == &apos;PUT&apos;:
    host.name = request.data.get(&apos;name&apos;,host.name)
    host.ip = request.data.get(&apos;ip&apos;,host.ip)
    host.save()
    serializer = HostSerializer(host)
    return JsonResponse(serializer.data)
</code></pre><h1 id="前端—-待完成"><a href="#前端—-待完成" class="headerlink" title="前端—-待完成"></a>前端—-待完成</h1>]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发简单CMS-版本二]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95CMS-%E7%89%88%E6%9C%AC%E4%BA%8C.html</url>
      <content type="html"><![CDATA[<p>Django 1.8.3</p>
<h2 id="项目级"><a href="#项目级" class="headerlink" title="项目级"></a>项目级</h2><h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><p>STATICFILES_DIRS = (<br>    os.path.join(BASE_DIR, “static”),<br>)</p>
<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>from django.conf.urls import include, url<br>from django.contrib import admin<br>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls)),<br>    url(r’^cms/‘, include(‘cms.urls’)),<br>]</p>
<h2 id="应用级"><a href="#应用级" class="headerlink" title="应用级"></a>应用级</h2><h3 id="urls-py-1"><a href="#urls-py-1" class="headerlink" title="urls.py"></a>urls.py</h3><p>from django.conf.urls import patterns, url<br>from cms.views import home, category, article, search<br>urlpatterns = [<br>    url(r’^$’, home, name=’cms-home’),<br>    url(r’^category/(?P<slug>[-\w]+)/$’, category, name=’cms-category’),<br>    url(r’^article/(?P<slug>[-\w]+)/$’, article, name=’cms-article’),<br>    url(r’^search/$’, search, name=”cms-search”),<br>]</slug></slug></p>
<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>from cms.models import Article, Category<br>from django.shortcuts import render_to_response, get_object_or_404<br>from django.db.models import Q<br>def home(request):  # catrgory list<br>    categories = Category.objects.all()<br>    return render_to_response(“cms/index.html”, &#123;’categories’: categories&#125;)<br>def category(request, slug):  # article list<br>    “””Given a category slug,display all items in a category.”””<br>    categories = Category.objects.all()<br>    cur_category = get_object_or_404(Category, slug=slug)<br>    article_list = Article.objects.filter(category=cur_category)<br>    heading = cur_category.label<br>    return render_to_response(“cms/category.html”, locals())  # 返回所有本地变量<br>def article(request, slug):  # article detail # 怎么设计的不同分类可重复？<br>    categories = Category.objects.all()<br>    cur_article = get_object_or_404(Article, slug=slug)<br>    return render_to_response(“cms/article.html”, locals())  # 返回所有本地变量<br>def search(request):<br>    “””<br>    Return a list of stories that match the provided search term<br>    in either the title or the main content.<br>    “””<br>    categories = Category.objects.all()<br>    if ‘q’ in request.GET:<br>        term = request.GET(‘q’)<br>        story_list = Article.objects.filter(Q(title<strong>contains=term) | Q(markdown_content</strong>contains=term))<br>        heading = “Search results”<br>    return render_to_response(“cms/category.html”, locals())</p>
<h3 id="modles-py"><a href="#modles-py" class="headerlink" title="modles.py"></a>modles.py</h3><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>from <strong>future</strong> import unicode_literals<br>from django.db import models<br>import datetime<br>from django.db.models import permalink<br>from django.contrib.auth.models import User<br>from django.utils.encoding import python_2_unicode_compatible<br>from markdown import markdown<br>from django.contrib import admin<br>VIEWABLE_STATUS = [3, 4]</p>
<h1 id="python-2-unicode-compatible-向后兼容django版本"><a href="#python-2-unicode-compatible-向后兼容django版本" class="headerlink" title="@python_2_unicode_compatible  # 向后兼容django版本"></a>@python_2_unicode_compatible  # 向后兼容django版本</h1><p>class Category(models.Model):<br>    “””文章分类”””<br>    label = models.CharField(blank=True, max_length=50)<br>    slug = models.SlugField()<br>    class Meta:<br>        verbose_name_plural = ‘分类’<br>    @permalink<br>    def get_absolute_url(self):  # 获取reverse后的链接</p>
<pre><code>    # return (&apos;cms-article&apos;, (), &amp;#123;&apos;slug&apos;: self.slug&amp;#125;)
    return &apos;cms-category&apos;, (), &amp;#123;&apos;slug&apos;: self.slug&amp;#125;  # 尝试一下是否可以
def __unicode__(self):
    return self.label
</code></pre><h1 id="python-2-unicode-compatible-向后兼容django版本，可以使用-def-str"><a href="#python-2-unicode-compatible-向后兼容django版本，可以使用-def-str" class="headerlink" title="@python_2_unicode_compatible  # 向后兼容django版本，可以使用 def str()"></a>@python_2_unicode_compatible  # 向后兼容django版本，可以使用 def <strong>str</strong>()</h1><p>class Article(models.Model):<br>    “”” 文章页面 “””<br>    STATUS_CHOICES = &#123;<br>        (1, ‘草稿’),<br>        (2, ‘待审批’),<br>        (3, ‘已发布’),<br>        (4, ‘存档’)<br>    &#125;<br>    title = models.CharField(‘标题’, max_length=256)<br>    slug = models.SlugField(‘网址’, max_length=256, db_index=True)  # 建立数据库索引<br>    category = models.ForeignKey(Category)<br>    markdown_content = models.TextField()<br>    html_content = models.TextField(editable=False)  # invisible</p>
<pre><code># author = models.ForeignKey(User, blank=True, null=True)
author = models.ForeignKey(&apos;auth.User&apos;, blank=True, null=True, verbose_name=&apos;作者&apos;)
status = models.IntegerField(&apos;状态&apos;, choices=STATUS_CHOICES, default=1)
# created = models.DateTimeField(default=datetime.datetime.now)  # 可以杜撰
created = models.DateTimeField(&apos;创建时间&apos;, auto_now_add=True)  # 第一次创建更改
# modified = models.DateTimeField(default=datetime.datetime.now) # 可以杜撰
modified = models.DateTimeField(&apos;最后修改时间&apos;, auto_now=True)  # 每次保存时间
class Meta:
    ordering = [&apos;modified&apos;]
    verbose_name = &apos;文章&apos;  # 单数 中文下显示
    verbose_name_plural = &apos;文章&apos;  # 复数，中文下显示
@permalink
def get_absolute_url(self):  # 获取reverse后的链接
    # return (&apos;cms-article&apos;, (), &amp;#123;&apos;slug&apos;: self.slug&amp;#125;)
    return &apos;cms-article&apos;, (), &amp;#123;&apos;slug&apos;: self.slug&amp;#125;  # 尝试一下是否可以
# def __unicode__(self):  # 在Python3中用 __str__ 代替 __unicode__
#     return self.title
def save(self, *args, **kws):  # 转换markdown内容为html内容
    self.html_content = markdown(self.markdown_content)
    self.modified = datetime.datetime.now()
    super(Article, self).save()
</code></pre><p>class ViewableManager(models.Manager):<br>    def get_query_set(self):<br>        default_queryset = super(ViewableManager, self).get_query_set()<br>        return default_queryset.filter(status__in=VIEWABLE_STATUS)</p>
<h3 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h3><p>from django.contrib import admin<br>from cms.models import Article, Category</p>
<p>class ArticleAdmin(admin.ModelAdmin):<br>    list_display = (‘title’, ‘author’, ‘status’, ‘created’, ‘modified’)<br>    search_fields = (‘title’, ‘content’)<br>    list_filter = (‘status’, ‘author’, ‘category’, ‘created’, ‘modified’)</p>
<pre><code># prepopulated_fields = &amp;#123;&apos;slug&apos;: (&apos;title&apos;,)&amp;#125;  # 同步slug与title相同
</code></pre><p>class CategoryAdmin(admin.ModelAdmin):<br>    pass</p>
<pre><code># prepopulated_fields = &amp;#123;&apos;slug&apos;: (&apos;label&apos;,)&amp;#125;  # 同步slug与title相同
</code></pre><p>admin.site.register(Article, ArticleAdmin)<br>admin.site.register(Category, CategoryAdmin)</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>&lt;!DOCTYPE html&gt;</p>
<p><html lang="en"></html></p>
<p><head><br>    <meta charset="UTF-8"><br>    &#123;% load staticfiles %&#125;<br>    <link rel="stylesheet" href="&#123;% static 'css/bootstrap.min.css' %&#125;"><br>    <title>&#123;% block title %&#125;&#123;% endblock %&#125;</title><br></head></p>
<p><body><br>    <div class="container" style="margin-top: 10px;"><br>        <nav class="navbar navbar-default"><br>            <div class="nav-header"><br>                <div class="navbar-brand"><a href="#">MY-CMS</a></div><br>            </div><br>            <ul class="nav navbar-nav"><br>                <li><a href="&#123;% url 'cms-home' %&#125;">首页</a> </li><br>                &#123;% for category in categories %&#125;<br>                    <li><a href="&#123;&#123; category.get_absolute_url &#125;&#125;">&#123;&#123; category &#125;&#125;</a></li><br>                &#123;% endfor %&#125;<br>            </ul><br>            <ul class="nav navbar-nav navbar-right" style="margin-right: 10px;"><br>                <li><a href="../admin/" class="navbar-link">登录</a></li><br>            </ul><br>            <form class="navbar-form" action="&#123;% url 'cms-search' %&#125;" method="get">  <!--1.5之后要用引号--><br>                <input class="form-control" type="text" name="q" placeholder="Search"><br>            </form><br>        </nav><br>    </div><br>    <div class="container"><br>        &#123;% block content %&#125;<br>        &#123;% endblock %&#125;<br>    </div><br></body><br></p>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>&#123;% extends “cms/base.html” %&#125;<br>&#123;% block title %&#125;&#123;&#123; story.title &#125;&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    &#123;% if heading %&#125;<br>        </p><h1>&#123;&#123; heading &#125;&#125;</h1><br>    &#123;% endif %&#125;<br>    <div class="jumbotron"><br>        <h1>Welcome,Friend</h1><br>        <p><br>           This is a simple hero unit,<br>            a simple jumbotron-style component for calling extra attention<br>            to featured content or information.<br>        </p><br>        <p><a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a></p><br>    </div><br>    <div class="page-header"><br>        <h1>首页<small>（分类列表）</small></h1><br>    </div><br>    <ol class="breadcrumb"><br>    <li><a href="&#123;% url 'cms-home' %&#125;">首页</a> </li><br></ol><br>    <div class="page"><br>         <ul><br>        &#123;% for category in categories %&#125;<br>            <li><a href="&#123;&#123; category.get_absolute_url &#125;&#125;">&#123;&#123; category.label &#125;&#125;</a> </li><br>        &#123;% endfor %&#125;<br>    </ul><br>    </div><br>&#123;% endblock %&#125;<p></p>
<h3 id="article-html"><a href="#article-html" class="headerlink" title="article.html"></a>article.html</h3><p>&#123;% extends “cms/base.html” %&#125;<br>&#123;% block title %&#125;&#123;&#123; article.title &#125;&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;</p>
<p><div class="page-header"><br>    <h1>&#123;&#123; cur_article.title &#125;&#125;</h1><br></div></p>
<p><ol class="breadcrumb"><br>    <li><a href="&#123;% url 'cms-home' %&#125;">首页</a> </li><br>    <li><a href="&#123;% url 'cms-category' cur_article.category.slug %&#125;">&#123;&#123; cur_article.category &#125;&#125;</a> </li><br>    <li><a href="&#123;&#123; cur_article.get_absolute_url &#125;&#125;">&#123;&#123; cur_article.title &#125;&#125;</a> </li><br></ol></p>
<p><div class="page"><br>    &#123;&#123; cur_article.html_content|safe &#125;&#125;<br>    <p class="small">最后更新： &#123;&#123; cur_article.modified &#125;&#125;</p><br></div><br>&#123;% endblock %&#125;</p>
<p>###category.html<br>&#123;% extends “cms/base.html” %&#125;<br>&#123;% block title %&#125;&#123;&#123; story.title &#125;&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    &#123;% if heading %&#125;<br>        <div class="page-header"><br>        <h1>&#123;&#123; heading &#125;&#125;</h1><br>        </div><br>    &#123;% endif %&#125;</p>
<p><ol class="breadcrumb"></ol></p>
<p><li><a href="&#123;% url 'cms-home' %&#125;">首页</a> </li></p>
<p><li><a href="&#123;&#123; cur_category.get_absolute_url &#125;&#125;">&#123;&#123; cur_category &#125;&#125;</a> </li><br></p>
<p><div class="page"><br>    <ul><br>        &#123;% for article in article_list %&#125;<br>            <li><a href="&#123;&#123; article.get_absolute_url &#125;&#125;">&#123;&#123; article.title &#125;&#125;</a> </li><br>        &#123;% endfor %&#125;<br>    </ul><br></div><br>&#123;% endblock %&#125;</p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发LiveBlog]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91LiveBlog.html</url>
      <content type="html"><![CDATA[<p>Django 1.8.3</p>
<p>##项目级</p>
<p>###settings.py<br>STATICFILES_DIRS = (<br>    os.path.join(BASE_DIR, “static”),<br>)</p>
<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>from django.conf.urls import include, url<br>from django.contrib import admin</p>
<p>from liveupdate.views import *</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls)),<br>    url(r’^$’, ObjectList.as_view()),<br>    url(r’^update-after/(?P<id>\d+)/$’, update_after)<br>]</id></p>
<p>##App级</p>
<h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><p>from django.db import models</p>
<p>class Update(models.Model):<br>    timestamp = models.DateTimeField(auto_now_add=True)<br>    text = models.TextField()</p>
<pre><code>class Meta:
    ordering = [&apos;-id&apos;]

def __unicode__(self):
    return &quot;[%s] %s&quot; % (
        self.timestamp.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;),
        self.text
    )
</code></pre><h3 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h3><p>from django.contrib import admin<br>from .models import Update</p>
<p>admin.site.register(Update)</p>
<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>from django.http import HttpResponse<br>from django.core import serializers<br>from django.views.generic import ListView</p>
<p>from liveupdate.models import Update<br>from django.shortcuts import render</p>
<p>object_list = Update.objects.all()</p>
<p>class ObjectList(ListView):<br>    model = Update<br>    template_name = ‘liveupdate/update_list.html’<br>    context_object_name = ‘object_list’</p>
<pre><code>def get_context_data(self, **kwargs):
    item_list = super(ObjectList, self).get_context_data(**kwargs)
    return item_list
</code></pre><p>def update_after(request, id):<br>    response = HttpResponse()<br>    response[‘Content-Type’] = “text/javascript”<br>    response.write(serializers.serialize(“json”,<br>                                         Update.objects.filter(pk__gt=id)))<br>    return response</p>
<h2 id="App-Templates-App"><a href="#App-Templates-App" class="headerlink" title="App/Templates/App/"></a>App/Templates/App/</h2><h3 id="update-list-html"><a href="#update-list-html" class="headerlink" title="update_list.html"></a>update_list.html</h3><p>&lt;!DOCTYPE HTML&gt;</p>
<html><br><head><br>    &#123;% load staticfiles %&#125;<br>    <title>Live Update</title><br>    <style type="text/css"><br>        body &#123;<br>            margin: 30px;<br>            font-family: Arial;<br>            background: #fff;<br>        &#125;<br>        h1 &#123; background: #ccf; padding:20px; &#125;<br>        div.update &#123; width:100%; padding: 5px; &#125;<br>            div.even &#123; background: #ddd; &#125;<br>        div.timestamp &#123; float: left; font-weight: bold; &#125;<br>        div.text &#123; float: left; padding-left: 10px; &#125;<br>        div.clear &#123; clear: both; height: 1px; &#125;<br>    </style><br></head><br><body><br>    <h1>Welcome to the Live Update!</h1><br>    <p>This site will automatically refresh itself every minute with new content -<br>    Please <b>do not</b> reload the page!</p><br>    &#123;% if not objects_list %&#125;<br>        <div id="update-holder"><br>            &#123;% for object in object_list %&#125;<br>            <div class="update &#123;% cycle even,odd %&#125;" id="&#123;&#123; object.id &#125;&#125;"><br>                <div class="timestamp"><br>                    &#123;&#123; object.timestamp|date:”Y-m-d H:i:s”&#125;&#125;<br>                </div><br>                <div class="text"><br>                    &#123;&#123; object.text | linebreaksbr &#125;&#125;<br>                </div><br>                <br><br>                <div class="clear"></div><br>            </div><br>            &#123;% endfor %&#125;<br>        </div><br>    &#123;% else %&#125;<br>        <p>No updates yet - please check back later!</p><br>    &#123;% endif %&#125;<br>    <script type="text/javascript" language="JavaScript" src="&#123;% static 'js/jquery.min.js' %&#125;"></script><br>    <script type="text/javascript" language="JavaScript"><br>        function update()&#123;<br>            update_holder = $(“#update-holder”);<br>            most_recent = update_holder.find(“div:first”);<br>            $.getJSON(“/update-after/“ + most_recent.attr(‘id’) + “/“,<br>                function(data)&#123;<br>                    cycle_class = most_recent.hasClass(“odd”)<br>                        ? “even” :　“odd”;<br>                    jQuery.each(data,function()&#123;<br>                        update_holder.prepend(‘&lt;div id=”‘ + this.pk<br>                            + ‘“ class=”update”‘ + cycle_class<br>                            + ‘“&gt;<div class="timestamp">‘<br>                            + this.fields.timestamp<br>                            + ‘</div><div class="text">‘<br>                            + this.fields.text<br>                            + ‘</div><div class="clear"></div></div>‘<br>                        );<br>                        cycle_class = (cycle_class == “odd”)<br>                            ? “even” : “odd”;<br>                    &#125;);<br>                &#125;<br>            );<br>        &#125;<br>        $(document).ready(function()&#123;<br>            setInterval(“update()”,1000)<br>        &#125;)<br>    </script><br></body><br></html>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发相册系统]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91%E7%9B%B8%E5%86%8C%E7%B3%BB%E7%BB%9F.html</url>
      <content type="html"><![CDATA[<h2 id="项目级"><a href="#项目级" class="headerlink" title="项目级"></a>项目级</h2><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h3><p>MEDIA_ROOT = os.path.join(BASE_DIR, ‘media’).replace(‘\‘, ‘/‘)</p>
<h1 id="DRY-do-not-repeat-yourself-URL"><a href="#DRY-do-not-repeat-yourself-URL" class="headerlink" title="DRY(do not repeat yourself) URL"></a>DRY(do not repeat yourself) URL</h1><p>ROOT_URL = ‘/gallery/‘<br>LOGIN_URL = ROOT_URL + ‘login/‘<br>MEDIA_URL = ROOT_URL + ‘media/‘<br>ADMIN_MEDIA_PREFIX = MEDIA_ROOT + ‘admin/‘</p>
<p>###urls.py<br>from django.conf.urls import include, url, patterns<br>from book_gallery.settings import ROOT_URL</p>
<p>urlpatterns = [<br>    url(r’^%s’ % ROOT_URL[1:], include(‘book_gallery.real_urls’)),<br>]</p>
<h3 id="real-urls-py"><a href="#real-urls-py" class="headerlink" title="real_urls.py"></a>real_urls.py</h3><p>from django.conf.urls import patterns, include, url<br>from django.contrib import admin<br>from book_gallery.settings import ROOT_URL<br>def root_url_processor(request):<br>    return &#123;’ROOT_URL’: ROOT_URL&#125;<br>urlpatterns = patterns(‘’,<br>                       url(r’^admin/‘, include(admin.site.urls), name=admin),<br>                       url(r’^’, include(‘gallery.urls’)),<br>                       )</p>
<h2 id="应用级"><a href="#应用级" class="headerlink" title="应用级"></a>应用级</h2><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>from django.conf.urls import patterns, include, url<br>from book_gallery import settings<br>from django.contrib import admin<br>from gallery.views import index, ItemList, ItemDetail, PhotosDetail<br>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls), name=’admin’),<br>   url(r’^$’, index, name=’index’),<br>   url(r’items/$’, ItemList.as_view(), name=’item_list’),<br>   url(r’items/(?P<object_id>\d+)/$’, ItemDetail.as_view(), name=’item_detail’),<br>   url(r’photos/(?P<object_id>\d+)/$’, PhotosDetail.as_view(), name=’photos_detail’),<br>    url(r’^media/(?P<path></path>.*)$’, ‘django.views.static.serve’, &#123;’document_root’: settings.MEDIA_ROOT&#125;),<br>]</object_id></object_id></p>
<h3 id="fields-py"><a href="#fields-py" class="headerlink" title="fields.py"></a>fields.py</h3><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding:utf-8"></a>coding:utf-8</h1><p>from django.db.models.fields.files import ImageField, ImageFieldFile<br>from PIL import Image  # PIL: Python Image Library<br>import os<br>def _add_thumb(s):<br>    “””<br>    Modifies a string(filename, URL) containing an image filename to insert<br>    ‘.thumb’ before the file extension (which is changed to be ‘.jpg’<br>    “””<br>    parts = s.split(“.”)<br>    parts.insert(-1, “thumb”)<br>    if parts[-1].lower() not in [‘jpg’, ‘jpeg’]:<br>        parts[-1] = ‘jpg’<br>    return “.”.join(parts)  # join()用法 ‘sep’.join(seq)<br>class ThumbnailImageFieldFile(ImageFieldFile):<br>    def _get_thumb_path(self):<br>        return _add_thumb(self.path)<br>    thumb_path = property(_get_thumb_path)<br>    def _get_thumb_url(self):<br>        return _add_thumb(self.url)<br>    thumb_url = property(_get_thumb_url)<br>    def save(self, name, content, save=True):<br>        super(ThumbnailImageFieldFile, self).save(name, content, save)<br>        img = Image.open(self.path)<br>        img.thumbnail(<br>            (self.field.thumb_width, self.field.thumb_height),<br>            Image.ANTIALIAS<br>        )<br>        img.save(self.thumb_path, “JPEG”)<br>    def delete(self, save=True):<br>        if os.path.exists(self.thumb_path):<br>            os.remove(self.thumb_path)<br>        super(ThumbnailImageFieldFile, self).delete(save)  # 删除原图<br>class ThumbnailImageFiled(ImageField):<br>    attr_class = ThumbnailImageFieldFile<br>    def <strong>init</strong>(self, thumb_width=400, thumb_height=320, <em>args, **kwargs):<br>        self.thumb_width = thumb_width<br>        self.thumb_height = thumb_height<br>        super(ThumbnailImageFiled, self).<strong>init</strong>(</em>args, **kwargs)</p>
<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="coding:utf-8"></a>coding:utf-8</h1><p>from django.shortcuts import render, render_to_response<br>from django.views.generic import ListView, DetailView<br>from .models import Item, Photo</p>
<p>def index(request):<br>    return render_to_response(“gallery/index.html”)</p>
<p>class ItemList(ListView):<br>    model = Item  # 默认取Item中全部数据<br>    context_object_name = ‘item_list’  # 模板中使用的变量<br>    template_name = ‘gallery/items_list.html’</p>
<pre><code>def get_context_data(self, **kwargs):  # 必须要有，不然无返回数据，可以在模型基础上新增返回数据
    item_list = super(ItemList, self).get_context_data(**kwargs)
    return item_list
</code></pre><p>class ItemDetail(DetailView):<br>    model = Item<br>    context_object_name = ‘item’<br>    template_name = ‘gallery/items_detail.html’<br>    pk_url_kwarg = ‘object_id’  # 必须添加</p>
<pre><code>def get_context_data(self, **kwargs):  # 必须要有，不然无返回数据，可以在模型基础上新增返回数据
    item_detail = super(ItemDetail, self).get_context_data(**kwargs)
    return item_detail
</code></pre><p>class PhotosDetail(DetailView):<br>    model = Photo<br>    context_object_name = ‘photo’<br>    template_name = ‘gallery/photos_detail.html’<br>    pk_url_kwarg = ‘object_id’</p>
<pre><code>def get_context_data(self, **kwargs):  # 必须要有，不然无返回数据，可以在模型基础上新增返回数据
    photos_detail = super(PhotosDetail, self).get_context_data(**kwargs)
    return photos_detail
</code></pre><h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><p>from django.db import models<br>from django.db.models import permalink<br>from gallery.fields import ThumbnailImageFiled</p>
<p>class Item(models.Model):<br>    name = models.CharField(max_length=250)<br>    description = models.TextField()</p>
<pre><code>class Meta:
    ordering = [&apos;name&apos;]

def __unicode__(self):
    return self.name

@models.permalink
def get_absolute_url(self):
    return &apos;item_detail&apos;, None, &amp;#123;&apos;object_id&apos;: self.id&amp;#125;
</code></pre><p>class Photo(models.Model):<br>    item = models.ForeignKey(Item)<br>    title = models.CharField(max_length=100)</p>
<pre><code># image = models.ImageField(upload_to=&apos;photos&apos;)
image = ThumbnailImageFiled(upload_to=&apos;photos&apos;)
caption = models.CharField(max_length=250, blank=True)

class Meta:
    ordering = [&apos;title&apos;]

def __unicode__(self):
    return self.title

@permalink
def get_absolute_url(self):
    return &apos;photo_detail&apos;, None, &amp;#123;&apos;object_id&apos;: self.id&amp;#125;
</code></pre><h3 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h3><p>from django.contrib import admin<br>from models import Photo, Item</p>
<p>class PhotoInline(admin.TabularInline):  # admin.StackedInline<br>    model = Photo</p>
<p>class ItemAdmin(admin.ModelAdmin):<br>    inlines = [PhotoInline]</p>
<p>admin.site.register(Item, ItemAdmin)<br>admin.site.register(Photo)</p>
<h2 id="app-templates-app"><a href="#app-templates-app" class="headerlink" title="app/templates/app/"></a>app/templates/app/</h2><h3 id="base-html"><a href="#base-html" class="headerlink" title="base.html"></a>base.html</h3><p>&lt;!DOCTYPE html&gt;</p>
<p><html lang="en"></html></p>
<p><head><br>    <meta charset="UTF-8"><br>    <title>&#123;% block title %&#125;&#123;% endblock %&#125;</title><br>    &#123;% load static %&#125;<br>    <link rel="stylesheet" type="text/css" href="&#123;% static 'gallery/css/bootstrap.min.css' %&#125;"><br></head></p>
<p><body><br>&#123;% block header %&#125;<br>    <div class="container-fluid"><br>        <nav class="navbar navbar-default bg-primary navbar-static-top"><br>            <div class="navbar-header"><br>                <div class="navbar-brand">Gallery</div><br>            </div><br>            <ul class="nav navbar-nav nav-pills"><br>                <li><a href="&#123;% url 'index' %&#125;">Home</a></li><br>                <li><a href="&#123;% url 'index' %&#125;">Gallery</a></li><br>                <li><a href="#">Blog</a></li><br>            </ul><br>            <form class="navbar-form navbar-right" style="margin-right: 10px;"><br>                <div class="form-group"><br>                    <a type="button" class="btn btn-primary" href="admin/">Login</a><br>                </div><br>            </form><br>        </nav><br>    </div><br>&#123;% endblock %&#125;</body></p>
<p><div class="container-fluid"><br>    &#123;% block content %&#125;&#123;% endblock %&#125;<br></div><br>&#123;% block footer %&#125;<br>    <div class="container-fluid"><br>        <div class="navbar"><br>            <ul class="nav navbar-nav nav-pills"><br>                <li><a href="&#123;% url 'index' %&#125;">Home</a></li><br>                <li><a href="&#123;% url 'index' %&#125;">Gallery</a></li><br>                <li><a href="#">Blog</a></li><br>            </ul><br>        </div><br>    </div><br>    <script src="&#123;% static 'gallery/js/jquery.min.js' %&#125;"></script><br>    <script src="&#123;% static 'gallery/js/bootstrap.min.js' %&#125;"></script><br>&#123;% endblock %&#125;<br><br></p>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>&#123;% extends ‘gallery/base.html’ %&#125;<br>&#123;% block title %&#125;Home&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    </p><h1><a href="&#123;% url 'item_list' %&#125;">ItemList</a> </h1><br>&#123;% endblock %&#125;<p></p>
<h3 id="items-list-html"><a href="#items-list-html" class="headerlink" title="items_list.html"></a>items_list.html</h3><p>&#123;% extends ‘gallery/base.html’ %&#125;<br>&#123;% block title %&#125;Home&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    <div class="page-header"><h1>Showcase</h1></div><br>    <div class="row"><br>        &#123;% for item in item_list|slice:”:4” %&#125;<br>            <div class="col-sm-6 col-md-3"><br>                <div class="thumbnail"><br>                    &#123;% if item.photo_set.count %&#125;<br>                        <img src="&#123;&#123; item.photo_set.all.0.image.thumb_url &#125;&#125;" alt="..."><br>                    &#123;% else %&#125;<br>                        <span>No photos (yet)</span><br>                    &#123;% endif %&#125;<br>                    <div class="caption"><br>                        <h3><a href="&#123;&#123; item.get_absolute_url &#125;&#125;">&#123;&#123; item.name &#125;&#125;</a></h3><br>                        <p>&#123;&#123; item.description &#125;&#125;</p><br>                        <p><a href="&#123;&#123; item.get_absolute_url &#125;&#125;" class="btn btn-primary">View Detail</a></p><br>                    </div><br>                </div><br>            </div><br>        &#123;% endfor %&#125;<br>    </div><br>&#123;% endblock %&#125;</p>
<h3 id="items-detail-html"><a href="#items-detail-html" class="headerlink" title="items_detail.html"></a>items_detail.html</h3><p>&#123;% extends ‘gallery/base.html’ %&#125;<br>&#123;% block title %&#125;Home&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    <div class="page-header"><h1>&#123;&#123; item.name &#125;&#125;</h1></div><br>    &#123;% for photo in item.photo_set.all %&#125;<br>        <div class="col-sm-6 col-md-3"><br>            <div class="thumbnail"><br>                <img src="&#123;&#123; photo.image.thumb_url &#125;&#125;" alt="..."><br>                <div class="caption"><br>                    <h3><a href="#">&#123;&#123; photo.title &#125;&#125;</a></h3><br>                    <p>&#123;&#123; photo.caption &#125;&#125;</p><br>                    <p><a href="&#123;% url 'photos_detail' photo.id %&#125;" type="button" class="btn btn-primary">Photo<br>                        Detail</a></p><br>                </div><br>            </div><br>        </div><br>    &#123;% endfor %&#125;<br>&#123;% endblock %&#125;</p>
<h3 id="photos-detail-html"><a href="#photos-detail-html" class="headerlink" title="photos_detail.html"></a>photos_detail.html</h3><p>&#123;% extends ‘gallery/base.html’ %&#125;<br>&#123;% block title %&#125;Home&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    <div class="page-header"><h1>&#123;&#123; photo.title &#125;&#125;</h1></div><br>    </p><h3><a href="#">&#123;&#123; photo.caption &#125;&#125;</a></h3><br>    <img src="&#123;&#123; photo.image.url &#125;&#125;" alt="..."><br>    <br>&#123;% endblock %&#125;<p></p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask+Wrk+Nmon+pyNmonAnalyzer开发性能测试平台]]></title>
      <url>/2018/02/01/Flask-Wrk-Nmon-pyNmonAnalyzer%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0.html</url>
      <content type="html"><![CDATA[<h1 id="perf-py"><a href="#perf-py" class="headerlink" title="perf.py"></a>perf.py</h1><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding:utf-8"></a>coding:utf-8</h1><p>from flask import Flask, render_template, request, redirect, url_for<br>import subprocess<br>from time import sleep<br>app = Flask(<strong>name</strong>)<br>@ app.route(“/“)<br>def index():<br>    return render_template(‘index.html’)<br>@ app.route(“/wrk”, methods=[“GET”, “POST”])<br>def perf():<br>    global result<br>    result = ‘’<br>    if request.method == “POST”:<br>        method = request.form[“methods”]<br>        connection = request.form[“connection”]<br>        url = request.form[“url”]<br>        c = request.form[“c”]<br>        t = request.form[“t”]<br>        d = request.form[“d”]<br>        subprocess.Popen(“nmon -s 1 -c %s -F report.nmon” % str(int(d)+2),shell=True, stdout=subprocess.PIPE)<br>        subprocess.Popen(“wrk -c %s -t %s -d %s -H ‘%s’–latency %s://%s &gt; wrk.log” % (c, t, d, connection, method, url),<br>                         shell=True, stdout=subprocess.PIPE)<br>        sleep(int(d)+2)<br>    with open(“wrk.log”,’r’) as f:<br>        result = f.read().replace(‘\n’,’<br>‘)<br>    subprocess.Popen(“pyNmonAnalyzer -b -t static -x -o static/report -i report.nmon”, shell=True,stdout=subprocess.PIPE)</p>
<pre><code>return render_template(&quot;wrk.html&quot;, result=result)
</code></pre><p>@ app.route(“/nmon”)<br>def nmon():<br>    return render_template(“nmon.html”)<br>@ app.route(“/report”)<br>def report():<br>    return render_template(“report.html”)<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    app.run(“0.0.0.0”)</p>
<h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h1><p>&lt;!DOCTYPE html&gt;</p>
<html lang="en"><br><head><br>    <meta charset="UTF-8"><br>    <title>Performance Test</title><br>    <link rel="stylesheet" type="text/css" href="../static/css/bootstrap.min.css"><br></head><br><body><br><div class="container"><br>    <nav class="navbar navbar-default"><br>        <div class="navbar-heading"><br>            <div class="navbar-brand"><a href="#">PerfTestFlat</a></div><br>        </div><br>        <ul class="nav navbar-nav"><br>            <li class="active"><a href="./">Home</a></li><br>            <li><a href="./wrk">Wrk</a></li><br>            <li><a href="./nmon">Nmon</a></li><br>            <li><a href="./report">Report</a></li><br>        </ul><br>    </nav><br>    <div class="page-header"><h1>Welcome</h1></div><br>    </div><br><br></body><br></html>

<p>#nmon.html<br>&lt;!DOCTYPE html&gt;</p>
<html lang="en"><br><head><br>    <meta charset="UTF-8"><br>    <title>Nmon</title><br>    <link rel="stylesheet" type="text/css" href="../static/css/bootstrap.min.css"><br></head><br><body><br><div class="container"><br>    <nav class="navbar navbar-default"><br>        <div class="navbar-heading"><br>            <div class="navbar-brand"><a href="#">PerfTestFlat</a></div><br>        </div><br>        <ul class="nav navbar-nav"><br>            <li><a href="./">Home</a></li><br>            <li><a href="./wrk">Wrk</a></li><br>            <li class="active"><a href="./Nmon">Nmon</a></li><br>            <li><a href="./report">Report</a></li><br>        </ul><br>    </nav><br></div><br></body><br></html>

<h1 id="report-html"><a href="#report-html" class="headerlink" title="report.html"></a>report.html</h1><p>&lt;!DOCTYPE html&gt;</p>
<html lang="en"><br><head><br>    <meta charset="UTF-8"><br>    <title>Report</title><br>    <link rel="stylesheet" type="text/css" href="../static/css/bootstrap.min.css"><br></head><br><body><br><div class="container"><br>    <nav class="navbar navbar-default"><br>        <div class="navbar-heading"><br>            <div class="navbar-brand"><a href="#">PerfTestFlat</a></div><br>        </div><br>        <ul class="nav navbar-nav"><br>            <li><a href="./">Home</a></li><br>            <li><a href="./wrk">Wrk</a></li><br>            <li><a href="./nmon">Nmon</a></li><br>            <li class="active"><a href="./report">Report</a></li><br>        </ul><br>    </nav><br>    <div class="page-header"><h1>Report</h1></div><br>    <div class="panel"><img src="&#123;&#123; url_for('static', filename='report/img/CPU_vs_Time.png') &#125;&#125;"></div><br>    <div class="panel"><img src="&#123;&#123; url_for('static', filename='report/img/Disk_Busy_vs_Time.png') &#125;&#125;"></div><br>    <div class="panel"><img src="&#123;&#123; url_for('static', filename='report/img/Memory_vs_Time.png') &#125;&#125;"></div><br></div><br></body><br></html>

<p>#result.html<br>&lt;!DOCTYPE html&gt;</p>
<html lang="en"><br><head><br>    <meta charset="UTF-8"><br>    <title>Result</title><br>    <link rel="stylesheet" type="text/css" href="../static/css/bootstrap.min.css"><br></head><br><body><br><div class="container"><br>    <nav class="navbar navbar-default"><br>        <div class="navbar-heading"><br>            <div class="navbar-brand"><a href="#">PerfTestFlat</a></div><br>        </div><br>        <ul class="nav navbar-nav"><br>            <li class="active"><a href="#">Home</a></li><br>            <li><a href="#">Test</a></li><br>            <li><a href="#">Report</a></li><br>            <li><a href="#">Nmon</a></li><br>        </ul><br>    </nav><br>    <div class="page-header"><h1>Result</h1></div><br></div><br></body><br></html><br>#wrk.html<br>&lt;!DOCTYPE html&gt;<br><html lang="en"><br><head><br>    <meta charset="UTF-8"><br>    <title>Performance Test</title><br>    <link rel="stylesheet" type="text/css" href="../static/css/bootstrap.min.css"><br></head><br><body><br><div class="container"><br>    <nav class="navbar navbar-default"><br>        <div class="navbar-heading"><br>            <div class="navbar-brand"><a href="#">PerfTestFlat</a></div><br>        </div><br>        <ul class="nav navbar-nav"><br>            <li><a href="./">Home</a></li><br>            <li class="active"><a href="./wrk">Wrk</a></li><br>            <li><a href="./nmon">Nmon</a></li><br>            <li><a href="./report">Report</a></li><br>        </ul><br>    </nav><br>    <div class="page-header"><h1>Performance Test</h1></div><br>    <div class="col-md-4 col-sm-6" style="padding-left: 0px;"><br>        <div class="panel panel-primary"><br>            <div class="panel-heading"><br>                <div class="panel-title">Wrk</div><br>            </div><br>            <div class="panel-body"><br>                <form class="form" action="" method="post"><br>                    <div class="form-group"><br>                        <label>Method:</label><br>                        <select name="methods" class="form-control"><br>                            <option label="http" value="http">http</option><br>                            <option label="https" value="https">https</option><br>                        </select></div><br>                    <div class="form-group"><br>                        <label>Connection:</label><br>                        <select name="connection" class="form-control"><br>                            <option value="keep-alive">keep-alive</option><br>                            <option value="close">close</option><br>                        </select><br>                    </div><br>                    <div class="form-group"><br>                        <div class="input-group"><br>                            <span class="input-group-addon">Url:</span><br>                            <input type="text" class="form-control" name="url"><br>                        </div><br>                    </div><br>                    <div class="form-group"><br>                        <div class="input-group"><br>                            <span class="input-group-addon">C:</span><br>                            <input type="text" class="form-control" name="c"><br>                        </div><br>                    </div><br>                    <div class="form-group"><br>                        <div class="input-group"><br>                            <span class="input-group-addon">T:</span><br>                            <input type="text" class="form-control" name="t"><br>                        </div><br>                    </div><br>                    <div class="form-group"><br>                        <div class="input-group"><br>                            <span class="input-group-addon">D:</span><br>                            <input type="text" class="form-control" name="d"><br>                        </div><br>                    </div><br>                    <div class="form-group"><br>                        <button type="submit" class="btn btn-primary">submit</button><br>                    </div><br>                </form><br>            </div><br>            <div class="panel-footer">by Hanzhichao</div><br>        </div><br>    </div><br>    <div class="col-md-8 col-sm-6" style="padding-right: 0px"><br>        <div class="panel panel-primary"><br>            <div class="panel-heading"><div class="panel-title">Wrk Result</div></div><br>            <div class="panel-body">&#123;&#123; result|safe  &#125;&#125;</div><br>            <div class="panel-footer">by Hanzhichao</div><br>        </div><br>    </div><br></div><br></body><br></html>

]]></content>
      
        
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发博客系统-版本一]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F-%E7%89%88%E6%9C%AC%E4%B8%80.html</url>
      <content type="html"><![CDATA[<h1 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h1><p>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, “static”),<br>]<br>AUTH_USER_MODEL = ‘blog.User’</p>
<h1 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h1><p>from django.conf.urls import include, url<br>from django.contrib import admin</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls)),<br>    url(r’^blog/‘, include(‘blog.urls’, namespace=’blog’)),</p>
<p>]</p>
<h1 id="blog-models-py"><a href="#blog-models-py" class="headerlink" title="blog/models.py"></a>blog/models.py</h1><h1 id="coding-utf8"><a href="#coding-utf8" class="headerlink" title="coding:utf8"></a>coding:utf8</h1><p>from django.db import models<br>from django.contrib.auth.models import AbstractUser</p>
<p>class Category(models.Model):<br>    names = models.CharField(‘类型名称’, max_length=20)<br>    desc = models.TextField(‘分类描述’, blank=True, null=True)</p>
<pre><code>def __unicode__(self):
    return self.names
</code></pre><p>class User(AbstractUser):<br>    pass</p>
<p>class Post(models.Model):<br>    POST_STATUS =(<br>        (‘P’, ‘已发布’),<br>        (‘D’, ‘已删除’),<br>        (‘E’, ‘编辑中’)<br>    )</p>
<pre><code>title = models.CharField(&apos;标题&apos;, max_length=150)
body = models.TextField(&apos;正文&apos;)
create_time = models.DateTimeField(&apos;创建时间&apos;, auto_now_add=True)
modify_time = models.DateTimeField(&apos;最后一次修改&apos;, auto_now=True)
status = models.CharField(&apos;文章状态&apos;, max_length=1, choices=POST_STATUS)
views = models.PositiveIntegerField(&apos;浏览量&apos;, default=0)
likes = models.PositiveIntegerField(&apos;喜欢&apos;, default=0)
praises = models.PositiveIntegerField(&apos;点赞&apos;, default=0)
category = models.ManyToManyField(&apos;Category&apos;, blank=True)
user = models.ForeignKey(&apos;User&apos;, verbose_name=&apos;作者&apos;)

def __unicode__(self):
    return self.title

class Meta:
    ordering = (&apos;-create_time&apos;,)
</code></pre><p>class BlogComment(models.Model):<br>    user = models.ForeignKey(‘User’, verbose_name=’用户’)<br>    post = models.ForeignKey(‘Post’,verbose_name=’文章’)<br>    comment = models.TextField(‘评论内容’, blank=True)<br>    comment_time = models.DateTimeField(‘评论时间’, auto_now_add=True)</p>
<pre><code>class Meta:
    ordering = (&apos;-comment_time&apos;,)
</code></pre><h1 id="blog-admin-py"><a href="#blog-admin-py" class="headerlink" title="blog/admin.py"></a>blog/admin.py</h1><p>from django.contrib import admin<br>from django.contrib.auth.admin import UserAdmin<br>from blog.models import Post, Category, BlogComment, User</p>
<p>class BlogUserAdmin(UserAdmin):<br>    pass</p>
<p>class BlogAdmin(admin.ModelAdmin):<br>    list_display = (‘title’, ‘create_time’)</p>
<p>admin.site.register(Post, BlogAdmin)<br>admin.site.register(Category)<br>admin.site.register(BlogComment)<br>admin.site.register(User, BlogUserAdmin)</p>
<h1 id="blog-views-py"><a href="#blog-views-py" class="headerlink" title="blog/views.py"></a>blog/views.py</h1><p>from django.shortcuts import render, render_to_response, get_object_or_404<br>from django.http import HttpResponse, HttpResponseRedirect<br>from django.views.decorators.csrf import csrf_exempt</p>
<h1 id="from-django-contrib-auth-models-import-User"><a href="#from-django-contrib-auth-models-import-User" class="headerlink" title="from django.contrib.auth.models import User"></a>from django.contrib.auth.models import User</h1><p>from django.contrib import auth<br>from django.contrib.auth import get_user_model<br>import json<br>from blog.models import *</p>
<p>User = get_user_model()</p>
<p>def index(request):<br>    categories = Category.objects.all()<br>    articles = Post.objects.all()<br>    return render_to_response(‘blog/index.html’, locals())</p>
<p>@ csrf_exempt<br>def login(request):<br>    if request.method == “POST”:<br>        username = request.POST.get(‘username’)<br>        password = request.POST.get(‘password’)<br>        userquery = User.objects.filter(username=username)<br>        for user in userquery:<br>            if user is not None and user.check_password(password):<br>                user.backend = ‘django.contrib.auth.backends.ModelBackend’<br>                auth.login(request, user)<br>                return HttpResponseRedirect(“../“)<br>        return HttpResponse(json.dumps(&#123;’error’: ‘User not exist’&#125;))<br>    return render_to_response(“blog/login.html”)</p>
<p>def logout(request):<br>    auth.logout(request)<br>    return HttpResponseRedirect(“../“)</p>
<p>def register(request):<br>    return render_to_response(“blog/register.html”)<br>    return HttpResponseRedirect(“../“)</p>
<p>def edit(request):<br>    pass</p>
<p>def category(request, slug):<br>    cur_category = get_object_or_404(names=slug)<br>    return render_to_response()</p>
<p>def article(request, slug):<br>    pass</p>
<h1 id="blog-urls-py"><a href="#blog-urls-py" class="headerlink" title="blog/urls.py"></a>blog/urls.py</h1><p>from django.conf.urls import url<br>from blog.views import *<br>urlpatterns = [<br>    url(r’^$’, index, name=’index’),<br>    url(r’^login/$’, login, name=’login’),<br>    url(r’^logout/$’, logout, name=’logout’),<br>    url(r’^register/$’, register, name=’register’),<br>    url(r’^edit/$’, edit, name=’edit’),<br>    url(r’^category/(?P<slug>[-\w]+)/$’, category, name=’category’),<br>    url(r’^article/(?P<slug>[-\w]+)/$’, article, name=’category’),<br>]</slug></slug></p>
<h1 id="base-html"><a href="#base-html" class="headerlink" title="base.html"></a>base.html</h1><p>&lt;!DOCTYPE html&gt;</p>
<p><html lang="en"></html></p>
<p><head><br>    <meta charset="UTF-8"><br>    <title>&#123;% block title %&#125;&#123;% endblock %&#125;</title><br>    &#123;% load static %&#125;<br>    <link rel="stylesheet" type="text/css" href="&#123;% static 'blog/css/bootstrap.min.css' %&#125;"><br>    <script type="text/javascript" src="&#123;% static 'blog/js/jquery.min.js' %&#125;"></script><br>    <script type="text/javascript" src="&#123;% static 'blog/js/bootstrap.min.js' %&#125;"></script><br></head></p>
<p><body><br>&#123;% block header %&#125;<br>    <div class="navbar navbar-default"><br>        <div class="container-fluid"><br>            <div class="nav-header"><br>                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse" aria-expanded="false"><br>                </button><br>                <div class="navbar-brand"><br>                    <a href="&#123;% url 'blog:index' %&#125;">StudyBlog</a><br>                </div><br>            </div><br>            <div class="collapse navbar-collapse" id="navbar-collapse"><br>                <nav class="nav navbar-nav"><br>                    <li class="active"><a href="#">发现</a></li><br>                    <li><a href="#">关注</a></li><br>                    <li><a href="#">消息</a></li><br>                </nav><br>                <form class="navbar-form navbar-left"><br>                    <div class="form-group"><br>                        <input type="text" class="form-control" placeholder="搜索..."><br>                    </div><br>                    <button type="submit" class="btn btn-default">搜索</button><br>                </form><br>                <div &#123;%="" if="" request.user.is_authenticated="" %&#125;="" style="display:none" endif=""><br>                    <form class="navbar-form navbar-right"><br>                        <a class="btn btn-primary" href="&#123;% url 'blog:login' %&#125;">登录</a><br>                        <a class="btn btn-primary" href="&#123;% url 'blog:register' %&#125;">注册</a><br>                    </form><br>                </div><br>                <div &#123;%="" if="" not="" request.user.is_authenticated="" %&#125;="" style="display: none" endif=""><br>                    <form class="navbar-form navbar-right"><br>                        <a class="btn btn-primary" href="&#123;% url 'blog:edit' %&#125;">写文章</a><br>                    </form><br>                    <ul class="nav navbar-nav navbar-right"><br>                        <li class="dropdown"><br>                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">&#123;&#123; request.user.username &#125;&#125;<span class="caret"></span></a><br>                        <ul class="dropdown-menu"><br>                            <li><a class="item" href="#">我的主页</a></li><br>                            <li><a class="item" href="#">我的评论</a></li><br>                            <li><a class="item" href="&#123;% url 'blog:logout' %&#125;">退出</a></li><br>                        </ul><br>                        </li><li><br>                        </li><br>                    </ul><br>                </div><br>            </div><br>        </div><br>    </div><br>&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>&#123;% endblock %&#125;</body></p>
<p><footer><br>    &#123;% block footer %&#125;<br>    &#123;% endblock %&#125;<br></footer><br><br></p>
<p>#index.html<br>&#123;% extends ‘blog/base.html’ %&#125;<br>&#123;% block title %&#125;主页&#123;% endblock %&#125;<br>&#123;% block content %&#125;</p>
<p><div class="row-fluid"><br>    <div class="col-md-2"><br>        <nav class="nav nav-list"><br>            &#123;% for category in categories %&#125;<br>            <li><a href="&#123;% url 'blog:category' category.names %&#125;">&#123;&#123; category.names &#125;&#125;</a></li><br>            &#123;% endfor %&#125;<br>        </nav><br>    </div><br>    <div class="col-md-10"><br>        &#123;% for article in articles %&#125;<br>            <h1>&#123;&#123; article.title &#125;&#125;</h1><br>            &#123;&#123; article.body|safe&#125;&#125;<br>        &#123;% endfor %&#125;<br>    </div><br></div><br>&#123;% endblock %&#125;</p>
<p>#login.html<br>&#123;% extends ‘blog/base.html’ %&#125;<br>&#123;% block title %&#125;登录&#123;% endblock %&#125;<br>&#123;% block header %&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    </p><h1>&nbsp;</h1><br>    <div class="row"><br>        <div class="col-md-4 col-md-offset-4"><br>            <div class="panel panel-info"><br>                <div class="panel-heading"><br>                    <div class="panel-title"><h1>登录</h1></div><br>                    <div class="panel-body"><br>                        <form class="form" method="post"><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                    <span class="input-group-addon"><span class="glyphicon glyphicon-user"></span></span><br>                                    <input type="text" class="form-control" placeholder="用户名" aria-describedby="basic-addon1" name="username"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                    <span class="input-group-addon"><span class="glyphicon glyphicon-eye-close"></span></span><br>                                    <input type="password" class="form-control" placeholder="密码" name="password"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <button type="submit" class="btn btn-primary form-control">登录</button><br>                            </div><br>                        </form><br>                    </div><br>                    <div class="panel-footer">请登录…</div><br>                </div><br>            </div><br>        </div><br>    </div><br>&#123;% endblock %&#125;<p></p>
<p>#register.html<br>&#123;% extends ‘blog/base.html’ %&#125;<br>&#123;% block title %&#125;注册&#123;% endblock %&#125;<br>&#123;% block header %&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    </p><h1>&nbsp;</h1><br>    <div class="row"><br>        <div class="col-md-4 col-md-offset-4"><br>            <div class="panel panel-info"><br>                <div class="panel-heading"><br>                    <div class="panel-title"><h1>注册</h1></div><br>                    <div class="panel-body"><br>                        <form class="form" method="post"><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                    <span class="input-group-addon"><span class="glyphicon glyphicon-user"></span></span><br>                                    <input type="text" class="form-control" placeholder="用户名" name="username"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                <span class="input-group-addon"><span class="glyphicon glyphicon-envelope"></span></span><br>                                    <input type="email" class="form-control" placeholder="邮箱" name="email"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                <span class="input-group-addon"><span class="glyphicon glyphicon-eye-close"></span></span><br>                                    <input type="password" class="form-control" placeholder="密码" name="password"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                <span class="input-group-addon"><span class="glyphicon glyphicon-eye-close"></span></span><br>                                    <input type="password" class="form-control" placeholder="重复密码" name="repassword"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <button type="submit" class="btn btn-primary form-control">注册</button><br>                            </div><br>                        </form><br>                    </div><br>                    <div class="panel-footer">请注册…</div><br>                </div><br>            </div><br>    </div><br>&#123;% endblock %&#125;<p></p>
</div>]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发博客-版本二]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F-%E7%89%88%E6%9C%AC%E4%BA%8C.html</url>
      <content type="html"><![CDATA[<h1 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h1><p>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, “static”),<br>]<br>AUTH_USER_MODEL = ‘blog.User’</p>
<h1 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h1><p>from django.conf.urls import include, url<br>from django.contrib import admin</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls)),<br>    url(r’^blog/‘, include(‘blog.urls’, namespace=’blog’)),</p>
<p>]</p>
<h1 id="blog-models-py"><a href="#blog-models-py" class="headerlink" title="blog/models.py"></a>blog/models.py</h1><h1 id="coding-utf8"><a href="#coding-utf8" class="headerlink" title="coding:utf8"></a>coding:utf8</h1><p>from django.db import models<br>from django.contrib.auth.models import AbstractUser</p>
<p>class Category(models.Model):<br>    names = models.CharField(‘类型名称’, max_length=20)<br>    desc = models.TextField(‘分类描述’, blank=True, null=True)</p>
<pre><code>def __unicode__(self):
    return self.names
</code></pre><p>class User(AbstractUser):<br>    pass</p>
<p>class Post(models.Model):<br>    POST_STATUS =(<br>        (‘P’, ‘已发布’),<br>        (‘D’, ‘已删除’),<br>        (‘E’, ‘编辑中’)<br>    )</p>
<pre><code>title = models.CharField(&apos;标题&apos;, max_length=150)
body = models.TextField(&apos;正文&apos;)
create_time = models.DateTimeField(&apos;创建时间&apos;, auto_now_add=True)
modify_time = models.DateTimeField(&apos;最后一次修改&apos;, auto_now=True)
status = models.CharField(&apos;文章状态&apos;, max_length=1, choices=POST_STATUS)
views = models.PositiveIntegerField(&apos;浏览量&apos;, default=0)
likes = models.PositiveIntegerField(&apos;喜欢&apos;, default=0)
praises = models.PositiveIntegerField(&apos;点赞&apos;, default=0)
category = models.ManyToManyField(&apos;Category&apos;, blank=True)
user = models.ForeignKey(&apos;User&apos;, verbose_name=&apos;作者&apos;)

def __unicode__(self):
    return self.title

class Meta:
    ordering = (&apos;-create_time&apos;,)
</code></pre><p>class BlogComment(models.Model):<br>    user = models.ForeignKey(‘User’, verbose_name=’用户’)<br>    post = models.ForeignKey(‘Post’,verbose_name=’文章’)<br>    comment = models.TextField(‘评论内容’, blank=True)<br>    comment_time = models.DateTimeField(‘评论时间’, auto_now_add=True)</p>
<pre><code>class Meta:
    ordering = (&apos;-comment_time&apos;,)
</code></pre><h1 id="blog-admin-py"><a href="#blog-admin-py" class="headerlink" title="blog/admin.py"></a>blog/admin.py</h1><p>from django.contrib import admin<br>from django.contrib.auth.admin import UserAdmin<br>from blog.models import Post, Category, BlogComment, User</p>
<p>class BlogUserAdmin(UserAdmin):<br>    pass</p>
<p>class BlogAdmin(admin.ModelAdmin):<br>    list_display = (‘title’, ‘create_time’)</p>
<p>admin.site.register(Post, BlogAdmin)<br>admin.site.register(Category)<br>admin.site.register(BlogComment)<br>admin.site.register(User, BlogUserAdmin)</p>
<h1 id="blog-views-py"><a href="#blog-views-py" class="headerlink" title="blog/views.py"></a>blog/views.py</h1><p>from django.shortcuts import render, render_to_response, get_object_or_404<br>from django.http import HttpResponse, HttpResponseRedirect<br>from django.views.decorators.csrf import csrf_exempt</p>
<h1 id="from-django-contrib-auth-models-import-User"><a href="#from-django-contrib-auth-models-import-User" class="headerlink" title="from django.contrib.auth.models import User"></a>from django.contrib.auth.models import User</h1><p>from django.contrib import auth<br>from django.contrib.auth import get_user_model<br>import json<br>from blog.models import *</p>
<p>User = get_user_model()</p>
<p>def index(request):<br>    categories = Category.objects.all()<br>    articles = Post.objects.all()<br>    return render_to_response(‘blog/index.html’, locals())</p>
<p>@ csrf_exempt<br>def login(request):<br>    if request.method == “POST”:<br>        username = request.POST.get(‘username’)<br>        password = request.POST.get(‘password’)<br>        userquery = User.objects.filter(username=username)<br>        for user in userquery:<br>            if user is not None and user.check_password(password):<br>                user.backend = ‘django.contrib.auth.backends.ModelBackend’<br>                auth.login(request, user)<br>                return HttpResponseRedirect(“../“)<br>        return HttpResponse(json.dumps(&#123;’error’: ‘User not exist’&#125;))<br>    return render_to_response(“blog/login.html”)</p>
<p>def logout(request):<br>    auth.logout(request)<br>    return HttpResponseRedirect(“../“)</p>
<p>def register(request):<br>    return render_to_response(“blog/register.html”)<br>    return HttpResponseRedirect(“../“)</p>
<p>def edit(request):<br>    pass</p>
<p>def category(request, slug):<br>    cur_category = get_object_or_404(names=slug)<br>    return render_to_response()</p>
<p>def article(request, slug):<br>    pass</p>
<h1 id="blog-urls-py"><a href="#blog-urls-py" class="headerlink" title="blog/urls.py"></a>blog/urls.py</h1><p>from django.conf.urls import url<br>from blog.views import *<br>urlpatterns = [<br>    url(r’^$’, index, name=’index’),<br>    url(r’^login/$’, login, name=’login’),<br>    url(r’^logout/$’, logout, name=’logout’),<br>    url(r’^register/$’, register, name=’register’),<br>    url(r’^edit/$’, edit, name=’edit’),<br>    url(r’^category/(?P<slug>[-\w]+)/$’, category, name=’category’),<br>    url(r’^article/(?P<slug>[-\w]+)/$’, article, name=’category’),<br>]</slug></slug></p>
<h1 id="base-html"><a href="#base-html" class="headerlink" title="base.html"></a>base.html</h1><p>&lt;!DOCTYPE html&gt;</p>
<p><html lang="en"></html></p>
<p><head><br>    <meta charset="UTF-8"><br>    <title>&#123;% block title %&#125;&#123;% endblock %&#125;</title><br>    &#123;% load static %&#125;<br>    <link rel="stylesheet" type="text/css" href="&#123;% static 'blog/css/bootstrap.min.css' %&#125;"><br>    <script type="text/javascript" src="&#123;% static 'blog/js/jquery.min.js' %&#125;"></script><br>    <script type="text/javascript" src="&#123;% static 'blog/js/bootstrap.min.js' %&#125;"></script><br></head></p>
<p><body><br>&#123;% block header %&#125;<br>    <div class="navbar navbar-default"><br>        <div class="container-fluid"><br>            <div class="nav-header"><br>                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse" aria-expanded="false"><br>                </button><br>                <div class="navbar-brand"><br>                    <a href="&#123;% url 'blog:index' %&#125;">StudyBlog</a><br>                </div><br>            </div><br>            <div class="collapse navbar-collapse" id="navbar-collapse"><br>                <nav class="nav navbar-nav"><br>                    <li class="active"><a href="#">发现</a></li><br>                    <li><a href="#">关注</a></li><br>                    <li><a href="#">消息</a></li><br>                </nav><br>                <form class="navbar-form navbar-left"><br>                    <div class="form-group"><br>                        <input type="text" class="form-control" placeholder="搜索..."><br>                    </div><br>                    <button type="submit" class="btn btn-default">搜索</button><br>                </form><br>                <div &#123;%="" if="" request.user.is_authenticated="" %&#125;="" style="display:none" endif=""><br>                    <form class="navbar-form navbar-right"><br>                        <a class="btn btn-primary" href="&#123;% url 'blog:login' %&#125;">登录</a><br>                        <a class="btn btn-primary" href="&#123;% url 'blog:register' %&#125;">注册</a><br>                    </form><br>                </div><br>                <div &#123;%="" if="" not="" request.user.is_authenticated="" %&#125;="" style="display: none" endif=""><br>                    <form class="navbar-form navbar-right"><br>                        <a class="btn btn-primary" href="&#123;% url 'blog:edit' %&#125;">写文章</a><br>                    </form><br>                    <ul class="nav navbar-nav navbar-right"><br>                        <li class="dropdown"><br>                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">&#123;&#123; request.user.username &#125;&#125;<span class="caret"></span></a><br>                        <ul class="dropdown-menu"><br>                            <li><a class="item" href="#">我的主页</a></li><br>                            <li><a class="item" href="#">我的评论</a></li><br>                            <li><a class="item" href="&#123;% url 'blog:logout' %&#125;">退出</a></li><br>                        </ul><br>                        </li><li><br>                        </li><br>                    </ul><br>                </div><br>            </div><br>        </div><br>    </div><br>&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>&#123;% endblock %&#125;</body></p>
<p><footer><br>    &#123;% block footer %&#125;<br>    &#123;% endblock %&#125;<br></footer><br><br></p>
<p>#index.html<br>&#123;% extends ‘blog/base.html’ %&#125;<br>&#123;% block title %&#125;主页&#123;% endblock %&#125;<br>&#123;% block content %&#125;</p>
<p><div class="row-fluid"><br>    <div class="col-md-2"><br>        <nav class="nav nav-list"><br>            &#123;% for category in categories %&#125;<br>            <li><a href="&#123;% url 'blog:category' category.names %&#125;">&#123;&#123; category.names &#125;&#125;</a></li><br>            &#123;% endfor %&#125;<br>        </nav><br>    </div><br>    <div class="col-md-10"><br>        &#123;% for article in articles %&#125;<br>            <h1>&#123;&#123; article.title &#125;&#125;</h1><br>            &#123;&#123; article.body|safe&#125;&#125;<br>        &#123;% endfor %&#125;<br>    </div><br></div><br>&#123;% endblock %&#125;</p>
<p>#login.html<br>&#123;% extends ‘blog/base.html’ %&#125;<br>&#123;% block title %&#125;登录&#123;% endblock %&#125;<br>&#123;% block header %&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    </p><h1>&nbsp;</h1><br>    <div class="row"><br>        <div class="col-md-4 col-md-offset-4"><br>            <div class="panel panel-info"><br>                <div class="panel-heading"><br>                    <div class="panel-title"><h1>登录</h1></div><br>                    <div class="panel-body"><br>                        <form class="form" method="post"><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                    <span class="input-group-addon"><span class="glyphicon glyphicon-user"></span></span><br>                                    <input type="text" class="form-control" placeholder="用户名" aria-describedby="basic-addon1" name="username"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                    <span class="input-group-addon"><span class="glyphicon glyphicon-eye-close"></span></span><br>                                    <input type="password" class="form-control" placeholder="密码" name="password"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <button type="submit" class="btn btn-primary form-control">登录</button><br>                            </div><br>                        </form><br>                    </div><br>                    <div class="panel-footer">请登录…</div><br>                </div><br>            </div><br>        </div><br>    </div><br>&#123;% endblock %&#125;<p></p>
<p>#register.html<br>&#123;% extends ‘blog/base.html’ %&#125;<br>&#123;% block title %&#125;注册&#123;% endblock %&#125;<br>&#123;% block header %&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    </p><h1>&nbsp;</h1><br>    <div class="row"><br>        <div class="col-md-4 col-md-offset-4"><br>            <div class="panel panel-info"><br>                <div class="panel-heading"><br>                    <div class="panel-title"><h1>注册</h1></div><br>                    <div class="panel-body"><br>                        <form class="form" method="post"><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                    <span class="input-group-addon"><span class="glyphicon glyphicon-user"></span></span><br>                                    <input type="text" class="form-control" placeholder="用户名" name="username"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                <span class="input-group-addon"><span class="glyphicon glyphicon-envelope"></span></span><br>                                    <input type="email" class="form-control" placeholder="邮箱" name="email"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                <span class="input-group-addon"><span class="glyphicon glyphicon-eye-close"></span></span><br>                                    <input type="password" class="form-control" placeholder="密码" name="password"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <div class="input-group"><br>                                <span class="input-group-addon"><span class="glyphicon glyphicon-eye-close"></span></span><br>                                    <input type="password" class="form-control" placeholder="重复密码" name="repassword"><br>                                </div><br>                            </div><br>                            <div class="form-group"><br>                                <button type="submit" class="btn btn-primary form-control">注册</button><br>                            </div><br>                        </form><br>                    </div><br>                    <div class="panel-footer">请注册…</div><br>                </div><br>            </div><br>    </div><br>&#123;% endblock %&#125;<p></p>
</div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发简单CMS]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95CMS-%E7%89%88%E6%9C%AC%E4%B8%80.html</url>
      <content type="html"><![CDATA[<p>根据自强学堂教程编写</p>
<h1 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h1><p>Django==1.8.3<br>DjangoUeditor</p>
<h1 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h1><h2 id="A-CMS-PROJECT-by-Django"><a href="#A-CMS-PROJECT-by-Django" class="headerlink" title="A CMS PROJECT by Django"></a>A CMS PROJECT by Django</h2><p><a href="http://code.ziqiangxuetang.com/django/django-cms-develop.html" target="_blank" rel="noopener">参考教程</a></p>
<blockquote>
<p>modified DjangoUeditor/urls.py</p>
</blockquote>
<p>#coding:utf-8<br>from django import VERSION<br>if VERSION[0:2]&gt;(1,9):<br>    from django.conf.urls import url<br>elif VERSION[0:2]&gt;(1,3):<br>    from django.conf.urls import patterns, url<br>else:<br>    from django.conf.urls.defaults import patterns, url<br>from views import get_ueditor_controller<br>if VERSION[0:2]&gt;(1,9):<br>    urlpatterns = [<br>        url(r’^controller/$’,get_ueditor_controller)<br>    ]<br>else:<br>    urlpatterns = patterns(‘’,<br>        url(r’^controller/$’,get_ueditor_controller)<br>    )<br>urls.py<br>from django.conf.urls import include, url<br>from django.contrib import admin</p>
<h1 id="from-DjangoUeditor-import-urls-as-DjangoUeditor-urls"><a href="#from-DjangoUeditor-import-urls-as-DjangoUeditor-urls" class="headerlink" title="from DjangoUeditor import urls as DjangoUeditor_urls"></a>from DjangoUeditor import urls as DjangoUeditor_urls</h1><p>from django.conf import settings</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls)),<br>    url(r’^ueditor/‘, include(‘DjangoUeditor.urls’)),</p>
<pre><code># url(r&apos;ueditor/&apos;, include(DjangoUeditor_urls)),
url(r&apos;^$&apos;, &apos;cms.views.index&apos;, name=&apos;index&apos;),

url(r&apos;^column/(?P&lt;column_slug&gt;[^/]+)/$&apos;, &apos;cms.views.column_detail&apos;, name=&apos;column&apos;),
url(r&apos;^article/(?P&lt;article_slug&gt;[^/]+)/$&apos;, &apos;cms.views.article_detail&apos;, name=&apos;article&apos;),
url(r&apos;^static/(?P&lt;path&gt;.*)$&apos;, &apos; django.views.static.serve&apos;, &amp;#123;&apos;document_root&apos;: settings.STATIC_ROOT&amp;#125;),
url(r&apos;^admin/static/(?P&lt;path&gt;.*)$&apos;, &apos;django.views.static.serve&apos;,
    &amp;#123;&apos;document_root&apos;: settings.STATIC_ROOT&amp;#125;),
</code></pre><p>]<br>if settings.DEBUG:<br>    from django.conf.urls.static import static<br>    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</p>
<h1 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h1><p>INSTALLED_APPS = (<br>    ‘django.contrib.admin’,<br>    ‘django.contrib.auth’,<br>    ‘django.contrib.contenttypes’,<br>    ‘django.contrib.sessions’,<br>    ‘django.contrib.messages’,<br>    ‘django.contrib.staticfiles’,<br>    ‘DjangoUeditor’,<br>    ‘cms’,<br>)</p>
<p>TEMPLATES = [<br>    &#123;<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)],<br>        ‘APP_DIRS’: True,<br>        ‘OPTIONS’: &#123;<br>            ‘context_processors’: [<br>                ‘django.template.context_processors.debug’,<br>                ‘django.template.context_processors.request’,<br>                ‘django.contrib.auth.context_processors.auth’,<br>                ‘django.contrib.messages.context_processors.messages’,<br>            ],<br>        &#125;,<br>    &#125;,<br>]</p>
<h1 id="LANGUAGE-CODE-‘en-us’"><a href="#LANGUAGE-CODE-‘en-us’" class="headerlink" title="LANGUAGE_CODE = ‘en-us’"></a>LANGUAGE_CODE = ‘en-us’</h1><p>LANGUAGE_CODE = ‘zh-hans’</p>
<h1 id="TIME-ZONE-‘UTC’"><a href="#TIME-ZONE-‘UTC’" class="headerlink" title="TIME_ZONE = ‘UTC’"></a>TIME_ZONE = ‘UTC’</h1><p>TIME_ZONE = ‘Asia/Shanghai’</p>
<p>USE_I18N = True</p>
<p>USE_L10N = True</p>
<p>USE_TZ = True</p>
<h1 id="Static-files-CSS-JavaScript-Images"><a href="#Static-files-CSS-JavaScript-Images" class="headerlink" title="Static files (CSS, JavaScript, Images)"></a>Static files (CSS, JavaScript, Images)</h1><h1 id="https-docs-djangoproject-com-en-1-8-howto-static-files"><a href="#https-docs-djangoproject-com-en-1-8-howto-static-files" class="headerlink" title="https://docs.djangoproject.com/en/1.8/howto/static-files/"></a><a href="https://docs.djangoproject.com/en/1.8/howto/static-files/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/howto/static-files/</a></h1><h1 id="Static-files-CSS-JavaScript-Images-1"><a href="#Static-files-CSS-JavaScript-Images-1" class="headerlink" title="Static files (CSS, JavaScript, Images)"></a>Static files (CSS, JavaScript, Images)</h1><p>STATIC_URL = ‘static/‘<br>STATIC_ROOT = os.path.join(BASE_DIR, ‘static’).replace(‘\‘,’/‘)</p>
<p>#STATICFILES_DIRS =(</p>
<h1 id="os-path-join-BASE-DIR-“common-static”"><a href="#os-path-join-BASE-DIR-“common-static”" class="headerlink" title="os.path.join(BASE_DIR, “common_static”)"></a>os.path.join(BASE_DIR, “common_static”)</h1><p>#)</p>
<h1 id="upload-folder"><a href="#upload-folder" class="headerlink" title="upload folder"></a>upload folder</h1><p>MEDIA_URL = ‘/media/‘<br>MEDIA_ROOT = os.path.join(BASE_DIR, ‘media’)</p>
<p>#cms/models.py</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="* coding: utf-8 *"></a><em>*</em> coding: utf-8 <em>*</em></h1><p>from <strong>future</strong> import unicode_literals</p>
<p>from django.db import models<br>from django.utils.encoding import python_2_unicode_compatible<br>from DjangoUeditor.models import UEditorField<br>from django.core.urlresolvers import reverse</p>
<p>@python_2_unicode_compatible<br>class Column(models.Model):<br>    pre_column = models.ForeignKey(‘self’, verbose_name=’上级栏目’, blank=True, null=True)<br>    name = models.CharField(‘栏目名称’, max_length=256)<br>    slug = models.CharField(‘栏目网址’, max_length=256, db_index=True, unique=True)<br>    intro = models.TextField(‘栏目简介’, default=’’)<br>    thumbnail = models.ImageField(‘缩略图’, blank=True, null=True)</p>
<pre><code>keywords = models.CharField(&apos;关键字&apos;, max_length=80, blank=True, null=True)
description = models.TextField(&apos;描述&apos;, blank=True, null=True)

def __str__(self):
    return self.name

class Meta:
    verbose_name = &apos;栏目&apos;
    verbose_name_plural = &apos;栏目&apos;
    ordering = [&apos;name&apos;]

def get_absolute_url(self):
    return reverse(&apos;column&apos;, args=(self.slug,))
</code></pre><p>@python_2_unicode_compatible<br>class Article(models.Model):<br>    STATUS_CHOICES = (<br>        (‘d’, “Draft”),<br>        (‘p’, ‘Published’),<br>    )</p>
<pre><code>title = models.CharField(&apos;标题&apos;, max_length=256)
keywords = models.CharField(&apos;关键字&apos;, max_length=80, blank=True, null=True)
slug = models.CharField(&apos;网址&apos;, max_length=256,db_index=True, unique=True)
column = models.ForeignKey(Column, verbose_name=&apos;归属栏目&apos;)
author = models.ForeignKey(&apos;auth.User&apos;,blank=True, null=True, verbose_name=&apos;作者&apos;)
thumbnail = models.ImageField(&apos;缩略图&apos;, blank=True, null=True)

abstract = models.TextField(&apos;摘要&apos;, max_length=54, blank=True, null=True,
                            help_text=&quot;可选,若为空将摘取正文的前54个字符&quot;)
description = models.TextField(&apos;描述&apos;, blank=True, null=True)
# content = models.TextField(&quot;内容&quot;, blank=True, null=True)
content = UEditorField(&apos;内容&apos;, height=300, width=1000, default=u&apos;&apos;, blank=True,
                       imagePath=&quot;uploads/images/&quot;,
                       toolbars=&apos;besttome&apos;, filePath=&apos;uploads/files/&apos;)

created_time = models.DateTimeField(&apos;创建时间&apos;, auto_now_add=True)
last_modified_time = models.DateTimeField(&apos;修改时间&apos;, auto_now=True)
views = models.PositiveIntegerField(&apos;浏览量&apos;, default=0)
likes = models.PositiveIntegerField(&apos;点赞数&apos;, default=0)
topped = models.BooleanField(&apos;置顶&apos;, default=False)

def __str__(self):
    return self.title

class Meta:
    verbose_name = &apos;文章&apos;
    verbose_name_plural = &apos;文章&apos;
    ordering = [&apos;-last_modified_time&apos;]

def get_absolute_url(self):
    return reverse(&apos;article&apos;, args=(self.slug,))
</code></pre><p>#cms/admin.py<br>from django.contrib import admin<br>from .models import Column, Article</p>
<p>class ColumnAdmin(admin.ModelAdmin):<br>    list_display = (‘name’, ‘pre_column’, ‘intro’)</p>
<p>class ArticleAdmin(admin.ModelAdmin):<br>    list_display = (‘title’, ‘column’, ‘last_modified_time’)</p>
<p>admin.site.register(Column, ColumnAdmin)<br>admin.site.register(Article, ArticleAdmin)</p>
<p>#cms/views.py</p>
<h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="* coding: utf-8 *"></a><em>*</em> coding: utf-8 <em>*</em></h1><p>from django.shortcuts import render<br>from django.http import HttpResponse<br>from .models import Column, Article<br>from unicms import settings</p>
<p>def index(request):<br>    columns = Column.objects.all()</p>
<pre><code># return HttpResponse(settings.STATIC_ROOT)
return render(request, &apos;index.html&apos;, &amp;#123;&apos;columns&apos;: columns&amp;#125;)
</code></pre><p>def column_detail(request, column_slug):</p>
<pre><code># return HttpResponse(&apos;column slug: &apos; + column_slug)
column = Column.objects.filter(slug=column_slug)
return render(request, &apos;single.html&apos;, &amp;#123;&apos;column&apos;: column&amp;#125;)
</code></pre><p>def article_detail(request, article_slug):</p>
<pre><code># return HttpResponse(&apos;article slug: &apos; + article_slug)
article = Article.objects.filter(slug=article_slug)[0]
return render(request, &apos;single.html&apos;, &amp;#123;&apos;article&apos;:article&amp;#125;)
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python+Requests接口测试框架]]></title>
      <url>/2018/02/01/Python-Requests%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6.html</url>
      <content type="html"><![CDATA[<p>#Util/util.py</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>import md5 as _md5<br>from data_file_parser import *</p>
<h1 id="对密码进行md5加密"><a href="#对密码进行md5加密" class="headerlink" title="对密码进行md5加密"></a>对密码进行md5加密</h1><p>def md5(password):<br>    m = _md5.new()<br>    m.update(password)<br>    return m.hexdigest()</p>
<h1 id="从配置文件env-conf中读取环境信息，返回字典"><a href="#从配置文件env-conf中读取环境信息，返回字典" class="headerlink" title="从配置文件env.conf中读取环境信息，返回字典"></a>从配置文件env.conf中读取环境信息，返回字典</h1><p>def get_env(section):<br>    return ConfFile.load(“../Conf/env.conf”,section)</p>
<h1 id="从配置文件env-conf中读取base-url信息，返回字符串"><a href="#从配置文件env-conf中读取base-url信息，返回字符串" class="headerlink" title="从配置文件env.conf中读取base_url信息，返回字符串"></a>从配置文件env.conf中读取base_url信息，返回字符串</h1><p>def get_env_url(section):<br>    return ConfFile.get(“../Conf/env.conf”,section,”base_url”)</p>
<h1 id="从配置文件user-conf读取user信息，返回字典"><a href="#从配置文件user-conf读取user信息，返回字典" class="headerlink" title="从配置文件user.conf读取user信息，返回字典"></a>从配置文件user.conf读取user信息，返回字典</h1><p>def get_user(section):<br>    return ConfFile.load(“../Conf/user.conf”,section)<br>def get_api(file_name):<br>    if ‘.json’ not in file_name:<br>        file_name += “.json”<br>    return JsonFile.load(“../API/“+file_name)<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>        print get_api(“login.json”)</p>
<p>#Util/data_file_parser.py<br>import json<br>import ConfigParser<br>import xlrd<br>class JsonFile:<br>    def <strong>init</strong>(self):<br>        pass<br>    @classmethod<br>    def get(cls, path, key):<br>        with open(path) as f:<br>            return json.load(f)[key]<br>    @classmethod<br>    def load(cls, path):<br>        with open(path) as f:<br>            return json.load(f)<br>class ConfFile:<br>    def <strong>init</strong>(self):<br>        pass<br>    @classmethod<br>    def get(cls, path, section, option):<br>        conf = ConfigParser.ConfigParser()<br>        conf.read(path)<br>        return conf.get(section, option)<br>    @classmethod<br>    def load(cls, path):<br>        _dict = {}<br>        conf = ConfigParser.ConfigParser()<br>        conf.read(path)<br>        for section in conf.sections():<br>            _dict[section] = {}<br>            for option in conf.options(section):<br>                _dict[section][option] = conf.get(section, option)<br>        return _dict<br>    @classmethod<br>    def load(cls, path, section):<br>        _dict = {}<br>        conf = ConfigParser.ConfigParser()<br>        conf.read(path)<br>        for option in conf.options(section):<br>            _dict[option] = conf.get(section, option)<br>        return _dict<br>class ExcelFile:<br>    def <strong>init</strong>(self):<br>        pass<br>    @classmethod<br>    def get(cls, path, sheet, row, col):<br>        wb = xlrd.open_workbook(path)<br>        if isinstance(sheet, int):<br>            sh = wb.sheet_by_index(sheet)<br>        else:<br>            sh = wb.sheet_by_name(sheet)<br>        return sh.cell_value(row, col)<br>    @classmethod<br>    def load(cls, path, sheet=0):<br>        wb = xlrd.open_workbook(path)<br>        if isinstance(sheet, int):<br>            sh = wb.sheet_by_index(sheet)<br>        else:<br>            sh = wb.sheet_by_name(sheet)<br>        cols = sh.ncols<br>        rows = sh.nrows<br>        data_list = []<br>        for row in range(1, rows):<br>            data = {}<br>            for col in range(0, cols):<br>                data[sh.cell_value(0, col)] = sh.cell_value(row, col)<br>            data_list.append(data)<br>        return data_list<br>class XMLFile:<br>    def <strong>init</strong>(self):<br>        pass<br>    @classmethod<br>    def get(cls):<br>        pass<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    a=A<br>    a.test()</p>
<h1 id="Util-db-py"><a href="#Util-db-py" class="headerlink" title="Util/db.py"></a>Util/db.py</h1><p>#Util/models.py</p>
<h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>from util import <em><br>import json<br>import requests<br>import sys<br>reload(sys)<br>sys.setdefaultencoding(“utf8”)<br>class User:<br>    ‘’’用户对象，初始化时，支持：<br>    0参：读取user.conf中的default选项下的用户；<br>    1参：读取user.conf中的参数对应的选项下的用户<br>    3参：按group_id,user_name,password,顺序读取参数<br>    字典类型参数：按{“group_id”:”**</em>“,”user_name”:”<strong><em>“,”password”:”</em></strong>“}<br>    注：配置文件中或所传password值使用原密码即可，不需要进行md5处理<br>    ‘’’<br>    session = requests.Session()<br>    headers = {‘Content-Type’: ‘application/x-www-form-urlencoded; charset=UTF-8’}<br>    base_url = get_env_url(“default”)<br>    def <strong>init</strong>(self, <em>args, *</em>kws):<br>        self.user_dict = {}</p>
<pre><code>    # 0参，读取配置文件user.conf中的default用户
    if not args or kws:
        self.user_dict = get_user(&apos;default&apos;)
    elif args:
        # 1参：读取user.conf中的参数对应的选项下的用户
        if len(args) == 1:
            self.req = get_user(args[0])
        # 3参：按group_id,user_name,password,顺序读取参数
        elif len(args) == 3:
            self.user_dict[&apos;group_id&apos;] = args[0]
            self.user_dict[&apos;user_name&apos;] = args[1].decode(&apos;utf-8&apos;)
            self.user_dict[&apos;password&apos;] = args[2]
        else:
            print &apos;args error&apos;
    # 字典类型参数：按{&quot;group_id&quot;:&quot;***&quot;,&quot;user_name&quot;:&quot;***&quot;,&quot;password&quot;:&quot;***&quot;}
    elif kws:
        self.user_dict = kws
    # 对password进行md5处理
    password = self.user_dict.get(&apos;password&apos;)
    if password:
        self.user_dict[&apos;password&apos;] = md5(password)
def login(self, *args):
    if not args:
        base_url = self.base_url
    elif isinstance(args[0], Env):
        base_url = args[0].base_url
    else:
        print &quot;args error&quot;
        return -1
    uri = base_url + &quot;/api/Login/Login/login/&quot;
    data = &apos;req=&apos; + json.dumps(self.user_dict)
    res = self.session.post(uri, data=data, headers=self.headers)
    # print res.text
def post(self, *args):
    &apos;&apos;&apos;发送请求方法,不包含login方法，要在login后使用
    1参：APIFile，使用默认环境,json格式，暂时不支持兼容.config格式的数据
    2参：env对象和APIFile
    2参，base_url和APIFile，base_url如：http://w-beta-1000.chemanman.com:7501
    2参：APIFile和DataFile
    3参：env对象APIFile,DataFile
    注：APIFile还有接口地址和所有必要字段，DataFile，含有多组数据，可以只包含部分变化字段
    &apos;&apos;&apos;
    if len(args) == 1:
        base_url = self.base_url
        api_dict = get_api(args[0])
    elif len(args) == 2:
        if isinstance(args[0], Env):
            base_url = args[0].base_url
            api_dict = get_api(args[1])
        elif &quot;http&quot; in args[0]:
            base_url = args[0]
            api_dict = get_api(args[1])
        else:
            base_url = self.base_url
            api_dict = get_api[args[0]]
    else:
        print &quot;args error&quot;
        return -1
    uri = base_url + api_dict.get(&quot;uri&quot;)
    data = &apos;req=&apos; + json.dumps(api_dict.get(&quot;req&quot;))
    # 尚未对data_file进行替换处理
    res = self.session.post(uri, data=data, headers=self.headers)
    print res.text
def posts(self, full_url, data):
    &apos;&apos;&apos;根据接口地址和数据发送post请求
    full_url:如http://w-beta-1000.chemanman.com:7501/api/Login/Login/login/
    data：支持req={},&quot;req&quot;:{}或{}，3种格式
    &apos;&apos;&apos;
    if isinstance(data, dict):
        if &quot;req&quot; in data.keys():
            data = &quot;req=&quot; + json.dumps(data.get(&quot;req&quot;))
        else:
            data = &quot;req=&quot; + json.dumps(data)
    res = self.session.post(full_url, data=data, headers=self.headers)
    print res.text
def post_all(self, path=&apos;.&apos;):
    &apos;&apos;&apos;发送API文件或子文件夹下的所有json文件&apos;&apos;&apos;
    pass
def list(self):
    pass
def clean(self):
    pass
def pre_data(self):
    pass
def system_set(self):
    pass
def retry(self):
    pass
</code></pre><p>class Env:<br>    ‘’’环境对象，支持：<br>    0参：登录env.conf中的default环境<br>    1参：env.conf中的选项,不允许包含http<br>    1参：完整url,带端口号，如”<a href="http://w-beta-1000.chemanman.com:7501&quot;,结尾不包含/,必须包含http" target="_blank" rel="noopener">http://w-beta-1000.chemanman.com:7501&quot;,结尾不包含/,必须包含http</a><br>    2参：host,port,如beta-1000,7501,如果只写beta,默认为beta-1000<br>    字典：{“env_name”:hzc_7501,<br>    “base_url”:”<a href="http://w-beta-1000.chemanman.com:7501" target="_blank" rel="noopener">http://w-beta-1000.chemanman.com:7501</a>“;,<br>    “db”:”tms_beta_rw”,<br>    “index”:”tms_beta_test”<br>    }<br>    ‘’’<br>    def <strong>init</strong>(self, <em>args, *</em>kws):  # 改为可变参数<br>        env_name = ‘’<br>        base_url = ‘’<br>        db = ‘’<br>        index = ‘’</p>
<pre><code>    # 0参：登录env.conf中的default环境
    if not args:
        _env = get_env(&quot;default&quot;)
        self.base_url = _env.get(&quot;base_url&quot;)
        self.env_name = _env.get(&quot;env_name&quot;)
        self.db = _env.get(&quot;db&quot;)
        self.index = _env.get(&quot;index&quot;)
        # self.env_name
    elif len(args) == 1:
        if &quot;http&quot; in args[0]:  # 参数为完整url
            self.base_url = args[0]
        else:   # 应加上try
            _env = get_env(args[0])
            self.base_url = _env.get(&quot;base_url&quot;)
            self.env_name = _env.get(&quot;env_name&quot;)
            self.db = _env.get(&quot;db&quot;)
            self.index = _env.get(&quot;index&quot;)
    elif len(args) == 2:   # 2参情况
        if &apos;-&apos; in args[0]:
            self.base_url = &quot;http://w-&quot;; + \
                args[0]+&quot;.chemanman.com:&quot; + args[1]
        else:
            self.base_url = &quot;http://w-&quot;; + \
                args[0]+&quot;-1000.chemanman.com:&quot; + args[1]
def check(self):
    pass
def deploy(self):
    pass
def destroy(self):
    pass
def list(self):
    pass
</code></pre><p>class DB:<br>    db_host = ‘’<br>    db_port = ‘’<br>    db_name = ‘’<br>    db_user = ‘’<br>    db_password = ‘’<br>    db_index = ‘’<br>    tables = []<br>    def get(self, table, key):<br>        pass<br>    def do_sql(self):<br>        pass</p>
<pre><code># def filter(self,table,where):
#   pass
def select(self, key, table, where):
    pass
</code></pre><p>class Case:<br>    case_name = ‘’<br>    def run(self):<br>        pass<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    env1 = Env(“beta”, “7501”)<br>    user = User()<br>    user.login(env1)<br>    user.post(‘orgOp’)<br>    user.login(env1)<br>    user.post(‘orgOp’)</p>
<h1 id="Util-option-parser-py"><a href="#Util-option-parser-py" class="headerlink" title="Util/option_parser.py"></a>Util/option_parser.py</h1><p>from optparse import OptionParser</p>
<p>parser = OptionParser(usage=”usage:%prog [optinos] filepath”)<br>parser.add_option(“-a”, “–api”,<br>                action = “store”,<br>                type = ‘str’,<br>                dest = “api”,<br>                default = None,<br>                help=”Specify annalysis execution time limit”<br>                )<br>parser.add_option(“-u”, “–url”,<br>                action = “store_true”,<br>                dest = “url”,<br>                default = False,<br>                help = “Specify if the target is an URL”<br>                )<br>(options, args) = parser.parse_args()  </p>
<h1 id="if-options-url"><a href="#if-options-url" class="headerlink" title="if options.url:"></a>if options.url:</h1><h1 id="print-args-0"><a href="#print-args-0" class="headerlink" title="print(args[0])"></a>print(args[0])</h1><h1 id="print-options-api"><a href="#print-options-api" class="headerlink" title="print options.api"></a>print options.api</h1><p>#Conf</p>
<h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h1 id="Case-base-py"><a href="#Case-base-py" class="headerlink" title="Case/base.py"></a>Case/base.py</h1><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>import sys<br>sys.path.append(“..”)<br>from Util.models import <em><br>from Util.data_file_parser import </em><br>class Base:<br>    “””用例原型”””<br>    def <strong>init</strong>(self):<br>        env = Env(“<a href="http://w-beta-1000.chemanman.com:7502" target="_blank" rel="noopener">http://w-beta-1000.chemanman.com:7502</a>“;)<br>        user = User()<br>        user.login(env)<br>        user.post(env,”priceOpV2”)<br>a = Base()</p>
<h1 id="Case-create-order-py"><a href="#Case-create-order-py" class="headerlink" title="Case/create_order.py"></a>Case/create_order.py</h1><p>from base import Base<br>from Util.data import JsonFile<br>import json</p>
<h1 id="from-Util-OptionParser-import"><a href="#from-Util-OptionParser-import" class="headerlink" title="from Util.OptionParser import *"></a>from Util.OptionParser import *</h1><p>class CreateOrder(Base):</p>
<pre><code>def create_order(self):
    # print options.api
    # file = &quot;../API/&quot; + options.api + &quot;.json&quot;
    self.post(&apos;../API/create_order.json&apos;)
</code></pre><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    a = CreateOrder()<br>    a.create_order()</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[开发日志管理平台--未完成]]></title>
      <url>/2018/02/01/%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0-%E6%9C%AA%E5%AE%8C%E6%88%90.html</url>
      <content type="html"><![CDATA[<p>#settting.py<br>STATICFILES_DIRS = (<br>    os.path.join(BASE_DIR, “static”),<br>)</p>
<h1 id="url-py"><a href="#url-py" class="headerlink" title="url.py"></a>url.py</h1><p>from django.conf.urls import include, url<br>from django.contrib import admin<br>from log.views import *</p>
<p>urlpatterns = [<br>    url(r’^admin/‘, include(admin.site.urls)),<br>    url(r’^$’, IndexView.as_view(), name=”home”),<br>]</p>
<h1 id="log-views-py"><a href="#log-views-py" class="headerlink" title="log/views.py"></a>log/views.py</h1><p>import paramiko<br>import logging<br>import json<br>from django.views.generic import ListView</p>
<p>def _get_log():<br>    item_list = []<br>    ssh = paramiko.SSHClient()<br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    ssh.connect(‘192.168.100.241’, 22, ‘root’, ‘1234567’)<br>    stdin, stdout, stderr = ssh.exec_command(‘tail -500 /tmp/ERROR.20170922.log’)<br>    out = stdout.readlines()<br>    item_list = []<br>    for i in out:<br>        i = i.strip()<br>        if i:<br>            logging.error(“%s is” % i )<br>            i = i.split(“\t”)<br>            logging.error(len(i))<br>            logging.error(“———–”)</p>
<pre><code>        # if not logging.error(i[-1]):
        #     print logging.error(i)
        if len(i) &gt; 12:
            pass
            # logging.error(i[11])
            # data = json.loads(i[11][1:-1].replace(&apos;\\&apos;, &apos;&apos;))
            # i[11] = json.dumps(data, indent=1)
        else:
            pass
        item_list.append(i)
return item_list
</code></pre><p>class IndexView(ListView):<br>    template_name = “log/index.html”<br>    context_object_name = “item_list”</p>
<pre><code>def get_queryset(self):
    return _get_log()

def get_context_data(self, **kwargs):

    return super(IndexView, self).get_context_data(**kwargs)
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django开发博客系统-版本三]]></title>
      <url>/2018/02/01/Django%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F-%E7%89%88%E6%9C%AC%E4%B8%89.html</url>
      <content type="html"><![CDATA[<p>根据Django of examples 1~3章开发 django==1.11.6</p>
<h1 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h1><p>SITE_ID = 1</p>
<p>STATICFILES_DIRS = (<br>    os.path.join(BASE_DIR, “static”),<br>)</p>
<h1 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h1><p>EMAIL_BACKEND = ‘django.core.mail.backends.smtp.EmailBackend’<br>EMAIL_USE_TLS = False<br>EMAIL_HOST = ‘smtp.sina.com’<br>EMAIL_PORT = 25<br>EMAIL_HOST_USER = ‘test_results@sina.com’<br>EMAIL_HOST_PASSWORD = ‘hanzhichao123’<br>DEFAULT_FROM_EMAIL = ‘Test Results<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#116;&#101;&#x73;&#116;&#x5f;&#x72;&#x65;&#115;&#x75;&#108;&#x74;&#x73;&#x40;&#x73;&#105;&#x6e;&#x61;&#46;&#x63;&#111;&#x6d;">&#116;&#101;&#x73;&#116;&#x5f;&#x72;&#x65;&#115;&#x75;&#108;&#x74;&#x73;&#x40;&#x73;&#105;&#x6e;&#x61;&#46;&#x63;&#111;&#x6d;</a>‘</p>
<h1 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h1><p>from django.conf.urls import url, include<br>from django.contrib import admin<br>from django.contrib.sitemaps.views import sitemap<br>from blog.sitemaps import PostSitemap<br>sitemaps = &#123;<br>    ‘posts’: PostSitemap,<br>&#125;<br>urlpatterns = [<br>    url(r’^admin/‘, admin.site.urls),<br>    url(r’^blog/‘, include(‘blog.urls’,<br>                           namespace=’blog’,<br>                           app_name=’blog’)),<br>    url(r’^sitemap.xml$’, sitemap, &#123;’sitemaps’: sitemaps&#125;, name=’django.contrib.sitemaps.views.sitemap’),<br>    url(r’^markdownx/‘, include(‘markdownx.urls’)),<br>]</p>
<p>#blog/models.py</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>from <strong>future</strong> import unicode_literals<br>from django.db import models<br>from django.urls import reverse<br>from django.utils import timezone<br>from django.contrib.auth.models import User<br>from taggit.managers import TaggableManager<br>class PublishedManager(models.Manager):<br>    def get_queryset(self):<br>        return super(PublishedManager, self).get_queryset().filter(status=’published’)<br>class Post(models.Model):<br>    STATUS_CHOICES = (<br>        (‘draft’, ‘Draft’),<br>        (‘published’, ‘Published’),<br>    )<br>    tags = TaggableManager()<br>    title = models.CharField(max_length=250)<br>    slug = models.SlugField(max_length=250, unique_for_date=’publish’)<br>    author = models.ForeignKey(User, related_name=’blog_posts’)<br>    body = models.TextField()<br>    publish = models.DateTimeField(default=timezone.now)<br>    created = models.DateTimeField(auto_now_add=True)<br>    updated = models.DateTimeField(auto_now=True)<br>    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=’draft’)<br>    objects = models.Manager()  # 自定义Manager<br>    published = PublishedManager()<br>    class Meta:<br>        ordering = (‘-publish’,)<br>    def <strong>unicode</strong>(self):<br>        return self.title<br>    def get_absolute_url(self):<br>        current_tz = timezone.get_current_timezone()<br>        db_local_time = current_tz.normalize(self.publish)<br>        return reverse(‘blog:post_detail’, args=[<br>            db_local_time.year,<br>            db_local_time.strftime(‘%m’),<br>            db_local_time.strftime(‘%d’),<br>            self.slug<br>        ])<br>class Comment(models.Model):<br>    post = models.ForeignKey(Post, related_name=’comments’)<br>    name = models.CharField(max_length=80)<br>    email = models.EmailField()<br>    body = models.TextField()<br>    created = models.DateTimeField(auto_now_add=True)<br>    updated = models.DateTimeField(auto_now=True)<br>    active = models.BooleanField(default=True)<br>    class Meta:<br>        ordering = (‘created’,)<br>    def <strong>unicode</strong>(self):<br>        return ‘Comment by &#123;&#125; on &#123;&#125;’.format(self.name, self.post)</p>
<p>#blog/admin.py</p>
<h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>from <strong>future</strong> import unicode_literals<br>from django.contrib import admin<br>from .models import Post, Comment<br>class PostAdmin(admin.ModelAdmin):<br>    list_display = (‘title’, ‘slug’, ‘author’, ‘publish’, ‘status’)<br>    list_filter = (‘status’, ‘created’, ‘publish’, ‘author’)<br>    search_fields = (‘title’, ‘body’)<br>    prepopulated_fields = &#123;’slug’: (‘title’,)&#125;<br>    raw_id_fields = (‘author’,)  # 显示外键的详细信息<br>    date_hierarchy = ‘publish’  # 快捷搜索<br>    ordering = [‘status’, ‘publish’]  # 默认排序<br>class CommentAdmin(admin.ModelAdmin):<br>    list_display = (‘name’, ‘email’, ‘post’, ‘created’, ‘active’)<br>    list_filter = (‘active’, ‘created’, ‘updated’)<br>    search_fields = (‘name’, ‘email’, ‘body’)<br>admin.site.register(Post, PostAdmin)<br>admin.site.register(Comment, CommentAdmin)</p>
<p>#blog/forms.py</p>
<p>from django import forms<br>from .models import Comment<br>from markdownx.fields import MarkdownxFormField</p>
<p>class EmailPostForm(forms.Form):<br>    name = forms.CharField(max_length=25)<br>    email = forms.EmailField()<br>    to = forms.EmailField()<br>    comments = forms.CharField(required=False,<br>                               widget=forms.Textarea)<br>class CommentForm(forms.ModelForm):<br>    class Meta:<br>        model = Comment<br>        fields = (‘name’, ‘email’, ‘body’)<br>class EditForm(forms.Form):<br>    myfield = MarkdownxFormField()</p>
<p>#blog/views.py</p>
<h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>from <strong>future</strong> import unicode_literals<br>from django.core.mail import send_mail<br>from django.shortcuts import render, get_object_or_404<br>from .models import Post<br>from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger<br>from .forms import EmailPostForm, CommentForm, EditForm<br>from taggit.models import Tag<br>from django.db.models import Count<br>def post_list(request, tag_slug=None):<br>    object_list = Post.published.all()<br>    tag = None<br>    if tag_slug:<br>        tag = get_object_or_404(Tag, slug=tag_slug)<br>        object_list = object_list.filter(tags<strong>in=[tag])<br>    paginator = Paginator(object_list, 3)<br>    page = request.GET.get(‘page’)<br>    try:<br>        posts = paginator.page(page)<br>    except PageNotAnInteger:<br>        posts = paginator.page(1)<br>    except EmptyPage:<br>        posts = paginator.page(paginator.num_pages)<br>    return render(request, ‘blog/post/list.html’, &#123;<br>        ‘page’: page,<br>        ‘posts’: posts<br>    &#125;)<br>def post_detail(request, year, month, day, post):<br>    post = get_object_or_404(Post, slug=post,<br>                             status=’published’,<br>                             publish</strong>year=year,<br>                             publish<strong>month=month,<br>                             publish</strong>day=day)<br>    comments = post.comments.filter(active=True)<br>    new_comment = None<br>    if request.method == ‘POST’:<br>        comment_form = CommentForm(data=request.POST)<br>        form = EditForm(data=request.POST)<br>        if comment_form.is_valid():<br>            new_comment = comment_form.save(commit=False)<br>            new_comment.post = post<br>            new_comment.save()<br>    else:<br>        form = EditForm()<br>        comment_form = CommentForm()</p>
<pre><code># List of similar posts
post_tags_ids = post.tags.values_list(&apos;id&apos;, flat=True)
similar_posts = Post.published.filter(tags__in=post_tags_ids).exclude(id=post.id)
similar_posts = similar_posts.annotate(same_tags=Count(&apos;tags&apos;)).order_by(&apos;-same_tags&apos;, &apos;-publish&apos;)[:4]
return render(request, &apos;blog/post/detail.html&apos;, &amp;#123;
    &apos;post&apos;: post,
    &apos;comments&apos;: comments,
    &apos;new_comment&apos;: new_comment,
    &apos;comment_form&apos;: comment_form,
    &apos;similar_posts&apos;: similar_posts,
    &apos;form&apos;: form,
&amp;#125;)
</code></pre><p>def post_share(request, post_id):<br>    post = get_object_or_404(Post, id=post_id, status=’published’)<br>    cd = None<br>    if request.method == ‘POST’:<br>        form = EmailPostForm(request.POST)<br>        if form.is_valid():<br>            cd = form.cleaned_data<br>            post_url = request.build_absolute_uri(<br>                post.get_absolute_url()<br>            )<br>            subject = ‘&#123;&#125; (&#123;&#125;) recomends you reading “&#123;&#125;”‘\<br>                .format(cd[‘name’], cd[‘email’], post.title)<br>            message = ‘Read “&#123;&#125;” at &#123;&#125;\n\n&#123;&#125;\’s comments: &#123;&#125;’\<br>                .format(post.title, post_url, cd[‘name’], cd[‘comments’])<br>            send_mail(subject, message, ‘test_results@sina.com’, [cd[‘to’]])<br>            sent = True<br>    else:<br>        form = EmailPostForm()<br>    return render(request, ‘blog/post/share.html’, &#123;<br>        ‘post’: po<br>        ‘form’: form,<br>    &#125;)</p>
<p>#blog/urls.py<br>from django.conf.urls import url, include<br>from . import views<br>from .feeds import LatestPostsFeed<br>urlpatterns = [<br>    url(r’^$’, views.post_list, name=’post_list’),<br>    url(r’^(?P<year>\d&#123;4&#125;)/(?P<month>\d&#123;2&#125;)/(?P<day>\d&#123;2&#125;)/(?P<post>[-\w]+)/$’,<br>        views.post_detail, name=’post_detail’),<br>    url(r’^(?P<post_id>\d+)/share/$’, views.post_share, name=’post_share’),<br>    url(r’^tag/(?P<tag_slug>[-\w]+)/$’, views.post_list, name=’post_list_by_tag’),<br>    url(r’feed/$’, LatestPostsFeed(), name=’post_feed’),<br>]</tag_slug></post_id></post></day></month></year></p>
<p>#blog/sitemaps.py<br>from django.contrib.sitemaps import Sitemap<br>from .models import Post<br>class PostSitemap(Sitemap):<br>    changefreq = ‘weekly’<br>    priority = 0.9<br>    def items(self):<br>        return Post.published.all()<br>    def lastmode(self, obj):<br>        return obj.publish</p>
<p>#blog/feeds.py<br>from django.contrib.syndication.views import Feed<br>from django.template.defaultfilters import truncatewords<br>from .models import Post<br>class LatestPostsFeed(Feed):<br>    title = ‘My blog’<br>    link = ‘/blog’<br>    description = ‘New posts of my blog.’<br>    def items(self):<br>        return Post.published.all()[:5]<br>    def item_title(self, item):<br>        return item.title<br>    def item_description(self, item):<br>        return truncatewords(item.body, 30)</p>
<h1 id="blog-templatetags-blog-tags-py"><a href="#blog-templatetags-blog-tags-py" class="headerlink" title="blog/templatetags/blog_tags.py"></a>blog/templatetags/blog_tags.py</h1><p>from django import template<br>from django.db.models import Count<br>from django.utils.safestring import mark_safe<br>from ..models import Post<br>import markdown<br>from taggit.models import Tag<br>register = template.Library()<br>@register.simple_tag<br>def total_posts():<br>    return Post.published.count()<br>@register.inclusion_tag(‘blog/post/latest_posts.html’)<br>def show_latest_posts(count=5):<br>    latest_posts = Post.published.order_by(‘-publish’)[:count]<br>    return &#123;’latest_posts’: latest_posts&#125;<br>@register.assignment_tag<br>def get_most_commented_posts(count=5):<br>    return Post.published.annotate(total_comments=Count(‘comments’)).order_by(‘-total_comments’)[:count]<br>@register.filter(name=’markdown’)<br>def markdown_format(text):<br>    return mark_safe(markdown.markdown(text))<br>@register.assignment_tag<br>def tag_cloud():<br>    return Tag.objects.all()</p>
<p>#blog/templates/blog/base.html<br>&#123;% load staticfiles %&#125;<br>&#123;% load blog_tags %&#125;<br>&lt;!DOCTYPE html&gt;</p>
<p><html></html></p>
<p><head><br>  <title>&#123;% block title %&#125;&#123;% endblock %&#125;</title><br>  <link href="&#123;% static " css="" bootstrap.min.css"="" %&#125;"="" rel="stylesheet"><br></head></p>
<p><body></body></p>
<p><div class="container"><br>  <div class="col-md-9"><br>    &#123;% block content %&#125;<br>    &#123;% endblock %&#125;<br>  </div><br>  <div class="col-md-3 bg-info"><br>    <h2><a href="&#123;% url 'blog:post_list' %&#125;">My blog</a></h2><br>      <p>This is my blog. I’ve written &#123;% total_posts %&#125; posts so far.</p><br>      <p><a href="&#123;% url 'blog:post_feed' %&#125;">Subscribe to my RSS feed</a></p><br>      <h3>Latest posts</h3><br>      &#123;% show_latest_posts 3 %&#125;<br>      <h3>Most commented posts</h3><br>      &#123;% get_most_commented_posts as most_commented_posts %&#125;<br>      <ul><br>          &#123;% for post in most_commented_posts %&#125;<br>              <li><br>              <a href="&#123;&#123; post.get_absolute_url &#125;&#125;">&#123;&#123; post.title &#125;&#125;</a><br>              </li><br>          &#123;% endfor %&#125;<br>      </ul><br>      <h3>All Tags</h3><br>  &#123;% tag_cloud as tag_list %&#125;<br>  <ul><br>      &#123;% for tag in tag_list %&#125;<br>      <li><a href="&#123;% url " blog:post_list_by_tag"="" tag.slug="" %&#125;"="">&#123;&#123; tag &#125;&#125;</a></li><br>      &#123;% endfor %&#125;<br>  </ul><br>  </div><br></div><br><br></p>
<p>#blog/templates/blog/pagination.html<br><span class="text-muted"><br>    &#123;% if page.has_previous %&#125;<br>        <a href="?page=&#123;&#123; page.previous_page_number &#125;&#125;">Previous</a><br>    &#123;% endif %&#125;<br>    <span class="text-info">Page&#123;&#123; page.number &#125;&#125; of &#123;&#123; page.paginator.num_pages &#125;&#125;</span><br>    &#123;% if page.has_next %&#125;<br>        <a href="?page=&#123;&#123; page.next_page_number &#125;&#125;">Next</a><br>    &#123;% endif %&#125;<br></span></p>
<p>#blog/templates/blog/post/list.html<br>&#123;% extends “blog/base.html” %&#125;<br>&#123;% load blog_tags %&#125;<br>&#123;% block title %&#125;My Blog&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    </p><h1>My Blog</h1><hr><br>    &#123;% if tag %&#125;<br>        <h2>Posts tagged with “&#123;&#123; tag.name &#125;&#125;”</h2><br>    &#123;% endif %&#125;<br>  &#123;% for post in posts %&#125;<br>      <div class="panel panel-default"><div class="panel-body"><br>    <h2><br>      <a href="&#123;&#123; post.get_absolute_url &#125;&#125;"><br>        &#123;&#123; post.title &#125;&#125;<br>      </a><br>    </h2><br>      <p>Tags:<br>      &#123;% for tag in post.tags.all %&#125;<br>          <a class="label label-default" href="&#123;% url " blog:post_list_by_tag"="" tag.slug="" %&#125;"="">&#123;&#123; tag.name &#125;&#125;</a><br>          &#123;% if not forloop.last %&#125;&nbsp;&#123;% endif %&#125;<br>          &#123;% endfor %&#125;<br>          </p><br>    <p class="date"><br>      Published &#123;&#123; post.publish &#125;&#125; by &#123;&#123; post.author &#125;&#125;<br>    </p><br>    &#123;&#123; post.body|markdown|truncatechars_html:30 &#125;&#125;<br>      </div></div><br>  &#123;% endfor %&#125;<br>  &#123;% include “blog/pagination.html” with page=posts %&#125;<br>&lt;<br>&#123;% endblock %&#125;<p></p>
<p>#blog/templates/blog/post/detail.html<br>&#123;% extends “blog/base.html” %&#125;<br>&#123;% load blog_tags %&#125;<br>&#123;% block title %&#125;&#123;&#123; post.title &#125;&#125;&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>  </p><h1>&#123;&#123; post.title &#125;&#125;</h1><br>  <p class="date"><br>    Published &#123;&#123; post.publish &#125;&#125; by &#123;&#123; post.author &#125;&#125;<br>  </p><br>  &#123;&#123; post.body|markdown &#125;&#125;<br>    <p><br>    <a href="&#123;% url 'blog:post_share' post.id %&#125;">Share this post</a><br>    </p><br>    <h2>Similar posts</h2><br>    &#123;% for post in similar_posts %&#125;<br>        <p><br>        <a href="&#123;&#123; post.get_absolute_url &#125;&#125;">&#123;&#123; post.title &#125;&#125;</a><br>        </p><br>        &#123;% empty %&#125;<br>        There are no similar posts yet.<br>    &#123;% endfor %&#125;<br>    <p><br>    &#123;% with comments.count as total_comments %&#125;<br>        </p><h2><br>        &#123;&#123; total_comments &#125;&#125; comment&#123;&#123; total_comments|pluralize &#125;&#125;<br>        </h2><br>    &#123;% endwith %&#125;<br>    &#123;% for comment in comments %&#125;<br>        <div class="comment"><br>        <hr><br>        <p class="info"><br>            Comment &#123;&#123; forloop.counter &#125;&#125; by &#123;&#123; comment.name &#125;&#125;<br>            &#123;&#123; comment.created &#125;&#125;<br>        </p><br>        &#123;&#123; comment.body|linebreaks &#125;&#125;<br>        </div><br>        &#123;% empty %&#125;<br>        <p>There are no comments yet.</p><br>    &#123;% endfor %&#125;<br>    &#123;% if new_comment %&#125;<br>        <h2>Your comment has been added.</h2><br>    &#123;% else %&#125;<br>        <h2>Add a new comment</h2><br>        <form action="." method="post"><br>        &#123;&#123; comment_form.as_p &#125;&#125;<br>        &#123;% csrf_token %&#125;<br>        <p><input type="submit" value="Add comment"></p><br>        </form><br>        <form method="POST" action="">&#123;% csrf_token %&#125;&#123;&#123; form.as_p &#125;&#125;</form><br>&#123;&#123; form.media &#125;&#125;<br>    &#123;% endif %&#125;<br>&#123;% endblock %&#125;<p></p>
<p>#blog/templates/blog/post/latest_posts.html</p>
<p><ul><br>    &#123;% for post in latest_posts %&#125;<br>        <li><br>        <a href="&#123;&#123; post.get_absolute_url &#125;&#125;">&#123;&#123; post.title &#125;&#125;</a><br>        </li><br>    &#123;% endfor %&#125;<br></ul></p>
<p>#blog/templates/blog/post/share.html<br>&#123;% extends “blog/base.html” %&#125;<br>&#123;% block title %&#125;Share a post&#123;% endblock %&#125;<br>&#123;% block content %&#125;<br>    &#123;% if sent %&#125;<br>        </p><h1>Email successfully sent</h1><br>        <p><br>        “&#123;&#123; post.title &#125;&#125;” was successfully sent to &#123;&#123; cd.to &#125;&#125;.<br>        </p><br>    &#123;% else %&#125;<br>        <h1>Share “&#123;&#123; post.title &#125;&#125;” by e-mail</h1><br>        <form action="." method="post"><br>        &#123;&#123; form.as_p &#125;&#125;<br>        &#123;% csrf_token %&#125;<br>        <input type="submit" value="Send e-mail"><br>        </form><br>    &#123;% endif %&#125;<br>&#123;% endblock %&#125;<p></p>
]]></content>
      
        
        <tags>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原创]服务器监控脚本分享]]></title>
      <url>/2018/02/01/%E5%8E%9F%E5%88%9B-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB.html</url>
      <content type="html"><![CDATA[<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="coding=utf-8"></a>coding=utf-8</h1><p>from email.mime.text import MIMEText<br>from email.header import Header<br>from functools import wraps<br>import smtplib<br>import psutil<br>import time<br>import json</p>
<h1 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h1><p>SMTP_SERVER = ‘smtphm.qiye.163.com’<br>SMTP_USER = ‘hanzhichao@spicespirit.com’<br>SMTP_PASSWD = ‘hanzhichao123’<br>RECEIVER_LIST = [‘superhin@126.com’,’hanzhichao@spicespirit.com’]<br>EMAIL_SUBJECT = ‘服务器检查邮件报警！！！’<br>EMAIL_TPL = ‘’</p>
<h1 id="CPU-MEMORY-报警百分比"><a href="#CPU-MEMORY-报警百分比" class="headerlink" title="CPU/MEMORY 报警百分比"></a>CPU/MEMORY 报警百分比</h1><p>CPU_WARN_PERCENT = 70<br>MEM_WARN_PERCENT = 70</p>
<h1 id="php-fpm-单线程-报价值-M"><a href="#php-fpm-单线程-报价值-M" class="headerlink" title="php-fpm 单线程 报价值(M)"></a>php-fpm 单线程 报价值(M)</h1><p>RES_WARN = 128</p>
<h1 id="日志文件-s会替换成日期"><a href="#日志文件-s会替换成日期" class="headerlink" title="日志文件,%s会替换成日期"></a>日志文件,%s会替换成日期</h1><p>TODAY = time.strftime(‘%Y-%m-%d’,time.localtime(time.time()))<br>LOG_FILE = ‘/var/log/health<em>check</em>%s.log’ % TODAY</p>
<h1 id="用于显示执行时间的装饰器"><a href="#用于显示执行时间的装饰器" class="headerlink" title="用于显示执行时间的装饰器"></a>用于显示执行时间的装饰器</h1><p>def _show_time(func):<br>    @wraps(func)<br>    def wrapper(<em>args, **kwargs):<br>        print(“start %s … …” % func.<strong>name</strong>)<br>        start_time = time.time()<br>        func_result = func(</em>args, **kwargs)<br>        print(“%s 执行时间：%.3fs” % (func.<strong>name</strong>, time.time()-start_time))<br>        return func_result<br>    return wrapper</p>
<h1 id="用于将返回列表整理成字典的装饰器"><a href="#用于将返回列表整理成字典的装饰器" class="headerlink" title="用于将返回列表整理成字典的装饰器"></a>用于将返回列表整理成字典的装饰器</h1><p>def _collect_result(func):<br>    @wraps(func)<br>    def wrapper(<em>args, **kwargs):<br>        func_result = func(</em>args, **kwargs)<br>        return {func.<strong>name</strong>: {‘status’: ‘OK’, ‘process_list’: []}} if not func_result else {func.<strong>name</strong>: {‘status’: ‘WARN’, ‘process_list’: func_result}}<br>    return wrapper<br>@_show_time<br>@_collect_result<br>def check_cpu():<br>    if psutil.cpu_percent(0.01) &gt;= int(CPU_WARN_PERCENT):<br>        return get_top_process(‘cpu’, 10, True)<br>    else:<br>        return []<br>@_show_time<br>@_collect_result<br>def check_mem():<br>    if psutil.virtual_memory().percent &gt;= int(MEM_WARN_PERCENT):<br>        return get_top_process(‘mem’, 10, True)<br>    else:<br>        return []</p>
<h1 id="获取mem-cpu占用最高的n个进程"><a href="#获取mem-cpu占用最高的n个进程" class="headerlink" title="获取mem/cpu占用最高的n个进程"></a>获取mem/cpu占用最高的n个进程</h1><p>def get_top_process(option=’mem’,n=10,added=True):<br>    process_list = []<br>    for proc in psutil.process_iter():<br>        process_list.append((proc.name(), proc.memory_percent(), proc.cpu_percent(0.01)))<br>    process_list.sort(key=lambda process_list:process_list[0]) # 按进程名排序<br>    if added:</p>
<pre><code>    # 累加相同进程名进程资源占用百分比
    process_list = reduce(
        lambda x,y: x+[y] if x==[] or x[-1][0]!=y[0] else x[0:-1]+[(x[-1][0],x[-1][1]+y[1],x[-1][2]+y[2])],
        [[]] + process_list)
sort_index = 1 if option.lower() == &apos;mem&apos; else 2  # 排序列,option=mem,按prcess_list第2列(index=1)排序
# 将process_list按相应列从大到小排序,无累加-------# todo 先累加再排序
process_list.sort(key=lambda process_list:process_list[2 if sort_index==1 else 1], reverse=True)
process_list.sort(key=lambda process_list:process_list[sort_index], reverse=True)
return process_list[0:n]
</code></pre><p>@_show_time<br>@_collect_result<br>def check_zombie_process():<br>    zombie_process_list = []<br>    for proc in psutil.process_iter():<br>        if proc.status() == ‘zombie’:<br>            zombie_process_list.append(<br>                (proc.name(), proc.status(), proc.create_time(), proc.memory_percent(), proc.cpu_percent(0.01))<br>                )<br>    return zombie_process_list<br>@_show_time<br>@_collect_result<br>def check_single_process(process_name=’php-fpm’):<br>    warn_process_list = []<br>    for proc in psutil.process_iter():<br>        if proc.name() == process_name:<br>            if proc.memory_info().res()/1024/1024 &gt;= int(RES_WARN):<br>                warn_process_list.append(proc.name(), proc.create_time(), proc.memory_info().res(), proc.connections())<br>        return warn_process_list<br>@_show_time<br>def write_log(check_result):<br>    now= time.strftime(‘%Y-%m-%d %H:%M:%S’,time.localtime(time.time()))<br>    try:<br>        with open(LOG_FILE,’ab’) as f:<br>            f.writelines(now + ‘\t’ + check_result)<br>    except IOError:<br>        print(“写日志文件失败！”)<br>@_show_time<br>def send_mail(subject=EMAIL_SUBJECT, content=EMAIL_TPL):<br>    mail_body = content<br>    msg = MIMEText(mail_body, ‘html’, ‘utf-8’)<br>    msg[‘Subject’] = Header(subject, ‘utf-8’)<br>    msg[‘From’] = SMTP_USER<br>    msg[‘To’] = ‘,’.join(RECEIVER_LIST)<br>    smtp = smtplib.SMTP_SSL()<br>    smtp.connect(SMTP_SERVER,994)<br>    smtp.login(SMTP_USER, SMTP_PASSWD)<br>    for reserver in RECEIVER_LIST:<br>        smtp.sendmail(SMTP_USER, reserver, msg.as_string())<br>    smtp.quit()<br>    print(‘Email has send out!’)<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    print(“主程序开始”)<br>    start_time = time.time()<br>    check_result = reduce(<br>        lambda x,y: dict(x, **y),<br>        [check_cpu(), check_mem(), check_zombie_process(), check_single_process()]<br>        )<br>    for func, func_result in check_result.items():<br>        if func_result[‘status’] != ‘OK’:<br>            send_mail(func + ‘报警’,json.dumps(func_result))<br>            break<br>    write_log(json.dumps(check_result))<br>    print(“总程序执行时间：%.3fs” % (time.time()-start_time))</p>
]]></content>
      
        
        <tags>
            
            <tag> Psutil </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单爬虫框架分享]]></title>
      <url>/2018/02/01/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%88%86%E4%BA%AB.html</url>
      <content type="html"><![CDATA[<p>项目结构</p>
<p>config_load.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import os<br>import platform</p>
<h1 id="handle-the-differences-between-python2-and-python3"><a href="#handle-the-differences-between-python2-and-python3" class="headerlink" title="handle the differences between python2 and python3"></a>handle the differences between python2 and python3</h1><p>if (platform.python_version()) &lt; ‘3’:<br>    import ConfigParser<br>    import codecs<br>else:<br>    from configparser import ConfigParser, RawConfigParser, NoOptionError, NoSectionError<br>DEFAULT_CONF = os.path.join(os.path.dirname(<strong>file</strong>), ‘conf/spider.conf’)<br>DEFAULT_SECTION = ‘spider’<br>class Config:<br>    def <strong>init</strong>(self, config_file_path=DEFAULT_CONF):<br>        try:<br>            if (platform.python_version()) &lt; ‘3’:</p>
<pre><code>            # python 2
            self.cf = ConfigParser.ConfigParser()
            with codecs.open(config_file_path, encoding=&apos;utf-8-sig&apos;) as f:
                self.cf.readfp(f)
        else:
            # python3
            # self.cf = RawConfigParser()
            # self.cf.read(config_file_path, encoding=&apos;utf8&apos;)
            self.cf = ConfigParser()
            self.cf.read(config_file_path)
    except IOError:
        raise IOError
def get(self, option, section=DEFAULT_SECTION):
    &quot;&quot;&quot; get option from the config file&quot;&quot;&quot;
    return self.cf.get(section, option)
</code></pre><p>crawl_thread.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import platform<br>import time<br>from threading import Thread, Lock<br>import webpage_parser<br>import log</p>
<h1 id="handle-the-differences-between-python2-and-python3-1"><a href="#handle-the-differences-between-python2-and-python3-1" class="headerlink" title="handle the differences between python2 and python3"></a>handle the differences between python2 and python3</h1><p>if (platform.python_version()) &lt; ‘3’:<br>    import Queue<br>else:<br>    import queue as Queue</p>
<h1 id="store-the-urls-which-had-been-crawled-and-saved"><a href="#store-the-urls-which-had-been-crawled-and-saved" class="headerlink" title="store the urls which had been crawled and saved"></a>store the urls which had been crawled and saved</h1><p>visited_url_list = []<br>url_queue = Queue.Queue(maxsize=-1)<br>sub_url_queue = Queue.Queue(maxsize=-1)<br>visited_url_list_lock = Lock()  # lock the visited_url_list while appending new url<br>save_page_lock = Lock()<br>def muti_crawl(thread_count, reg, crawl_interval, crawl_timeout, output_dir):<br>    “””<br>    run multiple threads to run crawl(reg, output_dir)<br>    :param thread_count: type:int thread number read from config file<br>    :param reg: regex pattern for retrieving urls<br>    :param crawl_interval: threads waiting time<br>    :param crawl_timeout: threads timeout time<br>    :param output_dir: html page output dictionary<br>    :return: None<br>    “””</p>
<pre><code># new thread list
threads = []

# create threads
for i in range(thread_count):
    t = Thread(target=crawl, args=(reg, output_dir))
    threads.append(t)

# start threads
for i in range(thread_count):
    threads[i].setDaemon(True)
    threads[i].start()
    time.sleep(crawl_interval)  # waiting time

# waiting all threads to complete
for i in range(thread_count):
    threads[i].join(crawl_timeout)
</code></pre><p>def crawl(reg, output_dir):<br>    “””<br>    get url form the working queue, retrieve new urls and put to another queue then save the html page to output_dir<br>    :param reg: type:str retrieve url regex pattern<br>    :param output_dir: type:str read from config file<br>    :return: None<br>    “””<br>    while not url_queue.empty():</p>
<pre><code># get one url from url_queue
current_url = url_queue.get()

# retrieve urls from current_url using reg as regex pattern
urls = webpage_parser.retrieve_urls(current_url, reg)

# save current_url as html page in output_dir
save_page_lock.acquire()
webpage_parser.save_page(current_url, output_dir)
save_page_lock.release()

# lock the visited_url_list while appending new url
visited_url_list_lock.acquire()
visited_url_list.append(current_url)
visited_url_list_lock.release()

# if current_url is valid and has urls
if urls:
    log.logger.debug(&quot;current url: %s&quot; % current_url)
    for url in urls:
        if url not in visited_url_list:
            # put new urls to new queue if url is not visited
            sub_url_queue.put(url)
</code></pre><p>log.py</p>
<h1 id="usr-bin-env-python"><a href="#usr-bin-env-python" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding=utf-8 --"></a>-<em>- coding=utf-8 -</em>-</h1><p>import logging<br>import time<br>import os<br>DEFAULT_LOG_FILE<em>PRX = ‘spider</em>‘<br>log_dir = os.path.join(os.path.dirname(<strong>file</strong>),’log’)</p>
<h1 id="def-log-config-log-dir-output-log-lever-console-log-lever"><a href="#def-log-config-log-dir-output-log-lever-console-log-lever" class="headerlink" title="def log_config(log_dir, output_log_lever, console_log_lever):"></a>def log_config(log_dir, output_log_lever, console_log_lever):</h1><p>date = time.strftime(‘%Y%m%d’, time.localtime(time.time()))<br>log_file = os.path.join(log_dir, DEFAULT_LOG_FILE_PRX + date + “.log”)<br>logger = logging.getLogger(“mylogger”)<br>logger.setLevel(logging.DEBUG)<br>fh = logging.FileHandler(log_file, mode=’a’)<br>fh.setLevel(logging.DEBUG)   # output log_level<br>ch = logging.StreamHandler()<br>ch.setLevel(logging.DEBUG)   # console log_level<br>formatter = logging.Formatter(“%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s”)<br>fh.setFormatter(formatter)<br>ch.setFormatter(formatter)<br>logger.addHandler(fh)<br>logger.addHandler(ch)</p>
<h1 id="return-logger"><a href="#return-logger" class="headerlink" title="return logger"></a>return logger</h1><p>mini_spider.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-3"><a href="#coding-utf-8-3" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import json<br>import time<br>import os<br>import log<br>import seedfile_load<br>import option_parser<br>import config_load<br>import crawl_thread<br>def main():<br>    “””<br>    main method<br>    :return: None<br>    “””</p>
<pre><code># handle command options
if option_parser.options.conf:
    config = config_load.Config(option_parser.options.conf)
else:
    config = config_load.Config()

if option_parser.options.version:
    project_info_file = os.path.join(os.path.dirname(__file__), &quot;.project_info.json&quot;)
    with open(project_info_file, &quot;r&quot;) as f:
        print(json.load(f)[&apos;version&apos;])
    exit()
# get config options
reg = config.get(&apos;target_url&apos;)
max_depth = int(config.get(&apos;max_depth&apos;))
crawl_interval = float(config.get(&apos;crawl_interval&apos;))
crawl_timeout = float(config.get(&apos;crawl_timeout&apos;))

# logging start time
log.logger.debug(&quot;spider start at: &quot; + time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(time.time())) + &quot; ---&quot;)
start_time = time.time()
# iterate base_urls from seed file
for base_url in seedfile_load.get_urls(seed_file=config.get(&apos;url_list_file&apos;)):

    # make dirs in output_dir for each url
    output_dir = os.path.join(config.get(&apos;output_directory&apos;), *base_url.split(&apos;/&apos;)[2:])
    log.logger.debug(&quot;output_dir: &quot; + output_dir)
    if not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
        except IOError:
            log.logger.error(&quot;make out_put dir error&quot;)

    crawl_thread.url_queue.put(base_url)   # add base_url to the url_queue of crawl_thread moudle
    log.logger.debug(&quot;base url: %s&quot; % base_url)
    log.logger.debug(&quot;max depth: &quot; + str(max_depth))

    # BFs-breadth first, consume all urls of url_queue,put new producing urls to sub_url_queue
    # and then redirect sub_url_queue to url_queue
    for current_depth in range(0, max_depth):
        log.logger.debug(&quot;current depth: %s&quot; % current_depth)
        log.logger.debug(&quot;current queue size: %d&quot; % crawl_thread.url_queue.qsize())
        crawl_thread.muti_crawl(thread_count=int(config.get(&apos;thread_count&apos;)),
                                reg=reg,
                                crawl_interval=crawl_interval,
                                crawl_timeout=crawl_timeout,
                                output_dir=output_dir)

        # make sub_url_queue the working queue
        crawl_thread.url_queue = crawl_thread.sub_url_queue
        current_depth += 1

# logging end time and full duration
log.logger.debug(&quot;spider gracefully end at: &quot; + time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(time.time())) +
                 &quot; Full Duration: &quot; + str(time.time() - start_time) + &apos;s&apos; + &quot; ---&quot;)
</code></pre><p>main()</p>
<p>option_parser.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-4"><a href="#coding-utf-8-4" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import optparse</p>
<h1 id="comand-option-parser-for-mini-spider-py"><a href="#comand-option-parser-for-mini-spider-py" class="headerlink" title="comand option parser for mini_spider.py"></a>comand option parser for mini_spider.py</h1><p>parser = optparse.OptionParser()<br>parser.add_option(“-c”, “–conf”, action=”store”, dest=”conf”, help=”load config file”, metavar=”FILE”)<br>parser.add_option(“-v”, “–version”, action=”store_true”, dest=”version”, help=”show project version”)<br>(options, args) = parser.parse_args()</p>
<p>seedfile_load.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-5"><a href="#coding-utf-8-5" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>def get_urls(seed_file):<br>    “””<br>    get urls from seed file,a new blank line needed at the end of the file<br>    @:param seed_file type:str seed_file path, read from the config file<br>    “””<br>    with open(seed_file, ‘r’) as f:</p>
<pre><code># add &apos;http://&apos;; if url not contains &apos;http&apos;
return map(lambda x: &apos;http://&apos;; + x[:-1] if &apos;http&apos; not in x else x[:-1], f.readlines())
</code></pre><p>webpage_parser.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-6"><a href="#coding-utf-8-6" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import re<br>import os<br>import platform<br>import log</p>
<h1 id="handle-the-difference-between-python2-and-python3"><a href="#handle-the-difference-between-python2-and-python3" class="headerlink" title="handle the difference between python2 and python3"></a>handle the difference between python2 and python3</h1><p>if (platform.python_version()) &lt; ‘3’:<br>    import urllib<br>    import HTMLParser<br>else:<br>    import urllib.request as urllib<br>    import html.parser as HTMLParser<br>class UrlParser(HTMLParser.HTMLParser):<br>    def <strong>init</strong>(self):<br>        self.links = []<br>        HTMLParser.HTMLParser.<strong>init</strong>(self)</p>
<pre><code>def handle_starttag(self, tag, attrs):
    if tag == &apos;a&apos;:
        for name, value in attrs:
            if name == &apos;href&apos;:
                self.links.append(value)

def get_links(self):
    return self.links
</code></pre><p>def retrieve_urls(current_url, pattern):<br>    “””<br>    retrieve urls from url using regex pattern<br>    @:param url type:str should contains ‘http://‘;<br>    @:param reg type:str regex pattern read from spider.conf<br>    :return url_list(type:list) if current_url is valid<br>    :return None if url is invalid<br>    “””<br>    parser = UrlParser()<br>    try:<br>        parser.feed(urllib.urlopen(current_url).read())<br>        links = parser.get_links()</p>
<pre><code>    # log.logger.debug(&quot;links: &quot; + &apos;,&apos;.join(links))
    reg_pattern = re.compile(pattern)
    # log.logger.debug(&apos;reg pattern: &apos; + pattern)
    url_list = []
    for link in links:
        # log.logger.debug(&apos;link: &apos; + link)
        match = re.match(reg_pattern, link)

        if match:
            # log.logger.debug(&apos;match result: &apos; + match.group())
            url_list.append(match.group())
        else:
            pass
            # log.logger.debug(&apos;match result: &apos; + &quot;None&quot;)

    url_list = list(set(url_list))  # remove duplicated urls
    # log.logger.debug(&quot;url_list: &quot; + &quot;,&quot;.join(url_list))

    # if urls in url_list not contains &apos;http&apos; then add current_url before
    # if urls contains &apos;javascript&apos; add current_url and the last part
    def format_url(url):
        if &quot;&amp;quot;&quot; in url:
            url = url.replace(&quot;&amp;quot;&quot;, &apos;&quot;&apos;)
        if &quot;&amp;nbsp;&quot; in url:
            url = url.replace(&quot;&amp;nbsp;&quot;, &quot; &quot;)

        if &apos;http&apos; in url:
            return url
        elif url[:2] == &apos;//&apos;:
            return &apos;http:&apos; + url
        else:
            base_url = &apos;/&apos;.join(current_url.split(&apos;/&apos;)[:-1])
            if &apos;javascript&apos; in url:
                if &apos;=&apos; in url:
                    try:
                        return base_url + &apos;/&apos; + url.split(&apos;=&apos;)[1][1:]
                    except IndexError:
                        log.logger.warning(&quot;url: %s format fail&quot; % url)
                else:
                    return None
            else:
                return base_url + &apos;/&apos; + url
    url_list = map(format_url, url_list)

    return url_list
except IOError:
    log.logger.warning(&quot;current url: %s is invalid&quot; % current_url)
    return None
</code></pre><p>def save_page(url, output_dir):<br>    “””<br>    save url html page to output_dir<br>    :param url: url to save, should contains .html, will makedirs if uri contains muti dirs<br>    :param output_dir: base output dir<br>    :return: None<br>    “””<br>    if output_dir[0] != ‘/‘:<br>        if output_dir[:2] == ‘./‘:<br>            output_dir = output_dir[2:]<br>        output_dir = os.path.join(os.path.dirname(<strong>file</strong>), output_dir)<br>    log.logger.debug(“url: “ + url)<br>    uri = url.split(‘/‘)[3:]<br>    log.logger.debug(“uri: “ + ‘,’.join(uri))<br>    if uri:<br>        file_dir = os.path.join(output_dir, *uri[:-1])  # eg. ./output/page1/page1_1<br>        file_name = uri[-1]<br>    else:<br>        file_dir = output_dir<br>        file_name = ‘index.html’</p>
<pre><code>log.logger.debug(&quot;file_dir: &quot; + file_dir)
if not os.path.exists(file_dir):
    if &apos;Windows&apos; in platform.platform():
        try:
            os.makedirs(file_dir)  # make sub dirs in output dir
        except WindowsError:
            log.logger.error(&quot;create dirs: %s fail&quot;, file_dir)
    else:
        try:
            os.makedirs(file_dir)  # make sub dirs in output dir
        except OSError:
            log.logger.error(&quot;create dirs: %s fail&quot;, file_dir)

file_path = os.path.join(file_dir, file_name)  # eg. page1_1_1.html
log.logger.debug(&quot;file_path: &quot; + file_path)
try:
    urllib.urlretrieve(url, file_path)  # save html
except IOError:
    log.logger.error(&quot;save file: %s fail&quot; % file_path)
</code></pre><p>conf/spider.conf<br>[spider]<br>url_list_file: ./seed/urls ; 种子文件路径<br>output_directory: ./output ; 抓取结果存储目录<br>max_depth: 3 ; 最大抓取深度(种子为0级)<br>crawl_interval: 1 ; 抓取间隔. 单位: 秒<br>crawl_timeout: 1 ; 抓取超时. 单位: 秒<br>target_url: .*.html|htm ; 需要存储的目标网页URL pattern(正则表达式)<br>thread_count: 8 ; 抓取线程数</p>
<p>seed/urls<br>www.baidu.com<br>www.sina.com</p>
<p>.project_info.json<br>{<br>  “project_name”: “mini_spider”,<br>  “author”: “Li Dan”,<br>  “version”: “0.1”,<br>  “last_update”: “2018/01/13”<br>}</p>
<p>test/test_config.py</p>
<p>test/test_crawl_thread.py</p>
<p>test/test_option_parser.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-7"><a href="#coding-utf-8-7" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import os<br>import unittest<br>import json<br>import subprocess<br>class TestOptionParser(unittest.TestCase):<br>    def setUp(self):<br>        pass</p>
<pre><code>def tearDown(self):
    pass

@staticmethod
def cmd(cmd):
    mytask = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT)

    stdstr = mytask.stdout.read()
    return stdstr

def test_option_help(self):
    self.assertTrue(&apos;show this help message and exit&apos; in self.cmd(&apos;python ../mini_spider.py -h&apos;))
    self.assertTrue(&apos;show this help message and exit&apos; in self.cmd(&apos;python ../mini_spider.py --help&apos;))

def test_option_version(self):
    project_info_file = os.path.join(os.path.dirname(__file__), &quot;../.project_info.json&quot;)
    with open(project_info_file, &quot;r&quot;) as f:
        version = json.load(f)[&apos;version&apos;]
    self.assertTrue(version in self.cmd(&apos;python ../mini_spider.py -v&apos;))
    self.assertTrue(version in self.cmd(&apos;python ../mini_spider.py --version&apos;))

def test_option_conf(self):
    pass

def test_option_conf_no_args(self):
    self.assertTrue(&apos;option requires 1 argument&apos; in self.cmd(&apos;python ../mini_spider.py -c&apos;))
    self.assertTrue(&apos;option requires 1 argument&apos; in self.cmd(&apos;python ../mini_spider.py --conf&apos;))

def test_config_file_not_exist(self):
    pass
</code></pre><p>test_seedfile_load.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-8"><a href="#coding-utf-8-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import unittest<br>import os<br>class TestSeedFileLoad(unittest.TestCase):<br>    def setUp(self):<br>        self.seed_file = os.path.join(os.path.dirname(<strong>file</strong>), ‘../seed/urls’)<br>        self.origin_content = self.read_seed_file()</p>
<pre><code>def tearDown(self):
    self.write_seed_file(self.origin_content)

def read_seed_file(self):
    with open(self.seed_file) as f:
        return f.read()

def write_seed_file(self, content):
    with open(self.seed_file, &apos;w&apos;) as f:
        f.write(self.origin_content)

def test_muti_lines(self):
    pass

def test_no_new_line_end(self):
    pass

def test_url_contains_http(self):
    pass

def test_seed_file_not_exists(self):
    pass
</code></pre><p>test_webpage_parser.py</p>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-9"><a href="#coding-utf-8-9" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>import unittest<br>import webpage_parser<br>class TestSeedFileLoad(unittest.TestCase):<br>    def setUp(self):<br>        pass</p>
<pre><code>def tearDown(self):
    pass
@staticmethod
def format_url(current_url, url):
    if &quot;&amp;quot;&quot; in url:
        url = url.replace(&quot;&amp;quot;&quot;, &apos;&quot;&apos;)
    if &quot;&amp;nbsp;&quot; in url:
        url = url.replace(&quot;&amp;nbsp;&quot;, &quot; &quot;)

    if &apos;http&apos; in url:
        return url
    elif url[:2] == &apos;//&apos;:
        return &apos;http:&apos; + url
    elif &apos;javascript&apos; in url:
        if &apos;=&apos; in url:
            try:
                return current_url + &apos;/&apos; + url.split(&apos;=&apos;)[1][1:]
            except IndexError:
                print(&quot;url: %s format fail&quot; % url)
        else:
            return None
    else:
        return current_url + &apos;/&apos; + url

def test_save_html(self):
    webpage_parser.save_page(&apos;pycm.baidu.com:8081/page1.html&apos;, &apos;./output&apos;)
    try:
        with open(&apos;../output/baidu.html&apos;, &apos;r&apos;) as f:
            html = f.read()
        self.assertTrue(&apos;page1.html&apos; in html)
    except IOError:
        self.fail(&apos;no html fail saved&apos;)
def test_save_html_with_dirs(self):
    webpage_parser.save_page(&apos;pycm.baidu.com:8081/page1/page1_1.html&apos;, &apos;output&apos;)
    try:
        with open(&apos;../output/page1/page1_1.html&apos;, &apos;r&apos;) as f:
            html = f.read()
        self.assertTrue(&apos;page1_1&apos; in html)
    except IOError:
        self.fail(&apos;no html fail saved&apos;)
def test_format_url(self):
    self.assertEqual(self.format_url(&apos;http://www.baidu.com&apos;;, &apos;//www.baidu.com/cache/sethelp/help.html&apos;;),
                     &apos;http://www.baidu.com/cache/sethelp/help.html&apos;;)
    self.assertEqual(self.format_url(&apos;http://www.baidu.com&apos;;, &apos;http://www.baidu.com/cache/sethelp/help.html&apos;;),
                     &apos;http://www.baidu.com/cache/sethelp/help.html&apos;;)
    self.assertEqual(self.format_url(&apos;http://www.baidu.com&apos;;, &apos;https://www.baidu.com&apos;;),
                     &apos;https://www.baidu.com&apos;;)
    self.assertEqual(self.format_url(&apos;http://www.baidu.com&apos;;, &apos;javascript;&apos;),
                     None)
    self.assertEqual(self.format_url(&apos;http://www.baidu.com&apos;;, &apos;javascript:location.href=&amp;quot;page4.html&apos;),
                     &apos;http://www.baidu.com/page4.html&apos;;)
    self.assertEqual(self.format_url(&apos;http://www.baidu.com&apos;;, &apos;page4.html&apos;),
                     &apos;http://www.baidu.com/page4.html&apos;;)

def test_retrieve_urls(self):
    url_list = webpage_parser.retrieve_urls(&apos;http://www.baidu.com&apos;;, &apos;.*.html|htm&apos;)
    self.assertTrue(&apos;http://www.baidu.com/gaoji/preferences.html&apos;; in url_list)
    # print url_list
    url_list = webpage_parser.retrieve_urls(&apos;http://www.baidu.com/gaoji/preferences.html&apos;;, &apos;.*.html|htm&apos;)
    self.assertTrue(url_list == [])
    url_list = webpage_parser.retrieve_urls(&apos;http://www.baidu.com/cache/sethelp/help.html&apos;;, &apos;.*.html|htm&apos;)
    # print url_list
    self.assertTrue(&apos;http://www.baidu.com/duty/index.html&apos;; in url_list)
    url_list = webpage_parser.retrieve_urls(&apos;http://www.baidu.com/duty/index.html&apos;;, &apos;.*.html|htm&apos;)
    print url_list
    self.assertTrue(&apos;http://www.baidu.com/duty/yinsiquan.html&apos;; in url_list)
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[敏捷开发学习笔记.md]]></title>
      <url>/2018/02/01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<h2 id="敏捷开发流程价值观"><a href="#敏捷开发流程价值观" class="headerlink" title="敏捷开发流程价值观"></a>敏捷开发流程价值观</h2><ul>
<li>以人为核心，迭代，循序渐进</li>
<li>项目被切分为多个子项目，每个子项目都经过测试，具备集成和可运行的特征</li>
<li>5个价值观：沟通、简单、反馈、勇气、谦逊</li>
</ul>
<h2 id="敏捷模型与瀑布模型的区别"><a href="#敏捷模型与瀑布模型的区别" class="headerlink" title="敏捷模型与瀑布模型的区别"></a>敏捷模型与瀑布模型的区别</h2><ul>
<li>相对于瀑布模型，提高开发效率和响应能力</li>
<li>瀑布模型以文档为驱动，敏捷开发只写必要的文档，尽量少写文档，注重人与人之间面对面的交流，强调以人为核心。</li>
</ul>
<h2 id="Scrum-‘争球’"><a href="#Scrum-‘争球’" class="headerlink" title="Scrum ‘争球’"></a>Scrum ‘争球’</h2><ul>
<li>15-30天一个冲刺 提交一个增量（新特性*）</li>
<li>产品需求（pruduct backlog）-&gt;优先级排序-&gt;选择需求-&gt;冲刺会议（需求评审）-&gt;</li>
<li>冲刺过程中 冲刺订单（sprint backlog）,需求是被冻结的，不能修改</li>
<li>优点：容易学习</li>
</ul>
<h2 id="敏捷方法-极限编程XP与Scrum的区别"><a href="#敏捷方法-极限编程XP与Scrum的区别" class="headerlink" title="敏捷方法 极限编程XP与Scrum的区别"></a>敏捷方法 极限编程XP与Scrum的区别</h2><p>Scrum偏重于过程，XP偏重于实践，实际中，两者是结合一起应用的</p>
<ol>
<li>迭代长队不同  XP 的一个Sprint(冲刺) 1~2周  Scrum 2~4周</li>
<li>迭代中，是否允许修改需求 XP 没有实现的需求可以更改，Scrum不允许更改需求</li>
<li>在迭代中，User Story(用户需求）是否严格按优先级实现  XP严格按照 Scrum灵活处理</li>
<li>软件实施过程中是否采用严格的工程方法 XP对整个流程方法定义严格，需采用TDD,自动测试，结对编程，简单设计，重构等约束团队  Scrum靠开发者自觉</li>
</ol>
<p>##会议</p>
<ul>
<li>每日站会<br><code>今天你完成了哪些工作？明天你打算做什么？完成你的目标是否存在什么障碍？（Scrum主管需要记下这些障碍）</code></li>
<li>需求评审</li>
<li>冲刺完成后，冲刺回顾会议</li>
</ul>
<p>##文档</p>
<ul>
<li>产品订单（需求-产品原型）</li>
<li>冲刺订单（研发排期、测试排期、测试计划等）</li>
<li>燃尽图（Bug统计）</li>
<li>工作日报</li>
<li>周会分享</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 测试过程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[uc-checker,UI自动化测试框架分享]]></title>
      <url>/2017/12/21/ui-checker,UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%88%86%E4%BA%AB.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>北京麻辣诱惑有限公司 信息技术部 测试组 韩志超</p>
</blockquote>
<h2 id="UI自动化测试的意义"><a href="#UI自动化测试的意义" class="headerlink" title="UI自动化测试的意义"></a>UI自动化测试的意义</h2><ol>
<li>验证页面交互的一致性</li>
<li>验证前后端分离项目验证前端数据的正确性</li>
<li>补充覆盖接口测试无法覆盖的业务场景</li>
</ol>
<h2 id="UI自动化测试的策略"><a href="#UI自动化测试的策略" class="headerlink" title="UI自动化测试的策略"></a>UI自动化测试的策略</h2><ol>
<li>验证所有页面是否都能正常显示</li>
<li>验证核心业务流程，如下单，查询订单，开具发票，申购，调拨，盘点等</li>
</ol>
<h2 id="测试框架的本质及实现要点"><a href="#测试框架的本质及实现要点" class="headerlink" title="测试框架的本质及实现要点"></a>测试框架的本质及实现要点</h2><h3 id="测试框架的本质"><a href="#测试框架的本质" class="headerlink" title="测试框架的本质"></a>测试框架的本质</h3><ol>
<li>对重复的操作进行封装</li>
<li>有效的组织，配置、用例、数据、报告等</li>
</ol>
<h3 id="测试框架的实现要点"><a href="#测试框架的实现要点" class="headerlink" title="测试框架的实现要点"></a>测试框架的实现要点</h3><ol>
<li>稳定，健壮性</li>
<li>易用，可配置，兼容性</li>
<li>运行控制，灵活性，效率</li>
<li>方便debug，日志，截图，报告及邮件</li>
<li>参数化</li>
</ol>
<h3 id="UI自动化测试基础框架对比"><a href="#UI自动化测试基础框架对比" class="headerlink" title="UI自动化测试基础框架对比"></a>UI自动化测试基础框架对比</h3><blockquote>
<p>由于QTP只支持IE和Firefox,且为商业工具，方案选择时选择了selenium + python<br>基础框架对比基于python单元测试框架:unittest,nose,pytest 及 robot framework(RF)</p>
</blockquote>
<table>
<thead>
<tr>
<th>对比项</th>
<th>unittest</th>
<th>nose</th>
<th>pytest</th>
<th>RF</th>
</tr>
</thead>
<tbody>
<tr>
<td>执行器</td>
<td>无</td>
<td>nosetest</td>
<td>pytest/py.test</td>
<td>pybot</td>
</tr>
<tr>
<td>discover</td>
<td>支持<br>用例类需要继承unittest.TestCase</td>
<td>支持<br>模块/类/用例以test/Test开头</td>
<td>支持<br>同nose</td>
<td>支持</td>
</tr>
<tr>
<td>skip/make fail</td>
<td>@unittest.skip()<br>@unittest.skipIf()<br>…</td>
<td>from nose.plugins.skip import SkipTest<br>raise SkipTest</td>
<td>@pytest.mark.skipif()<br>@pytest.mark.xfail</td>
<td>无</td>
</tr>
<tr>
<td>fixture</td>
<td>setUp/tearDown<br>setUpClass/tearDownClass<br>setUpMoudle/tearDownMoudle</td>
<td>同unittest(继承unittest.TestCase类)<br>使用装饰器）</td>
<td>@pytest.fixture(session=”session”autouser=True)<br>作用域支持function\module\session<br>autouser=Ture默认执行</td>
<td>[SetUp] … <br>[Teardown]… 支持project,suite,case作用域</td>
</tr>
<tr>
<td>参数化</td>
<td>无</td>
<td>无</td>
<td>@pytest.mark.parametrize(“a,b,expected”, testdata)</td>
<td>[Template] 1 2 3</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>attrib标签<br>from nose.plugins.attrib import attr<br>@attr(type=’smoke’)<br>def test_demo1():<br>…<br>nostests -a type=smoke</td>
<td>@pytest.mark.smoke<br>pytest -m smoke</td>
<td>[Tags] smoke<br>pybot -i/-e smoke</td>
</tr>
<tr>
<td>timeout/time limit</td>
<td>无</td>
<td>from nose.tools import timed<br>@timed(30)<br>def test_demo()…</td>
<td>pip install pytest-timeout<br>@pytest.mark.timeout(30)或pytest –timeout=30</td>
<td>[Timeout]  30 seconds</td>
</tr>
<tr>
<td>list case</td>
<td>无</td>
<td>nosetests –collect-only</td>
<td>pytest -v –collect-only</td>
<td>未知</td>
</tr>
<tr>
<td>rerun fail case</td>
<td>无</td>
<td>nosetests –failed</td>
<td>pip install pytest-rerunfailures<br>@pytest.mark.flaky(rerun=1)或pytest –rerun=1</td>
<td>robot –rerunfailed</td>
</tr>
<tr>
<td>log</td>
<td>无</td>
<td>支持，运行参数</td>
<td>支持，运行参数</td>
<td>支持，自动生成log和出错截图</td>
</tr>
<tr>
<td>xml报告/Jenkins集成</td>
<td>无</td>
<td>nosetests –with-xunit –xunit-file=支持allure报告<br>pip install pytest-nose-adaptor</td>
<td>pytest –junit-xml=<br>支持allure报告<br>pip install pytest-allure-adaptor</td>
<td>支持，自动生成</td>
</tr>
<tr>
<td>html报告</td>
<td>三方HtmlTestRunner(python2.0)</td>
<td>pip install nose-htmloutput<br>nosetests –with-html –html-file=</td>
<td>pip install pytest-html<br>pytest –html=</td>
<td>支持，自动生成</td>
</tr>
<tr>
<td>baseline对比</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>发送email</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>并发/多线程</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>Selenium支持</td>
<td>原生库</td>
<td>原生库</td>
<td>pytest-selenium</td>
<td>robotframework-seleniumlibrary<br>robotframework-selenium2library</td>
</tr>
</tbody>
</table>
<p><strong> 选择unittest,是因为其为python的核心库，提供了用例组织的基础功能，二次开发的灵活性更好 </strong></p>
<h2 id="框架结构及要点实现原理"><a href="#框架结构及要点实现原理" class="headerlink" title="框架结构及要点实现原理"></a>框架结构及要点实现原理</h2><blockquote>
<p>基于 python2/3 + unittest + selenium<br>需要安装Chrome</p>
</blockquote>
<h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-ui_checker                                         ---项目目录</span><br><span class="line">    -conf                                           ---配置文件目录</span><br><span class="line">        default.conf</span><br><span class="line">    -data                                           ---数据文件目录</span><br><span class="line">        test_customer_ccustomer_index<span class="selector-class">.ini</span>           ---数据文件</span><br><span class="line">    -driver                                         ---浏览器驱动目录</span><br><span class="line">    -page_obj                                       ---页面对象目录</span><br><span class="line">        base_page<span class="selector-class">.py</span>                                ---页面对象原型</span><br><span class="line">        -customer                                   ---模块</span><br><span class="line">            -CCustomer                              ---子模块</span><br><span class="line">                index<span class="selector-class">.py</span>                            ---页面对象</span><br><span class="line">                index<span class="selector-class">.property</span>                      ---页面元素</span><br><span class="line">    -report                                         ---运行报告目录</span><br><span class="line">        -log                                        ---报告目录</span><br><span class="line">        -snapshot                                   ---截图目录</span><br><span class="line">        customer_2017-<span class="number">11</span>-<span class="number">29</span>_162338_result<span class="selector-class">.html</span>      ---测试报告</span><br><span class="line">    -test_case                                      ---测试用例目录</span><br><span class="line">        base_case<span class="selector-class">.py</span>                                ---用例原型</span><br><span class="line">        -customer</span><br><span class="line">            test_ccustomer_index<span class="selector-class">.py</span>                 ---测试用例</span><br><span class="line">    -tools                                          ---其他工具目录</span><br><span class="line">    -util                                           ---公共方法目录</span><br><span class="line">        browser<span class="selector-class">.py</span>                                  ---封装浏览器对象，支持Chrome Headless和Grid分布式</span><br><span class="line">        config<span class="selector-class">.py</span>                                   ---解析default.conf配置</span><br><span class="line">        data_file_parser<span class="selector-class">.py</span>                         ---解析各种数据文件</span><br><span class="line">        db<span class="selector-class">.py</span>                                       ---数据库操作封装</span><br><span class="line">        decorator<span class="selector-class">.py</span>                                ---运行控制装饰器</span><br><span class="line">        HTMLTestRunnerCN<span class="selector-class">.py</span>                         ---生成报告，美化页面，支持python2/<span class="number">3</span></span><br><span class="line">        log<span class="selector-class">.py</span>                                      ---log配置</span><br><span class="line">        option_parser<span class="selector-class">.py</span>                            ---run_all_test 运行参数解析</span><br><span class="line">        root<span class="selector-class">.py</span>                                     ---解析项目目录，用于拼装绝对路径</span><br><span class="line">        selenium_easy<span class="selector-class">.py</span>                            ---基于xpath,增加元素定位及操作方法</span><br><span class="line">    run_all_test<span class="selector-class">.py</span>                                 ---执行入口文件</span><br></pre></td></tr></table></figure>
<h3 id="要点实现原理"><a href="#要点实现原理" class="headerlink" title="要点实现原理"></a>要点实现原理</h3><ol>
<li>健壮性—采用PageObject模式，页面对象与元素分离，元素写到单独的文件中</li>
<li>易用—封装页面对象原型和用例原型，通过继承简化操作，selenium_easy模式</li>
<li>效率—Chrome Headless模式，按模块多线程并发</li>
<li>参数化—通过python装饰器实现，数据文件采用config文件，支持多组数据<br>装饰器<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(data_file, section=<span class="string">'default'</span>)</span></span>:    <span class="comment"># 使用该装饰器的方法必须具有data参数</span></span><br><span class="line">    data_path = <span class="string">'../data/'</span></span><br><span class="line">    _data_file = data_path + data_file + <span class="string">".config"</span></span><br><span class="line">    data = ConfFile.load_section(_data_file, section)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_data</span><span class="params">(func)</span></span><span class="symbol">:</span></span><br><span class="line">        @wraps(func)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*_args, **_kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">            _kwargs[<span class="string">'data'</span>]=data</span><br><span class="line">            <span class="keyword">return</span> func(*_args, **_kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> _data</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>数据文件 test_customer_ccustomer_index.ini<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[customer_not_exists]</span></span><br><span class="line"><span class="attr">phone</span>=<span class="number">18010181268</span></span><br></pre></td></tr></table></figure></p>
<p>用例<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@data(<span class="string">'test_customer_ccustomer_index'</span>,<span class="string">'customer_not_exists'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_search_not_exist_customer</span><span class="params">(<span class="keyword">self</span>,data)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">self</span>.search_phone(data[<span class="string">'phone'</span>])</span><br></pre></td></tr></table></figure></p>
<ol>
<li>方便debug—log及通过装饰器，显示项selenium操作时间</li>
<li>用例执行<br>6.1. 用例level(tags)<br>装饰器<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level</span><span class="params">(level)</span>:</span></span><br><span class="line">    test_level = Config.option(<span class="string">'runtime'</span>,<span class="string">'test_level'</span>)   <span class="comment"># 通过配置文件中的test_level控制</span></span><br><span class="line">    <span class="keyword">if</span> test_level == <span class="number">0</span> <span class="keyword">or</span> test_level == level:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> func: func</span><br><span class="line">    <span class="keyword">return</span> unittest.skip(<span class="string">"skip this level cases"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>配置文件 default.con<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[runtime]</span><br><span class="line"><span class="attribute">test_level</span>=1  # 默认<span class="attribute">test_level</span>=0 ，执行所有用例</span><br></pre></td></tr></table></figure></p>
<p>用例<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@level</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable">@data</span>(<span class="string">'test_customer_ccustomer_index'</span>,<span class="string">'customer_not_exists'</span>)</span><br><span class="line">def test_search_not_exist_customer(self,data):</span><br><span class="line">    self.search_phone(data[<span class="string">'phone'</span>])</span><br></pre></td></tr></table></figure></p>
<p>6.2. timeout控制—装饰器(略)<br>6.3. 命令行参数解析—option_parser</p>
<ol>
<li>数据对比—在页面配置文件中配好各元素的db_map，支持db_compare_all</li>
<li>环境清理—需要自行调用db.py中的exec_sql方法，通过执行sql清理环境</li>
</ol>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ol>
<li>采用PageObject模式封装每个操作页面，支持页面与元素分离</li>
<li>支持selenium_easy模式，按人类习惯，通过链接/按钮文字，Form前置标签识别/操作控件，支持多个相同标签控件的识别</li>
<li>支持Json/XML/CSV/Excel/Config类型的数据文件解析，支持将数据文件完整解析成dict格式，或从中获取某个值</li>
<li>支持数据连接及对比数据库的值</li>
<li>支持Chrome Headless无界面模式运行，支持Grid分布式运行或Remote模式</li>
<li>支持按模块并发执行用例，每个模块生成各自的报告</li>
<li>支持邮件/截图/log</li>
<li>支持显示webdriver各项操作消耗时间，支持time_out设置，支持多线程重复某一操作， 支持制定test case level</li>
<li>支持 Windows/Linux + python2.<em>/python3.</em> </li>
</ol>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><blockquote>
<p>推荐 Windows 7/10 + Python 3.<em> + selenium3.5 + Chrome 62以上<br>或 CentOS 7.</em> + Python2.7 + selenium3.5 + google-chrome-stable最新版</p>
</blockquote>
<p>以Windows为例：</p>
<ol>
<li>下载安装Chrome最新版</li>
<li>下载安装Git Windows客户端</li>
<li>下载安装python3.6.3（自动安装pip和配置好环境变量）</li>
<li>安装python第三方库，打开cmd<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> selenium</span><br><span class="line">pip <span class="keyword">install</span> pymysql</span><br><span class="line">pip <span class="keyword">install</span> xlrd</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用项目"><a href="#使用项目" class="headerlink" title="使用项目"></a>使用项目</h3><ol>
<li><p>克隆项目，打开cmd</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="variable">@192</span>.<span class="number">168.100</span>.<span class="number">240</span><span class="symbol">:hanzhichao/ui_checker</span>.git</span><br><span class="line">cd ui_checker</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置项目</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开conf/<span class="keyword">default</span>.conf</span><br><span class="line">修改[env]下base_url及登录用户名和密码,保存</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行所有用例</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> run_all_test.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="编写用例"><a href="#编写用例" class="headerlink" title="编写用例"></a>编写用例</h3><ol>
<li><p>完善page_obj对象</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.1</span> 根据页面菜单url确定所在模块，如<span class="string">"综合管理系统&gt;部门管理&gt;新增部门"</span> 页面链接为.../admin/ADepartment/create</span><br><span class="line"><span class="number">1.2</span> 打开page_obj/目录下对应的模块下对应的<span class="keyword">py</span>文件，如page_obj/admin/ADepartment/create.<span class="keyword">py</span></span><br><span class="line"><span class="number">1.3</span> 完善<span class="keyword">menu</span>和subject：</span><br><span class="line">    如<span class="keyword">menu</span>=<span class="string">'综合管理系统'</span>,<span class="string">'部门管理'</span>,<span class="string">'新增部门'</span>（用于加载页面，注意：中间为英文逗号），</span><br><span class="line">    subject=<span class="string">'部门信息'</span>（页面主体，第一个头部主题，用于判断页面是否加载成功）</span><br><span class="line"><span class="number">1.4</span> 封装页面操作，<span class="number">3</span>种方式，参考page_obj/customer/CCustumer/下的：</span><br><span class="line">    <span class="built_in">index</span>.<span class="keyword">py</span>(selenium_easy模式)</span><br><span class="line">    index2.<span class="keyword">py</span>(标准PageObj模式)</span><br><span class="line">    index3.<span class="keyword">py</span>+index3.property(元素分离模式)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试用例</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入test<span class="number">_</span><span class="keyword">case</span>/相应模块下，如test<span class="number">_</span><span class="keyword">case</span>/admin</span><br><span class="line">新建test<span class="number">_</span>adepartment<span class="number">_</span>create.py文件</span><br><span class="line">编写该页面相关的用例，参考test<span class="number">_</span><span class="keyword">case</span>/customer/test<span class="number">_</span>ccustomer<span class="number">_</span>index.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>page_obj示例</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">from page_obj.base_page import BasePage</span><br><span class="line">from page_obj.index.index.login import LoginPage</span><br><span class="line">from util.browser import Chrome</span><br><span class="line">from util.db import DB</span><br><span class="line">from util.selenium_easy import Element, Input</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span>(<span class="title">BasePage</span>):</span></span><br><span class="line">    menu = (<span class="string">'客服管理系统'</span>, <span class="string">'综合管理'</span>, <span class="string">'综合信息'</span>)</span><br><span class="line">    subject = <span class="string">'会员信息'</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_phone</span><span class="params">(<span class="keyword">self</span>, phone)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.type(<span class="string">'电话搜索：'</span>, phone)</span><br><span class="line">        <span class="keyword">self</span>.click_btn(<span class="string">'搜索'</span>)</span><br><span class="line">        <span class="keyword">self</span>.sleep()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_work_bill</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.click(<span class="string">"显示更多内容"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.select(<span class="string">"来电原由"</span>, <span class="string">"订单"</span>)</span><br><span class="line">        <span class="keyword">self</span>.select(<span class="string">"来电原由"</span>, <span class="string">"创建订单"</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">self</span>.type_area(<span class="string">"备注"</span>, <span class="string">"自动化测试"</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">self</span>.click_btn(<span class="string">"保存"</span>, <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_order</span><span class="params">(<span class="keyword">self</span>, phone, station, code)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.search_phone(phone)</span><br><span class="line">        <span class="keyword">self</span>.save_work_bill()</span><br><span class="line">        <span class="keyword">self</span>.click(<span class="string">"显示更多内容"</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">self</span>.select(<span class="string">"配送站点"</span>, station)</span><br><span class="line">        <span class="keyword">self</span>.type(<span class="string">"请输入要查询商品的简码"</span>, code)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">self</span>.click_text(<span class="string">"麻酱烧饼"</span>)</span><br><span class="line">        <span class="keyword">self</span>.select(<span class="string">"订单渠道："</span>, <span class="string">"电话"</span>)</span><br><span class="line">        <span class="keyword">self</span>.select(<span class="string">"订单区域"</span>, <span class="string">"北京"</span>)</span><br><span class="line">        <span class="keyword">self</span>.click_input(<span class="string">"是否预定送餐时间"</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">self</span>.click_btn(<span class="string">"当前"</span>)</span><br><span class="line">        <span class="keyword">self</span>.click_btn(<span class="string">"确认"</span>)</span><br><span class="line">        <span class="keyword">self</span>.check(<span class="string">"支付方式"</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">self</span>.select(<span class="string">"支付方式"</span>, <span class="string">"支付宝"</span>)</span><br><span class="line">        <span class="keyword">self</span>.type_area(<span class="string">"备注"</span>, <span class="string">"自动化测试下单"</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">self</span>.click_btn(<span class="string">"保存"</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试用例示例<br>test_case/customer/test_ccustomer_index.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">".."</span>)</span><br><span class="line"><span class="keyword">from</span> page_obj.customer.CCustomer.index <span class="keyword">import</span> IndexPage</span><br><span class="line"><span class="keyword">from</span> test_case.base_case <span class="keyword">import</span> BaseCase</span><br><span class="line"><span class="keyword">from</span> util.decorator <span class="keyword">import</span> data,level</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCcustomerIndex</span><span class="params">(BaseCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        super(TestCcustomerIndex, cls).setUpClass()</span><br><span class="line">        cls.page = IndexPage(cls.driver)</span><br><span class="line">        cls.page.load()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_search_exist_customer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pre-condition: 18010181267 customer exists</span></span><br><span class="line"><span class="string">        no cleaning need</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        phone = <span class="string">'18010181267'</span></span><br><span class="line">        self.page.search_phone(phone)</span><br><span class="line">        <span class="comment"># assert page_obj value and search value</span></span><br><span class="line">        customer_phone = self.page.get_input_value(<span class="string">'会员电话：'</span>)</span><br><span class="line">        self.assertEqual(customer_phone, phone)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @level(1)</span></span><br><span class="line"><span class="meta">    @data(test_customer_ccustomer_index)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_search_not_exist_customer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            pre-condition: 18010181261 customer not exists</span></span><br><span class="line"><span class="string">            no cleaning need</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        phone = <span class="string">'18010181261'</span></span><br><span class="line">        self.page.search_phone(phone)</span><br><span class="line">        customer_phone = self.page.get_input_value(<span class="string">'会员电话：'</span>)</span><br><span class="line">        self.assertFalse(customer_phone)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><ol>
<li>切换到robot framework, 和收银机UI自动化项目保持一致</li>
<li>绿色化，封装依赖环境，优化可移植性</li>
<li>补充主要业务的测试用例</li>
<li>集成数据库对比</li>
<li>集成到jenkin中</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 自动化测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM工作原理]]></title>
      <url>/2017/11/02/JVM%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html</url>
      <content type="html"><![CDATA[<h1 id="JVM工作原理"><a href="#JVM工作原理" class="headerlink" title="JVM工作原理"></a>JVM工作原理</h1><blockquote>
<p>堆 新生代，老年代 栈</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 性能调优 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat]]></title>
      <url>/2017/11/02/Tomcat%E5%88%86%E6%9E%90%E8%B0%83%E4%BC%98.html</url>
      <content type="html"><![CDATA[<h1 id="Tomcat-调优总结"><a href="#Tomcat-调优总结" class="headerlink" title="Tomcat 调优总结"></a>Tomcat 调优总结</h1><blockquote>
<p>tomcat 优化分为系统优化、JVM调优、tomcat本身优化</p>
</blockquote>
<h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><h3 id="调整tomcat内存占用"><a href="#调整tomcat内存占用" class="headerlink" title="调整tomcat内存占用"></a>调整tomcat内存占用</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/tomcat8/</span>bin/catalina.sh</span><br><span class="line">设置JAVA_OPT=<span class="string">"-Xms 1024m -Xmx 1520m"</span></span><br><span class="line">-Xms tomcat启动初始内存，一般为服务器开机空闲内存<span class="number">-100</span>M</span><br><span class="line">-Xmx tomcat最大占用内存</span><br></pre></td></tr></table></figure>
<h2 id="JVM优化"><a href="#JVM优化" class="headerlink" title="JVM优化"></a>JVM优化</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JVM堆的大小决定了垃圾回收的时间和频度。</span><br><span class="line">堆设置的很大，完全垃圾收集就会很慢，频度会降低，相反，完全收集就很快，但是会更频繁。</span><br><span class="line">调整目标：最小化垃圾收集时间，一在特定的时间内最大化处理客户请求</span><br><span class="line">一般堆设置为物理内存的<span class="number">80</span>%,一次完全的垃圾收集不应超过<span class="number">3</span><span class="number">-5</span>s</span><br><span class="line">当增加处理器时，需要增加内存，应为内存分配时并行的，而垃圾回收不是并行的</span><br></pre></td></tr></table></figure>
<h2 id="tomcat本身优化"><a href="#tomcat本身优化" class="headerlink" title="tomcat本身优化"></a>tomcat本身优化</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/tomcat8/server.xml</span><br><span class="line">&lt;Connector /&gt;配置中</span><br><span class="line">maxThreads=<span class="string">"150"</span> 最大线程数，window最大是2000，linux最大是1024</span><br><span class="line">minSpareThreads=<span class="string">"25"</span> 最小空等待线程-没有连接时也开启25个空线程等待</span><br><span class="line">maxSpareThreads=<span class="string">"75"</span> 最多空线程数，一旦超过这个值，tomcat就会关闭不再需要的socket线程</span><br><span class="line">acceptCount=<span class="string">"100"</span> 最大排队数量，当同时连接数量达到maxThreads时，还可以接收排队的连接数量，超过这个数量，直接返回拒绝连接</span><br><span class="line">enableLookups=false 是否反查域名，配置为false可以提高处理能力</span><br><span class="line">connectionTimeout=30000 网络连接超时，单位：毫秒，设置为0表示永不超时</span><br><span class="line">maxKeepAliveRequest=<span class="string">"1"</span> 等待响应次数，每个连接只响应一次就关闭，这样就不会等待timeout,而产生大量的TIME_WAIT连接</span><br><span class="line">buffersize=<span class="string">"2048"</span>  输入流缓冲大小</span><br><span class="line">compression=<span class="string">"off"</span>  压缩传输，取值on/off/force</span><br></pre></td></tr></table></figure>
<p>最新的tomcat7,tomcat8只剩下两个参数</p>
]]></content>
      
        <categories>
            
            <category> 性能调优 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osi]]></title>
      <url>/2017/11/02/OSI%207%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html</url>
      <content type="html"><![CDATA[<h1 id="OSI-7-层网络模型"><a href="#OSI-7-层网络模型" class="headerlink" title="OSI-7 层网络模型"></a>OSI-7 层网络模型</h1><blockquote>
<p>OSI即Open System Internet开放系统互联,分为上3层（总应用层）和下4层（总传输层）</p>
</blockquote>
<p>从下至上分别为：</p>
<ul>
<li>物理层—主要包含网卡/网线等物理设备、负责处理比特流信息，主要协议有ISO2000,</li>
<li>数据链路层—主要负责内网之间的地址转发，数据被封装层帧，代表设备有二层交换机/集线器等，主要协议有：</li>
<li>网络层—主要负责网络上的寻址，数据被封装成段，代表设备为交换机，主要协议有：</li>
<li>传输层—负责连接的建立与释放，数据完整性等，主要协议有TCP/UDP</li>
</ul>
<hr>
<ul>
<li>会话层—负责会话的建立</li>
<li>应用层—负责编码的统一，加密，SSL协议</li>
<li>表示层—负责用户的使用，主要协议有HTTP,FTP,SMTP,DNS,Telnet等</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 性能调优 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> osi </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
